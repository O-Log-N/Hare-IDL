
#line 26 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT Limit {
bool inclusive;
double value;
};

#line 31 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT Location {
string fileName;
int32_t lineNumber;
};

#line 36 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT CharacterRange {

uint32_t from;
uint32_t to;
};

#line 45 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT CharacterSet {

vector<class CharacterRange> ranges;
};

#line 50 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT Variant {


enum Variant::KIND {IDENTIFIER( "NONE" ) = 0,IDENTIFIER( "NUMBER" ) = 1,IDENTIFIER( "STRING" ) = 2} kind;

double numberValue;
string stringValue;
};

#line 63 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT DataType {





enum DataType::KIND {IDENTIFIER( "ENUM" ) = 0,IDENTIFIER( "NAMED_TYPE" ) = 1,IDENTIFIER( "SEQUENCE" ) = 2,IDENTIFIER( "ENCODING_SPECIFIC" ) = 3,IDENTIFIER( "MAPPING_SPECIFIC" ) = 4,IDENTIFIER( "INTEGER" ) = 5,IDENTIFIER( "FIXED_POINT" ) = 6,IDENTIFIER( "FLOATING_POINT" ) = 7,IDENTIFIER( "CHARACTER" ) = 8,IDENTIFIER( "CHARACTER_STRING" ) = 9,IDENTIFIER( "BIT_STRING" ) = 10,IDENTIFIER( "DICTIONARY" ) = 11,IDENTIFIER( "DISCRIMINATED_UNION" ) = 12} kind;
string name;
string mappingName;
string encodingName;
unique_ptr<class DataType> keyType;
unique_ptr<class DataType> paramType;
struct Limit lowLimit;
struct Limit highLimit;
double fixedPrecision;
uint8_t floatingSignificandBits;
uint8_t floatingExponentBits;
class CharacterSet characterSet;
uint32_t stringMinSize;
uint32_t stringMaxSize;

map<string, class Variant> encodingAttrs;
map<string, class Variant> mappingAttrs;
map<string, uint32_t> enumValues;

//class DataType * idlRepresentation;
//class DataType * mappingRepresentation;
//class DataType * encodingRepresentation;
};

#line 117 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT EncodingSpecifics {


string name;
map<string, class Variant> attrs;
};

#line 125 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT EncodedOrMember {


struct Location location;
};

#line 132 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT DataMember {


class DataType type;
string name;
bool extendTo;
class Variant defaultValue;
vector<string> whenDiscriminant;
};

#line 142 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT EncodedMembers {


class EncodingSpecifics encodingSpecifics;
vector<unique_ptr<class EncodedOrMember> > members;
};

#line 150 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT Structure {




enum Structure::DECLTYPE {IDENTIFIER( "IDL" ) = 0,IDENTIFIER( "MAPPING" ) = 1,IDENTIFIER( "ENCODING" ) = 2} declType;
enum Structure::TYPE {IDENTIFIER( "STRUCT" ) = 0,IDENTIFIER( "RPC" ) = 1,IDENTIFIER( "DISCRIMINATED_UNION" ) = 2} type;
string name;
string discriminant;
};

#line 161 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT Typedef {

struct Location location;
class DataType type;
string name;
};

#line 168 "C:\Projects\o-log-n\Hare-IDL\src\front-back\idl_tree.h";
MAPPING( FrontEnd="1.0") PUBLISHABLE-STRUCT Root {


vector<class Typedef> typedefs;
vector<unique_ptr<class Structure> > structures;
};

