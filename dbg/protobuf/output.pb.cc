// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "output.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Character_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Character_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Character_Animation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_output_2eproto() {
  protobuf_AddDesc_output_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "output.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, name_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Character_descriptor_ = file->message_type(1);
  static const int Character_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, idu8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, idu16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, idu32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, anim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, desc_),
  };
  Character_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Character_descriptor_,
      Character::default_instance_,
      Character_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Character));
  Character_Animation_descriptor_ = Character_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_output_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Character_descriptor_, &Character::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_output_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Character::default_instance_;
  delete Character_reflection_;
}

void protobuf_AddDesc_output_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014output.proto\022\002pb\"\024\n\004Item\022\014\n\004name\030\001 \001(\t"
    "\"\337\001\n\tCharacter\022\014\n\004idU8\030\001 \001(\004\022\r\n\005idU16\030\002 "
    "\001(\004\022\r\n\005idU32\030\003 \001(\004\022\t\n\001x\030\004 \001(\001\022\t\n\001y\030\005 \001(\001"
    "\022\t\n\001z\030\006 \001(\001\022\r\n\005angle\030\007 \001(\001\022%\n\004anim\030\010 \001(\016"
    "2\027.pb.Character.Animation\022\014\n\004flag\030\t \001(\004\022"
    "\014\n\004desc\030\n \001(\t\"3\n\tAnimation\022\013\n\007Running\020\002\022"
    "\014\n\010Standing\020\000\022\013\n\007Walking\020\001", 266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "output.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  Character::default_instance_ = new Character();
  Item::default_instance_->InitAsDefaultInstance();
  Character::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_output_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_output_2eproto {
  StaticDescriptorInitializer_output_2eproto() {
    protobuf_AddDesc_output_2eproto();
  }
} static_descriptor_initializer_output_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kNameFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Item)
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Item)
}

void Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:pb.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_output_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Item)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Item)
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Item)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Item)
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Character_Animation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Character_Animation_descriptor_;
}
bool Character_Animation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Character_Animation Character::Running;
const Character_Animation Character::Standing;
const Character_Animation Character::Walking;
const Character_Animation Character::Animation_MIN;
const Character_Animation Character::Animation_MAX;
const int Character::Animation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Character::kIdU8FieldNumber;
const int Character::kIdU16FieldNumber;
const int Character::kIdU32FieldNumber;
const int Character::kXFieldNumber;
const int Character::kYFieldNumber;
const int Character::kZFieldNumber;
const int Character::kAngleFieldNumber;
const int Character::kAnimFieldNumber;
const int Character::kFlagFieldNumber;
const int Character::kDescFieldNumber;
#endif  // !_MSC_VER

Character::Character()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Character)
}

void Character::InitAsDefaultInstance() {
}

Character::Character(const Character& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Character)
}

void Character::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  idu8_ = GOOGLE_ULONGLONG(0);
  idu16_ = GOOGLE_ULONGLONG(0);
  idu32_ = GOOGLE_ULONGLONG(0);
  x_ = 0;
  y_ = 0;
  z_ = 0;
  angle_ = 0;
  anim_ = 2;
  flag_ = GOOGLE_ULONGLONG(0);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:pb.Character)
  SharedDtor();
}

void Character::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void Character::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Character::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Character_descriptor_;
}

const Character& Character::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_output_2eproto();
  return *default_instance_;
}

Character* Character::default_instance_ = NULL;

Character* Character::New() const {
  return new Character;
}

void Character::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Character*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(idu8_, angle_);
    anim_ = 2;
  }
  if (_has_bits_[8 / 32] & 768) {
    flag_ = GOOGLE_ULONGLONG(0);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Character::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Character)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 idU8 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idu8_)));
          set_has_idu8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idU16;
        break;
      }

      // optional uint64 idU16 = 2;
      case 2: {
        if (tag == 16) {
         parse_idU16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idu16_)));
          set_has_idu16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_idU32;
        break;
      }

      // optional uint64 idU32 = 3;
      case 3: {
        if (tag == 24) {
         parse_idU32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idu32_)));
          set_has_idu32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }

      // optional double x = 4;
      case 4: {
        if (tag == 33) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }

      // optional double y = 5;
      case 5: {
        if (tag == 41) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_z;
        break;
      }

      // optional double z = 6;
      case 6: {
        if (tag == 49) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_angle;
        break;
      }

      // optional double angle = 7;
      case 7: {
        if (tag == 57) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_anim;
        break;
      }

      // optional .pb.Character.Animation anim = 8;
      case 8: {
        if (tag == 64) {
         parse_anim:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Character_Animation_IsValid(value)) {
            set_anim(static_cast< ::pb::Character_Animation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_flag;
        break;
      }

      // optional uint64 flag = 9;
      case 9: {
        if (tag == 72) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_desc;
        break;
      }

      // optional string desc = 10;
      case 10: {
        if (tag == 82) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Character)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Character)
  return false;
#undef DO_
}

void Character::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Character)
  // optional uint64 idU8 = 1;
  if (has_idu8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->idu8(), output);
  }

  // optional uint64 idU16 = 2;
  if (has_idu16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->idu16(), output);
  }

  // optional uint64 idU32 = 3;
  if (has_idu32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->idu32(), output);
  }

  // optional double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // optional double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  // optional double z = 6;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z(), output);
  }

  // optional double angle = 7;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->angle(), output);
  }

  // optional .pb.Character.Animation anim = 8;
  if (has_anim()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->anim(), output);
  }

  // optional uint64 flag = 9;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->flag(), output);
  }

  // optional string desc = 10;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Character)
}

::google::protobuf::uint8* Character::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Character)
  // optional uint64 idU8 = 1;
  if (has_idu8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->idu8(), target);
  }

  // optional uint64 idU16 = 2;
  if (has_idu16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->idu16(), target);
  }

  // optional uint64 idU32 = 3;
  if (has_idu32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->idu32(), target);
  }

  // optional double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // optional double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  // optional double z = 6;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z(), target);
  }

  // optional double angle = 7;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->angle(), target);
  }

  // optional .pb.Character.Animation anim = 8;
  if (has_anim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->anim(), target);
  }

  // optional uint64 flag = 9;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->flag(), target);
  }

  // optional string desc = 10;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Character)
  return target;
}

int Character::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 idU8 = 1;
    if (has_idu8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idu8());
    }

    // optional uint64 idU16 = 2;
    if (has_idu16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idu16());
    }

    // optional uint64 idU32 = 3;
    if (has_idu32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idu32());
    }

    // optional double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 6;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double angle = 7;
    if (has_angle()) {
      total_size += 1 + 8;
    }

    // optional .pb.Character.Animation anim = 8;
    if (has_anim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->anim());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 flag = 9;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flag());
    }

    // optional string desc = 10;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Character::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Character* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Character*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Character::MergeFrom(const Character& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idu8()) {
      set_idu8(from.idu8());
    }
    if (from.has_idu16()) {
      set_idu16(from.idu16());
    }
    if (from.has_idu32()) {
      set_idu32(from.idu32());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_anim()) {
      set_anim(from.anim());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Character::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Character::CopyFrom(const Character& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {

  return true;
}

void Character::Swap(Character* other) {
  if (other != this) {
    std::swap(idu8_, other->idu8_);
    std::swap(idu16_, other->idu16_);
    std::swap(idu32_, other->idu32_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(angle_, other->angle_);
    std::swap(anim_, other->anim_);
    std::swap(flag_, other->flag_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Character::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Character_descriptor_;
  metadata.reflection = Character_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
