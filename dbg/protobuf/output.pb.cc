// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "output.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* BasicTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicTypes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_output_2eproto() {
  protobuf_AddDesc_output_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "output.proto");
  GOOGLE_CHECK(file != NULL);
  BasicTypes_descriptor_ = file->message_type(0);
  static const int BasicTypes_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, max_u32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, max_u64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, max_s32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, max_s64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, a_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, a_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, a_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, flag_),
  };
  BasicTypes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BasicTypes_descriptor_,
      BasicTypes::default_instance_,
      BasicTypes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, _has_bits_[0]),
      -1,
      -1,
      sizeof(BasicTypes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicTypes, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_output_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BasicTypes_descriptor_, &BasicTypes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_output_2eproto() {
  delete BasicTypes::default_instance_;
  delete BasicTypes_reflection_;
}

void protobuf_AddDesc_output_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014output.proto\022\002pb\"\247\001\n\nBasicTypes\022\017\n\007max"
    "_u32\030\001 \001(\r\022\017\n\007max_u64\030\002 \001(\004\022\017\n\007max_s32\030\003"
    " \001(\021\022\017\n\007max_s64\030\004 \001(\022\022\017\n\007a_float\030\005 \001(\002\022\020"
    "\n\010a_double\030\006 \001(\001\022\023\n\013description\030\007 \001(\t\022\017\n"
    "\007a_value\030\010 \001(\r\022\014\n\004flag\030\t \001(\010", 188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "output.proto", &protobuf_RegisterTypes);
  BasicTypes::default_instance_ = new BasicTypes();
  BasicTypes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_output_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_output_2eproto {
  StaticDescriptorInitializer_output_2eproto() {
    protobuf_AddDesc_output_2eproto();
  }
} static_descriptor_initializer_output_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicTypes::kMaxU32FieldNumber;
const int BasicTypes::kMaxU64FieldNumber;
const int BasicTypes::kMaxS32FieldNumber;
const int BasicTypes::kMaxS64FieldNumber;
const int BasicTypes::kAFloatFieldNumber;
const int BasicTypes::kADoubleFieldNumber;
const int BasicTypes::kDescriptionFieldNumber;
const int BasicTypes::kAValueFieldNumber;
const int BasicTypes::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicTypes::BasicTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BasicTypes)
}

void BasicTypes::InitAsDefaultInstance() {
}

BasicTypes::BasicTypes(const BasicTypes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BasicTypes)
}

void BasicTypes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_u32_ = 0u;
  max_u64_ = GOOGLE_ULONGLONG(0);
  max_s32_ = 0;
  max_s64_ = GOOGLE_LONGLONG(0);
  a_float_ = 0;
  a_double_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_value_ = 0u;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicTypes::~BasicTypes() {
  // @@protoc_insertion_point(destructor:pb.BasicTypes)
  SharedDtor();
}

void BasicTypes::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BasicTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicTypes_descriptor_;
}

const BasicTypes& BasicTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_output_2eproto();
  return *default_instance_;
}

BasicTypes* BasicTypes::default_instance_ = NULL;

BasicTypes* BasicTypes::New(::google::protobuf::Arena* arena) const {
  BasicTypes* n = new BasicTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BasicTypes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BasicTypes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BasicTypes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(max_u64_, a_value_);
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  flag_ = false;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BasicTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BasicTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_u32 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_u32_)));
          set_has_max_u32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_u64;
        break;
      }

      // optional uint64 max_u64 = 2;
      case 2: {
        if (tag == 16) {
         parse_max_u64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_u64_)));
          set_has_max_u64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_s32;
        break;
      }

      // optional sint32 max_s32 = 3;
      case 3: {
        if (tag == 24) {
         parse_max_s32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &max_s32_)));
          set_has_max_s32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_s64;
        break;
      }

      // optional sint64 max_s64 = 4;
      case 4: {
        if (tag == 32) {
         parse_max_s64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &max_s64_)));
          set_has_max_s64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_a_float;
        break;
      }

      // optional float a_float = 5;
      case 5: {
        if (tag == 45) {
         parse_a_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_float_)));
          set_has_a_float();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_a_double;
        break;
      }

      // optional double a_double = 6;
      case 6: {
        if (tag == 49) {
         parse_a_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_double_)));
          set_has_a_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // optional string description = 7;
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.BasicTypes.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_a_value;
        break;
      }

      // optional uint32 a_value = 8;
      case 8: {
        if (tag == 64) {
         parse_a_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_value_)));
          set_has_a_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_flag;
        break;
      }

      // optional bool flag = 9;
      case 9: {
        if (tag == 72) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BasicTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BasicTypes)
  return false;
#undef DO_
}

void BasicTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BasicTypes)
  // optional uint32 max_u32 = 1;
  if (has_max_u32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_u32(), output);
  }

  // optional uint64 max_u64 = 2;
  if (has_max_u64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->max_u64(), output);
  }

  // optional sint32 max_s32 = 3;
  if (has_max_s32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->max_s32(), output);
  }

  // optional sint64 max_s64 = 4;
  if (has_max_s64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->max_s64(), output);
  }

  // optional float a_float = 5;
  if (has_a_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->a_float(), output);
  }

  // optional double a_double = 6;
  if (has_a_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->a_double(), output);
  }

  // optional string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.BasicTypes.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // optional uint32 a_value = 8;
  if (has_a_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->a_value(), output);
  }

  // optional bool flag = 9;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BasicTypes)
}

::google::protobuf::uint8* BasicTypes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BasicTypes)
  // optional uint32 max_u32 = 1;
  if (has_max_u32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_u32(), target);
  }

  // optional uint64 max_u64 = 2;
  if (has_max_u64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->max_u64(), target);
  }

  // optional sint32 max_s32 = 3;
  if (has_max_s32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->max_s32(), target);
  }

  // optional sint64 max_s64 = 4;
  if (has_max_s64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->max_s64(), target);
  }

  // optional float a_float = 5;
  if (has_a_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->a_float(), target);
  }

  // optional double a_double = 6;
  if (has_a_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->a_double(), target);
  }

  // optional string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.BasicTypes.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // optional uint32 a_value = 8;
  if (has_a_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->a_value(), target);
  }

  // optional bool flag = 9;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BasicTypes)
  return target;
}

int BasicTypes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BasicTypes)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 max_u32 = 1;
    if (has_max_u32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_u32());
    }

    // optional uint64 max_u64 = 2;
    if (has_max_u64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_u64());
    }

    // optional sint32 max_s32 = 3;
    if (has_max_s32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->max_s32());
    }

    // optional sint64 max_s64 = 4;
    if (has_max_s64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->max_s64());
    }

    // optional float a_float = 5;
    if (has_a_float()) {
      total_size += 1 + 4;
    }

    // optional double a_double = 6;
    if (has_a_double()) {
      total_size += 1 + 8;
    }

    // optional string description = 7;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 a_value = 8;
    if (has_a_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->a_value());
    }

  }
  // optional bool flag = 9;
  if (has_flag()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BasicTypes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BasicTypes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicTypes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BasicTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BasicTypes)
    MergeFrom(*source);
  }
}

void BasicTypes::MergeFrom(const BasicTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BasicTypes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_u32()) {
      set_max_u32(from.max_u32());
    }
    if (from.has_max_u64()) {
      set_max_u64(from.max_u64());
    }
    if (from.has_max_s32()) {
      set_max_s32(from.max_s32());
    }
    if (from.has_max_s64()) {
      set_max_s64(from.max_s64());
    }
    if (from.has_a_float()) {
      set_a_float(from.a_float());
    }
    if (from.has_a_double()) {
      set_a_double(from.a_double());
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_a_value()) {
      set_a_value(from.a_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BasicTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BasicTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicTypes::CopyFrom(const BasicTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BasicTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicTypes::IsInitialized() const {

  return true;
}

void BasicTypes::Swap(BasicTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicTypes::InternalSwap(BasicTypes* other) {
  std::swap(max_u32_, other->max_u32_);
  std::swap(max_u64_, other->max_u64_);
  std::swap(max_s32_, other->max_s32_);
  std::swap(max_s64_, other->max_s64_);
  std::swap(a_float_, other->a_float_);
  std::swap(a_double_, other->a_double_);
  description_.Swap(&other->description_);
  std::swap(a_value_, other->a_value_);
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasicTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicTypes_descriptor_;
  metadata.reflection = BasicTypes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasicTypes

// optional uint32 max_u32 = 1;
bool BasicTypes::has_max_u32() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BasicTypes::set_has_max_u32() {
  _has_bits_[0] |= 0x00000001u;
}
void BasicTypes::clear_has_max_u32() {
  _has_bits_[0] &= ~0x00000001u;
}
void BasicTypes::clear_max_u32() {
  max_u32_ = 0u;
  clear_has_max_u32();
}
 ::google::protobuf::uint32 BasicTypes::max_u32() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.max_u32)
  return max_u32_;
}
 void BasicTypes::set_max_u32(::google::protobuf::uint32 value) {
  set_has_max_u32();
  max_u32_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.max_u32)
}

// optional uint64 max_u64 = 2;
bool BasicTypes::has_max_u64() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BasicTypes::set_has_max_u64() {
  _has_bits_[0] |= 0x00000002u;
}
void BasicTypes::clear_has_max_u64() {
  _has_bits_[0] &= ~0x00000002u;
}
void BasicTypes::clear_max_u64() {
  max_u64_ = GOOGLE_ULONGLONG(0);
  clear_has_max_u64();
}
 ::google::protobuf::uint64 BasicTypes::max_u64() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.max_u64)
  return max_u64_;
}
 void BasicTypes::set_max_u64(::google::protobuf::uint64 value) {
  set_has_max_u64();
  max_u64_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.max_u64)
}

// optional sint32 max_s32 = 3;
bool BasicTypes::has_max_s32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BasicTypes::set_has_max_s32() {
  _has_bits_[0] |= 0x00000004u;
}
void BasicTypes::clear_has_max_s32() {
  _has_bits_[0] &= ~0x00000004u;
}
void BasicTypes::clear_max_s32() {
  max_s32_ = 0;
  clear_has_max_s32();
}
 ::google::protobuf::int32 BasicTypes::max_s32() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.max_s32)
  return max_s32_;
}
 void BasicTypes::set_max_s32(::google::protobuf::int32 value) {
  set_has_max_s32();
  max_s32_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.max_s32)
}

// optional sint64 max_s64 = 4;
bool BasicTypes::has_max_s64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BasicTypes::set_has_max_s64() {
  _has_bits_[0] |= 0x00000008u;
}
void BasicTypes::clear_has_max_s64() {
  _has_bits_[0] &= ~0x00000008u;
}
void BasicTypes::clear_max_s64() {
  max_s64_ = GOOGLE_LONGLONG(0);
  clear_has_max_s64();
}
 ::google::protobuf::int64 BasicTypes::max_s64() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.max_s64)
  return max_s64_;
}
 void BasicTypes::set_max_s64(::google::protobuf::int64 value) {
  set_has_max_s64();
  max_s64_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.max_s64)
}

// optional float a_float = 5;
bool BasicTypes::has_a_float() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BasicTypes::set_has_a_float() {
  _has_bits_[0] |= 0x00000010u;
}
void BasicTypes::clear_has_a_float() {
  _has_bits_[0] &= ~0x00000010u;
}
void BasicTypes::clear_a_float() {
  a_float_ = 0;
  clear_has_a_float();
}
 float BasicTypes::a_float() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.a_float)
  return a_float_;
}
 void BasicTypes::set_a_float(float value) {
  set_has_a_float();
  a_float_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.a_float)
}

// optional double a_double = 6;
bool BasicTypes::has_a_double() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BasicTypes::set_has_a_double() {
  _has_bits_[0] |= 0x00000020u;
}
void BasicTypes::clear_has_a_double() {
  _has_bits_[0] &= ~0x00000020u;
}
void BasicTypes::clear_a_double() {
  a_double_ = 0;
  clear_has_a_double();
}
 double BasicTypes::a_double() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.a_double)
  return a_double_;
}
 void BasicTypes::set_a_double(double value) {
  set_has_a_double();
  a_double_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.a_double)
}

// optional string description = 7;
bool BasicTypes::has_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BasicTypes::set_has_description() {
  _has_bits_[0] |= 0x00000040u;
}
void BasicTypes::clear_has_description() {
  _has_bits_[0] &= ~0x00000040u;
}
void BasicTypes::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& BasicTypes::description() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasicTypes::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BasicTypes.description)
}
 void BasicTypes::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BasicTypes.description)
}
 void BasicTypes::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BasicTypes.description)
}
 ::std::string* BasicTypes::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:pb.BasicTypes.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BasicTypes::release_description() {
  // @@protoc_insertion_point(field_release:pb.BasicTypes.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BasicTypes::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:pb.BasicTypes.description)
}

// optional uint32 a_value = 8;
bool BasicTypes::has_a_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BasicTypes::set_has_a_value() {
  _has_bits_[0] |= 0x00000080u;
}
void BasicTypes::clear_has_a_value() {
  _has_bits_[0] &= ~0x00000080u;
}
void BasicTypes::clear_a_value() {
  a_value_ = 0u;
  clear_has_a_value();
}
 ::google::protobuf::uint32 BasicTypes::a_value() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.a_value)
  return a_value_;
}
 void BasicTypes::set_a_value(::google::protobuf::uint32 value) {
  set_has_a_value();
  a_value_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.a_value)
}

// optional bool flag = 9;
bool BasicTypes::has_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BasicTypes::set_has_flag() {
  _has_bits_[0] |= 0x00000100u;
}
void BasicTypes::clear_has_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
void BasicTypes::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
 bool BasicTypes::flag() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.flag)
  return flag_;
}
 void BasicTypes::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
