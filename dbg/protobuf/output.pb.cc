// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "output.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* ItemBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Character_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Character_reflection_ = NULL;
const ::google::protobuf::Descriptor* __unique_ptr_ItemBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  __unique_ptr_ItemBase_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_output_2eproto() {
  protobuf_AddDesc_output_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "output.proto");
  GOOGLE_CHECK(file != NULL);
  ItemBase_descriptor_ = file->message_type(0);
  static const int ItemBase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, id_),
  };
  ItemBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemBase_descriptor_,
      ItemBase::default_instance_,
      ItemBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemBase));
  Item_descriptor_ = file->message_type(1);
  static const int Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, __parent_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Character_descriptor_ = file->message_type(2);
  static const int Character_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, max_u8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, max_u16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, max_u32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, min_s8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, min_s16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, min_s32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, max_s8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, max_s16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, max_s32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, more_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, some_ints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, poly_ptr_),
  };
  Character_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Character_descriptor_,
      Character::default_instance_,
      Character_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Character));
  __unique_ptr_ItemBase_descriptor_ = file->message_type(3);
  static const int __unique_ptr_ItemBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(__unique_ptr_ItemBase, du_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(__unique_ptr_ItemBase, du_2_),
  };
  __unique_ptr_ItemBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      __unique_ptr_ItemBase_descriptor_,
      __unique_ptr_ItemBase::default_instance_,
      __unique_ptr_ItemBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(__unique_ptr_ItemBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(__unique_ptr_ItemBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(__unique_ptr_ItemBase));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_output_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemBase_descriptor_, &ItemBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Character_descriptor_, &Character::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    __unique_ptr_ItemBase_descriptor_, &__unique_ptr_ItemBase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_output_2eproto() {
  delete ItemBase::default_instance_;
  delete ItemBase_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Character::default_instance_;
  delete Character_reflection_;
  delete __unique_ptr_ItemBase::default_instance_;
  delete __unique_ptr_ItemBase_reflection_;
}

void protobuf_AddDesc_output_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014output.proto\022\002pb\"\026\n\010ItemBase\022\n\n\002id\030\001 \001"
    "(\r\"C\n\004Item\022\014\n\004name\030\001 \001(\t\022\r\n\005valid\030\002 \001(\010\022"
    "\036\n\010__parent\030\003 \001(\0132\014.pb.ItemBase\"\322\002\n\tChar"
    "acter\022\016\n\006max_u8\030\001 \001(\r\022\017\n\007max_u16\030\002 \001(\r\022\017"
    "\n\007max_u32\030\003 \001(\r\022\016\n\006min_s8\030\004 \001(\021\022\017\n\007min_s"
    "16\030\005 \001(\021\022\017\n\007min_s32\030\006 \001(\021\022\016\n\006max_s8\030\007 \001("
    "\021\022\017\n\007max_s16\030\010 \001(\021\022\017\n\007max_s32\030\t \001(\021\022\t\n\001x"
    "\030\n \001(\001\022\t\n\001y\030\013 \001(\001\022\t\n\001z\030\014 \001(\001\022\014\n\004flag\030\r \001"
    "(\010\022\014\n\004desc\030\016 \001(\t\022\021\n\tmore_text\030\017 \003(\t\022\025\n\ts"
    "ome_ints\030\020 \003(\021B\002\020\000\022\033\n\tinventory\030\021 \003(\0132\010."
    "pb.Item\022+\n\010poly_ptr\030\022 \001(\0132\031.pb.__unique_"
    "ptr_ItemBase\"K\n\025__unique_ptr_ItemBase\022\026\n"
    "\004du_1\030\001 \001(\0132\010.pb.Item\022\032\n\004du_2\030\002 \001(\0132\014.pb"
    ".ItemBase", 529);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "output.proto", &protobuf_RegisterTypes);
  ItemBase::default_instance_ = new ItemBase();
  Item::default_instance_ = new Item();
  Character::default_instance_ = new Character();
  __unique_ptr_ItemBase::default_instance_ = new __unique_ptr_ItemBase();
  ItemBase::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  Character::default_instance_->InitAsDefaultInstance();
  __unique_ptr_ItemBase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_output_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_output_2eproto {
  StaticDescriptorInitializer_output_2eproto() {
    protobuf_AddDesc_output_2eproto();
  }
} static_descriptor_initializer_output_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ItemBase::kIdFieldNumber;
#endif  // !_MSC_VER

ItemBase::ItemBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ItemBase)
}

void ItemBase::InitAsDefaultInstance() {
}

ItemBase::ItemBase(const ItemBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ItemBase)
}

void ItemBase::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemBase::~ItemBase() {
  // @@protoc_insertion_point(destructor:pb.ItemBase)
  SharedDtor();
}

void ItemBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemBase_descriptor_;
}

const ItemBase& ItemBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_output_2eproto();
  return *default_instance_;
}

ItemBase* ItemBase::default_instance_ = NULL;

ItemBase* ItemBase::New() const {
  return new ItemBase;
}

void ItemBase::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ItemBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ItemBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ItemBase)
  return false;
#undef DO_
}

void ItemBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ItemBase)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ItemBase)
}

::google::protobuf::uint8* ItemBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ItemBase)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ItemBase)
  return target;
}

int ItemBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemBase::MergeFrom(const ItemBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemBase::CopyFrom(const ItemBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBase::IsInitialized() const {

  return true;
}

void ItemBase::Swap(ItemBase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemBase_descriptor_;
  metadata.reflection = ItemBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item::kNameFieldNumber;
const int Item::kValidFieldNumber;
const int Item::kParentFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Item)
}

void Item::InitAsDefaultInstance() {
  __parent_ = const_cast< ::pb::ItemBase*>(&::pb::ItemBase::default_instance());
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Item)
}

void Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valid_ = false;
  __parent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:pb.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete __parent_;
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_output_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    valid_ = false;
    if (has___parent()) {
      if (__parent_ != NULL) __parent_->::pb::ItemBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_valid;
        break;
      }

      // optional bool valid = 2;
      case 2: {
        if (tag == 16) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse___parent;
        break;
      }

      // optional .pb.ItemBase __parent = 3;
      case 3: {
        if (tag == 26) {
         parse___parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable___parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Item)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool valid = 2;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->valid(), output);
  }

  // optional .pb.ItemBase __parent = 3;
  if (has___parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->__parent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Item)
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Item)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool valid = 2;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->valid(), target);
  }

  // optional .pb.ItemBase __parent = 3;
  if (has___parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->__parent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Item)
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool valid = 2;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional .pb.ItemBase __parent = 3;
    if (has___parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->__parent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has___parent()) {
      mutable___parent()->::pb::ItemBase::MergeFrom(from.__parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(valid_, other->valid_);
    std::swap(__parent_, other->__parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Character::kMaxU8FieldNumber;
const int Character::kMaxU16FieldNumber;
const int Character::kMaxU32FieldNumber;
const int Character::kMinS8FieldNumber;
const int Character::kMinS16FieldNumber;
const int Character::kMinS32FieldNumber;
const int Character::kMaxS8FieldNumber;
const int Character::kMaxS16FieldNumber;
const int Character::kMaxS32FieldNumber;
const int Character::kXFieldNumber;
const int Character::kYFieldNumber;
const int Character::kZFieldNumber;
const int Character::kFlagFieldNumber;
const int Character::kDescFieldNumber;
const int Character::kMoreTextFieldNumber;
const int Character::kSomeIntsFieldNumber;
const int Character::kInventoryFieldNumber;
const int Character::kPolyPtrFieldNumber;
#endif  // !_MSC_VER

Character::Character()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Character)
}

void Character::InitAsDefaultInstance() {
  poly_ptr_ = const_cast< ::pb::__unique_ptr_ItemBase*>(&::pb::__unique_ptr_ItemBase::default_instance());
}

Character::Character(const Character& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Character)
}

void Character::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_u8_ = 0u;
  max_u16_ = 0u;
  max_u32_ = 0u;
  min_s8_ = 0;
  min_s16_ = 0;
  min_s32_ = 0;
  max_s8_ = 0;
  max_s16_ = 0;
  max_s32_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  flag_ = false;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poly_ptr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:pb.Character)
  SharedDtor();
}

void Character::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
    delete poly_ptr_;
  }
}

void Character::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Character::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Character_descriptor_;
}

const Character& Character::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_output_2eproto();
  return *default_instance_;
}

Character* Character::default_instance_ = NULL;

Character* Character::New() const {
  return new Character;
}

void Character::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Character*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(max_u8_, max_s16_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(x_, z_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  if (has_poly_ptr()) {
    if (poly_ptr_ != NULL) poly_ptr_->::pb::__unique_ptr_ItemBase::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  more_text_.Clear();
  some_ints_.Clear();
  inventory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Character::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Character)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_u8 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_u8_)));
          set_has_max_u8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_u16;
        break;
      }

      // optional uint32 max_u16 = 2;
      case 2: {
        if (tag == 16) {
         parse_max_u16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_u16_)));
          set_has_max_u16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_u32;
        break;
      }

      // optional uint32 max_u32 = 3;
      case 3: {
        if (tag == 24) {
         parse_max_u32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_u32_)));
          set_has_max_u32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_s8;
        break;
      }

      // optional sint32 min_s8 = 4;
      case 4: {
        if (tag == 32) {
         parse_min_s8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &min_s8_)));
          set_has_min_s8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_min_s16;
        break;
      }

      // optional sint32 min_s16 = 5;
      case 5: {
        if (tag == 40) {
         parse_min_s16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &min_s16_)));
          set_has_min_s16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_min_s32;
        break;
      }

      // optional sint32 min_s32 = 6;
      case 6: {
        if (tag == 48) {
         parse_min_s32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &min_s32_)));
          set_has_min_s32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_s8;
        break;
      }

      // optional sint32 max_s8 = 7;
      case 7: {
        if (tag == 56) {
         parse_max_s8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &max_s8_)));
          set_has_max_s8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_s16;
        break;
      }

      // optional sint32 max_s16 = 8;
      case 8: {
        if (tag == 64) {
         parse_max_s16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &max_s16_)));
          set_has_max_s16();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_s32;
        break;
      }

      // optional sint32 max_s32 = 9;
      case 9: {
        if (tag == 72) {
         parse_max_s32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &max_s32_)));
          set_has_max_s32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_x;
        break;
      }

      // optional double x = 10;
      case 10: {
        if (tag == 81) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_y;
        break;
      }

      // optional double y = 11;
      case 11: {
        if (tag == 89) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_z;
        break;
      }

      // optional double z = 12;
      case 12: {
        if (tag == 97) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_flag;
        break;
      }

      // optional bool flag = 13;
      case 13: {
        if (tag == 104) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_desc;
        break;
      }

      // optional string desc = 14;
      case 14: {
        if (tag == 114) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_more_text;
        break;
      }

      // repeated string more_text = 15;
      case 15: {
        if (tag == 122) {
         parse_more_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_more_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->more_text(this->more_text_size() - 1).data(),
            this->more_text(this->more_text_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "more_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_more_text;
        if (input->ExpectTag(128)) goto parse_some_ints;
        break;
      }

      // repeated sint32 some_ints = 16 [packed = false];
      case 16: {
        if (tag == 128) {
         parse_some_ints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 128, input, this->mutable_some_ints())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_some_ints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_some_ints;
        if (input->ExpectTag(138)) goto parse_inventory;
        break;
      }

      // repeated .pb.Item inventory = 17;
      case 17: {
        if (tag == 138) {
         parse_inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inventory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_inventory;
        if (input->ExpectTag(146)) goto parse_poly_ptr;
        break;
      }

      // optional .pb.__unique_ptr_ItemBase poly_ptr = 18;
      case 18: {
        if (tag == 146) {
         parse_poly_ptr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poly_ptr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Character)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Character)
  return false;
#undef DO_
}

void Character::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Character)
  // optional uint32 max_u8 = 1;
  if (has_max_u8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_u8(), output);
  }

  // optional uint32 max_u16 = 2;
  if (has_max_u16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_u16(), output);
  }

  // optional uint32 max_u32 = 3;
  if (has_max_u32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_u32(), output);
  }

  // optional sint32 min_s8 = 4;
  if (has_min_s8()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->min_s8(), output);
  }

  // optional sint32 min_s16 = 5;
  if (has_min_s16()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->min_s16(), output);
  }

  // optional sint32 min_s32 = 6;
  if (has_min_s32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->min_s32(), output);
  }

  // optional sint32 max_s8 = 7;
  if (has_max_s8()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->max_s8(), output);
  }

  // optional sint32 max_s16 = 8;
  if (has_max_s16()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->max_s16(), output);
  }

  // optional sint32 max_s32 = 9;
  if (has_max_s32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->max_s32(), output);
  }

  // optional double x = 10;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->x(), output);
  }

  // optional double y = 11;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->y(), output);
  }

  // optional double z = 12;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->z(), output);
  }

  // optional bool flag = 13;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->flag(), output);
  }

  // optional string desc = 14;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->desc(), output);
  }

  // repeated string more_text = 15;
  for (int i = 0; i < this->more_text_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->more_text(i).data(), this->more_text(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "more_text");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->more_text(i), output);
  }

  // repeated sint32 some_ints = 16 [packed = false];
  for (int i = 0; i < this->some_ints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      16, this->some_ints(i), output);
  }

  // repeated .pb.Item inventory = 17;
  for (int i = 0; i < this->inventory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->inventory(i), output);
  }

  // optional .pb.__unique_ptr_ItemBase poly_ptr = 18;
  if (has_poly_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->poly_ptr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Character)
}

::google::protobuf::uint8* Character::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Character)
  // optional uint32 max_u8 = 1;
  if (has_max_u8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_u8(), target);
  }

  // optional uint32 max_u16 = 2;
  if (has_max_u16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_u16(), target);
  }

  // optional uint32 max_u32 = 3;
  if (has_max_u32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_u32(), target);
  }

  // optional sint32 min_s8 = 4;
  if (has_min_s8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->min_s8(), target);
  }

  // optional sint32 min_s16 = 5;
  if (has_min_s16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->min_s16(), target);
  }

  // optional sint32 min_s32 = 6;
  if (has_min_s32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->min_s32(), target);
  }

  // optional sint32 max_s8 = 7;
  if (has_max_s8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->max_s8(), target);
  }

  // optional sint32 max_s16 = 8;
  if (has_max_s16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->max_s16(), target);
  }

  // optional sint32 max_s32 = 9;
  if (has_max_s32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->max_s32(), target);
  }

  // optional double x = 10;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->x(), target);
  }

  // optional double y = 11;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->y(), target);
  }

  // optional double z = 12;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->z(), target);
  }

  // optional bool flag = 13;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->flag(), target);
  }

  // optional string desc = 14;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->desc(), target);
  }

  // repeated string more_text = 15;
  for (int i = 0; i < this->more_text_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->more_text(i).data(), this->more_text(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "more_text");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->more_text(i), target);
  }

  // repeated sint32 some_ints = 16 [packed = false];
  for (int i = 0; i < this->some_ints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(16, this->some_ints(i), target);
  }

  // repeated .pb.Item inventory = 17;
  for (int i = 0; i < this->inventory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->inventory(i), target);
  }

  // optional .pb.__unique_ptr_ItemBase poly_ptr = 18;
  if (has_poly_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->poly_ptr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Character)
  return target;
}

int Character::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_u8 = 1;
    if (has_max_u8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_u8());
    }

    // optional uint32 max_u16 = 2;
    if (has_max_u16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_u16());
    }

    // optional uint32 max_u32 = 3;
    if (has_max_u32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_u32());
    }

    // optional sint32 min_s8 = 4;
    if (has_min_s8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->min_s8());
    }

    // optional sint32 min_s16 = 5;
    if (has_min_s16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->min_s16());
    }

    // optional sint32 min_s32 = 6;
    if (has_min_s32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->min_s32());
    }

    // optional sint32 max_s8 = 7;
    if (has_max_s8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->max_s8());
    }

    // optional sint32 max_s16 = 8;
    if (has_max_s16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->max_s16());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 max_s32 = 9;
    if (has_max_s32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->max_s32());
    }

    // optional double x = 10;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 11;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 12;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional bool flag = 13;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // optional string desc = 14;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .pb.__unique_ptr_ItemBase poly_ptr = 18;
    if (has_poly_ptr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poly_ptr());
    }

  }
  // repeated string more_text = 15;
  total_size += 1 * this->more_text_size();
  for (int i = 0; i < this->more_text_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->more_text(i));
  }

  // repeated sint32 some_ints = 16 [packed = false];
  {
    int data_size = 0;
    for (int i = 0; i < this->some_ints_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->some_ints(i));
    }
    total_size += 2 * this->some_ints_size() + data_size;
  }

  // repeated .pb.Item inventory = 17;
  total_size += 2 * this->inventory_size();
  for (int i = 0; i < this->inventory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inventory(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Character::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Character* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Character*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Character::MergeFrom(const Character& from) {
  GOOGLE_CHECK_NE(&from, this);
  more_text_.MergeFrom(from.more_text_);
  some_ints_.MergeFrom(from.some_ints_);
  inventory_.MergeFrom(from.inventory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_u8()) {
      set_max_u8(from.max_u8());
    }
    if (from.has_max_u16()) {
      set_max_u16(from.max_u16());
    }
    if (from.has_max_u32()) {
      set_max_u32(from.max_u32());
    }
    if (from.has_min_s8()) {
      set_min_s8(from.min_s8());
    }
    if (from.has_min_s16()) {
      set_min_s16(from.min_s16());
    }
    if (from.has_min_s32()) {
      set_min_s32(from.min_s32());
    }
    if (from.has_max_s8()) {
      set_max_s8(from.max_s8());
    }
    if (from.has_max_s16()) {
      set_max_s16(from.max_s16());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_s32()) {
      set_max_s32(from.max_s32());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_poly_ptr()) {
      mutable_poly_ptr()->::pb::__unique_ptr_ItemBase::MergeFrom(from.poly_ptr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Character::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Character::CopyFrom(const Character& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {

  return true;
}

void Character::Swap(Character* other) {
  if (other != this) {
    std::swap(max_u8_, other->max_u8_);
    std::swap(max_u16_, other->max_u16_);
    std::swap(max_u32_, other->max_u32_);
    std::swap(min_s8_, other->min_s8_);
    std::swap(min_s16_, other->min_s16_);
    std::swap(min_s32_, other->min_s32_);
    std::swap(max_s8_, other->max_s8_);
    std::swap(max_s16_, other->max_s16_);
    std::swap(max_s32_, other->max_s32_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(flag_, other->flag_);
    std::swap(desc_, other->desc_);
    more_text_.Swap(&other->more_text_);
    some_ints_.Swap(&other->some_ints_);
    inventory_.Swap(&other->inventory_);
    std::swap(poly_ptr_, other->poly_ptr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Character::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Character_descriptor_;
  metadata.reflection = Character_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int __unique_ptr_ItemBase::kDu1FieldNumber;
const int __unique_ptr_ItemBase::kDu2FieldNumber;
#endif  // !_MSC_VER

__unique_ptr_ItemBase::__unique_ptr_ItemBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.__unique_ptr_ItemBase)
}

void __unique_ptr_ItemBase::InitAsDefaultInstance() {
  du_1_ = const_cast< ::pb::Item*>(&::pb::Item::default_instance());
  du_2_ = const_cast< ::pb::ItemBase*>(&::pb::ItemBase::default_instance());
}

__unique_ptr_ItemBase::__unique_ptr_ItemBase(const __unique_ptr_ItemBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.__unique_ptr_ItemBase)
}

void __unique_ptr_ItemBase::SharedCtor() {
  _cached_size_ = 0;
  du_1_ = NULL;
  du_2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

__unique_ptr_ItemBase::~__unique_ptr_ItemBase() {
  // @@protoc_insertion_point(destructor:pb.__unique_ptr_ItemBase)
  SharedDtor();
}

void __unique_ptr_ItemBase::SharedDtor() {
  if (this != default_instance_) {
    delete du_1_;
    delete du_2_;
  }
}

void __unique_ptr_ItemBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* __unique_ptr_ItemBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return __unique_ptr_ItemBase_descriptor_;
}

const __unique_ptr_ItemBase& __unique_ptr_ItemBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_output_2eproto();
  return *default_instance_;
}

__unique_ptr_ItemBase* __unique_ptr_ItemBase::default_instance_ = NULL;

__unique_ptr_ItemBase* __unique_ptr_ItemBase::New() const {
  return new __unique_ptr_ItemBase;
}

void __unique_ptr_ItemBase::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_du_1()) {
      if (du_1_ != NULL) du_1_->::pb::Item::Clear();
    }
    if (has_du_2()) {
      if (du_2_ != NULL) du_2_->::pb::ItemBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool __unique_ptr_ItemBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.__unique_ptr_ItemBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Item du_1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_du_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_du_2;
        break;
      }

      // optional .pb.ItemBase du_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_du_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_du_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.__unique_ptr_ItemBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.__unique_ptr_ItemBase)
  return false;
#undef DO_
}

void __unique_ptr_ItemBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.__unique_ptr_ItemBase)
  // optional .pb.Item du_1 = 1;
  if (has_du_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->du_1(), output);
  }

  // optional .pb.ItemBase du_2 = 2;
  if (has_du_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->du_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.__unique_ptr_ItemBase)
}

::google::protobuf::uint8* __unique_ptr_ItemBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.__unique_ptr_ItemBase)
  // optional .pb.Item du_1 = 1;
  if (has_du_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->du_1(), target);
  }

  // optional .pb.ItemBase du_2 = 2;
  if (has_du_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->du_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.__unique_ptr_ItemBase)
  return target;
}

int __unique_ptr_ItemBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Item du_1 = 1;
    if (has_du_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->du_1());
    }

    // optional .pb.ItemBase du_2 = 2;
    if (has_du_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->du_2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void __unique_ptr_ItemBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const __unique_ptr_ItemBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const __unique_ptr_ItemBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void __unique_ptr_ItemBase::MergeFrom(const __unique_ptr_ItemBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_du_1()) {
      mutable_du_1()->::pb::Item::MergeFrom(from.du_1());
    }
    if (from.has_du_2()) {
      mutable_du_2()->::pb::ItemBase::MergeFrom(from.du_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void __unique_ptr_ItemBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void __unique_ptr_ItemBase::CopyFrom(const __unique_ptr_ItemBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool __unique_ptr_ItemBase::IsInitialized() const {

  return true;
}

void __unique_ptr_ItemBase::Swap(__unique_ptr_ItemBase* other) {
  if (other != this) {
    std::swap(du_1_, other->du_1_);
    std::swap(du_2_, other->du_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata __unique_ptr_ItemBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = __unique_ptr_ItemBase_descriptor_;
  metadata.reflection = __unique_ptr_ItemBase_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
