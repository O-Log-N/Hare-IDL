// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output.proto

#ifndef PROTOBUF_output_2eproto__INCLUDED
#define PROTOBUF_output_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_output_2eproto();
void protobuf_AssignDesc_output_2eproto();
void protobuf_ShutdownFile_output_2eproto();

class CharacterRange;
class CharacterSet;
class DataMember;
class DataType;
class EncodedMembers;
class EncodedOrMember;
class EncodingSpecifics;
class Limit;
class Location;
class Root;
class Structure;
class Typedef;
class Variant;
class __unique_ptr_DataType;
class __unique_ptr_EncodedOrMember;
class __unique_ptr_Structure;
class map_string_Variant;
class map_string_uint32;

// ===================================================================

class Limit : public ::google::protobuf::Message {
 public:
  Limit();
  virtual ~Limit();

  Limit(const Limit& from);

  inline Limit& operator=(const Limit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Limit& default_instance();

  void Swap(Limit* other);

  // implements Message ----------------------------------------------

  inline Limit* New() const { return New(NULL); }

  Limit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Limit& from);
  void MergeFrom(const Limit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Limit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool inclusive = 1;
  bool has_inclusive() const;
  void clear_inclusive();
  static const int kInclusiveFieldNumber = 1;
  bool inclusive() const;
  void set_inclusive(bool value);

  // optional double value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:pb.Limit)
 private:
  inline void set_has_inclusive();
  inline void clear_has_inclusive();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double value_;
  bool inclusive_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static Limit* default_instance_;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // optional sint32 line_number = 2;
  bool has_line_number() const;
  void clear_line_number();
  static const int kLineNumberFieldNumber = 2;
  ::google::protobuf::int32 line_number() const;
  void set_line_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Location)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_line_number();
  inline void clear_has_line_number();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::int32 line_number_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class CharacterRange : public ::google::protobuf::Message {
 public:
  CharacterRange();
  virtual ~CharacterRange();

  CharacterRange(const CharacterRange& from);

  inline CharacterRange& operator=(const CharacterRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterRange& default_instance();

  void Swap(CharacterRange* other);

  // implements Message ----------------------------------------------

  inline CharacterRange* New() const { return New(NULL); }

  CharacterRange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterRange& from);
  void MergeFrom(const CharacterRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CharacterRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  ::google::protobuf::uint32 from() const;
  void set_from(::google::protobuf::uint32 value);

  // optional uint32 to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  ::google::protobuf::uint32 to() const;
  void set_to(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.CharacterRange)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 from_;
  ::google::protobuf::uint32 to_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static CharacterRange* default_instance_;
};
// -------------------------------------------------------------------

class CharacterSet : public ::google::protobuf::Message {
 public:
  CharacterSet();
  virtual ~CharacterSet();

  CharacterSet(const CharacterSet& from);

  inline CharacterSet& operator=(const CharacterSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterSet& default_instance();

  void Swap(CharacterSet* other);

  // implements Message ----------------------------------------------

  inline CharacterSet* New() const { return New(NULL); }

  CharacterSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterSet& from);
  void MergeFrom(const CharacterSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CharacterSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.CharacterRange ranges = 1;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 1;
  const ::pb::CharacterRange& ranges(int index) const;
  ::pb::CharacterRange* mutable_ranges(int index);
  ::pb::CharacterRange* add_ranges();
  ::google::protobuf::RepeatedPtrField< ::pb::CharacterRange >*
      mutable_ranges();
  const ::google::protobuf::RepeatedPtrField< ::pb::CharacterRange >&
      ranges() const;

  // @@protoc_insertion_point(class_scope:pb.CharacterSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::CharacterRange > ranges_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static CharacterSet* default_instance_;
};
// -------------------------------------------------------------------

class Variant : public ::google::protobuf::Message {
 public:
  Variant();
  virtual ~Variant();

  Variant(const Variant& from);

  inline Variant& operator=(const Variant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Variant& default_instance();

  void Swap(Variant* other);

  // implements Message ----------------------------------------------

  inline Variant* New() const { return New(NULL); }

  Variant* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Variant& from);
  void MergeFrom(const Variant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Variant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 kind = 1;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::google::protobuf::uint32 kind() const;
  void set_kind(::google::protobuf::uint32 value);

  // optional double number_value = 2;
  bool has_number_value() const;
  void clear_number_value();
  static const int kNumberValueFieldNumber = 2;
  double number_value() const;
  void set_number_value(double value);

  // optional string string_value = 3;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 3;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // @@protoc_insertion_point(class_scope:pb.Variant)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_number_value();
  inline void clear_has_number_value();
  inline void set_has_string_value();
  inline void clear_has_string_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double number_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::uint32 kind_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static Variant* default_instance_;
};
// -------------------------------------------------------------------

class DataType : public ::google::protobuf::Message {
 public:
  DataType();
  virtual ~DataType();

  DataType(const DataType& from);

  inline DataType& operator=(const DataType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataType& default_instance();

  void Swap(DataType* other);

  // implements Message ----------------------------------------------

  inline DataType* New() const { return New(NULL); }

  DataType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataType& from);
  void MergeFrom(const DataType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 kind = 1;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::google::protobuf::uint32 kind() const;
  void set_kind(::google::protobuf::uint32 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string mapping_name = 3;
  bool has_mapping_name() const;
  void clear_mapping_name();
  static const int kMappingNameFieldNumber = 3;
  const ::std::string& mapping_name() const;
  void set_mapping_name(const ::std::string& value);
  void set_mapping_name(const char* value);
  void set_mapping_name(const char* value, size_t size);
  ::std::string* mutable_mapping_name();
  ::std::string* release_mapping_name();
  void set_allocated_mapping_name(::std::string* mapping_name);

  // optional string encoding_name = 4;
  bool has_encoding_name() const;
  void clear_encoding_name();
  static const int kEncodingNameFieldNumber = 4;
  const ::std::string& encoding_name() const;
  void set_encoding_name(const ::std::string& value);
  void set_encoding_name(const char* value);
  void set_encoding_name(const char* value, size_t size);
  ::std::string* mutable_encoding_name();
  ::std::string* release_encoding_name();
  void set_allocated_encoding_name(::std::string* encoding_name);

  // optional .pb.__unique_ptr_DataType key_type = 5;
  bool has_key_type() const;
  void clear_key_type();
  static const int kKeyTypeFieldNumber = 5;
  const ::pb::__unique_ptr_DataType& key_type() const;
  ::pb::__unique_ptr_DataType* mutable_key_type();
  ::pb::__unique_ptr_DataType* release_key_type();
  void set_allocated_key_type(::pb::__unique_ptr_DataType* key_type);

  // optional .pb.__unique_ptr_DataType param_type = 6;
  bool has_param_type() const;
  void clear_param_type();
  static const int kParamTypeFieldNumber = 6;
  const ::pb::__unique_ptr_DataType& param_type() const;
  ::pb::__unique_ptr_DataType* mutable_param_type();
  ::pb::__unique_ptr_DataType* release_param_type();
  void set_allocated_param_type(::pb::__unique_ptr_DataType* param_type);

  // optional .pb.Limit low_limit = 7;
  bool has_low_limit() const;
  void clear_low_limit();
  static const int kLowLimitFieldNumber = 7;
  const ::pb::Limit& low_limit() const;
  ::pb::Limit* mutable_low_limit();
  ::pb::Limit* release_low_limit();
  void set_allocated_low_limit(::pb::Limit* low_limit);

  // optional .pb.Limit high_limit = 8;
  bool has_high_limit() const;
  void clear_high_limit();
  static const int kHighLimitFieldNumber = 8;
  const ::pb::Limit& high_limit() const;
  ::pb::Limit* mutable_high_limit();
  ::pb::Limit* release_high_limit();
  void set_allocated_high_limit(::pb::Limit* high_limit);

  // optional double fixed_precision = 9;
  bool has_fixed_precision() const;
  void clear_fixed_precision();
  static const int kFixedPrecisionFieldNumber = 9;
  double fixed_precision() const;
  void set_fixed_precision(double value);

  // optional uint32 floating_significand_bits = 10;
  bool has_floating_significand_bits() const;
  void clear_floating_significand_bits();
  static const int kFloatingSignificandBitsFieldNumber = 10;
  ::google::protobuf::uint32 floating_significand_bits() const;
  void set_floating_significand_bits(::google::protobuf::uint32 value);

  // optional uint32 floating_exponent_bits = 11;
  bool has_floating_exponent_bits() const;
  void clear_floating_exponent_bits();
  static const int kFloatingExponentBitsFieldNumber = 11;
  ::google::protobuf::uint32 floating_exponent_bits() const;
  void set_floating_exponent_bits(::google::protobuf::uint32 value);

  // optional .pb.CharacterSet character_set = 12;
  bool has_character_set() const;
  void clear_character_set();
  static const int kCharacterSetFieldNumber = 12;
  const ::pb::CharacterSet& character_set() const;
  ::pb::CharacterSet* mutable_character_set();
  ::pb::CharacterSet* release_character_set();
  void set_allocated_character_set(::pb::CharacterSet* character_set);

  // optional uint32 string_min_size = 13;
  bool has_string_min_size() const;
  void clear_string_min_size();
  static const int kStringMinSizeFieldNumber = 13;
  ::google::protobuf::uint32 string_min_size() const;
  void set_string_min_size(::google::protobuf::uint32 value);

  // optional uint32 string_max_size = 14;
  bool has_string_max_size() const;
  void clear_string_max_size();
  static const int kStringMaxSizeFieldNumber = 14;
  ::google::protobuf::uint32 string_max_size() const;
  void set_string_max_size(::google::protobuf::uint32 value);

  // repeated .pb.map_string_Variant encoding_attrs = 15;
  int encoding_attrs_size() const;
  void clear_encoding_attrs();
  static const int kEncodingAttrsFieldNumber = 15;
  const ::pb::map_string_Variant& encoding_attrs(int index) const;
  ::pb::map_string_Variant* mutable_encoding_attrs(int index);
  ::pb::map_string_Variant* add_encoding_attrs();
  ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >*
      mutable_encoding_attrs();
  const ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >&
      encoding_attrs() const;

  // repeated .pb.map_string_Variant mapping_attrs = 16;
  int mapping_attrs_size() const;
  void clear_mapping_attrs();
  static const int kMappingAttrsFieldNumber = 16;
  const ::pb::map_string_Variant& mapping_attrs(int index) const;
  ::pb::map_string_Variant* mutable_mapping_attrs(int index);
  ::pb::map_string_Variant* add_mapping_attrs();
  ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >*
      mutable_mapping_attrs();
  const ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >&
      mapping_attrs() const;

  // repeated .pb.map_string_uint32 enum_values = 17;
  int enum_values_size() const;
  void clear_enum_values();
  static const int kEnumValuesFieldNumber = 17;
  const ::pb::map_string_uint32& enum_values(int index) const;
  ::pb::map_string_uint32* mutable_enum_values(int index);
  ::pb::map_string_uint32* add_enum_values();
  ::google::protobuf::RepeatedPtrField< ::pb::map_string_uint32 >*
      mutable_enum_values();
  const ::google::protobuf::RepeatedPtrField< ::pb::map_string_uint32 >&
      enum_values() const;

  // @@protoc_insertion_point(class_scope:pb.DataType)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mapping_name();
  inline void clear_has_mapping_name();
  inline void set_has_encoding_name();
  inline void clear_has_encoding_name();
  inline void set_has_key_type();
  inline void clear_has_key_type();
  inline void set_has_param_type();
  inline void clear_has_param_type();
  inline void set_has_low_limit();
  inline void clear_has_low_limit();
  inline void set_has_high_limit();
  inline void clear_has_high_limit();
  inline void set_has_fixed_precision();
  inline void clear_has_fixed_precision();
  inline void set_has_floating_significand_bits();
  inline void clear_has_floating_significand_bits();
  inline void set_has_floating_exponent_bits();
  inline void clear_has_floating_exponent_bits();
  inline void set_has_character_set();
  inline void clear_has_character_set();
  inline void set_has_string_min_size();
  inline void clear_has_string_min_size();
  inline void set_has_string_max_size();
  inline void clear_has_string_max_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr mapping_name_;
  ::google::protobuf::internal::ArenaStringPtr encoding_name_;
  ::pb::__unique_ptr_DataType* key_type_;
  ::google::protobuf::uint32 kind_;
  ::google::protobuf::uint32 floating_significand_bits_;
  ::pb::__unique_ptr_DataType* param_type_;
  ::pb::Limit* low_limit_;
  ::pb::Limit* high_limit_;
  double fixed_precision_;
  ::pb::CharacterSet* character_set_;
  ::google::protobuf::uint32 floating_exponent_bits_;
  ::google::protobuf::uint32 string_min_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant > encoding_attrs_;
  ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant > mapping_attrs_;
  ::google::protobuf::RepeatedPtrField< ::pb::map_string_uint32 > enum_values_;
  ::google::protobuf::uint32 string_max_size_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static DataType* default_instance_;
};
// -------------------------------------------------------------------

class EncodingSpecifics : public ::google::protobuf::Message {
 public:
  EncodingSpecifics();
  virtual ~EncodingSpecifics();

  EncodingSpecifics(const EncodingSpecifics& from);

  inline EncodingSpecifics& operator=(const EncodingSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncodingSpecifics& default_instance();

  void Swap(EncodingSpecifics* other);

  // implements Message ----------------------------------------------

  inline EncodingSpecifics* New() const { return New(NULL); }

  EncodingSpecifics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncodingSpecifics& from);
  void MergeFrom(const EncodingSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncodingSpecifics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .pb.map_string_Variant attrs = 2;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 2;
  const ::pb::map_string_Variant& attrs(int index) const;
  ::pb::map_string_Variant* mutable_attrs(int index);
  ::pb::map_string_Variant* add_attrs();
  ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >*
      mutable_attrs();
  const ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >&
      attrs() const;

  // @@protoc_insertion_point(class_scope:pb.EncodingSpecifics)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant > attrs_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static EncodingSpecifics* default_instance_;
};
// -------------------------------------------------------------------

class EncodedOrMember : public ::google::protobuf::Message {
 public:
  EncodedOrMember();
  virtual ~EncodedOrMember();

  EncodedOrMember(const EncodedOrMember& from);

  inline EncodedOrMember& operator=(const EncodedOrMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncodedOrMember& default_instance();

  void Swap(EncodedOrMember* other);

  // implements Message ----------------------------------------------

  inline EncodedOrMember* New() const { return New(NULL); }

  EncodedOrMember* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncodedOrMember& from);
  void MergeFrom(const EncodedOrMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncodedOrMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Location location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::pb::Location& location() const;
  ::pb::Location* mutable_location();
  ::pb::Location* release_location();
  void set_allocated_location(::pb::Location* location);

  // @@protoc_insertion_point(class_scope:pb.EncodedOrMember)
 private:
  inline void set_has_location();
  inline void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::Location* location_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static EncodedOrMember* default_instance_;
};
// -------------------------------------------------------------------

class DataMember : public ::google::protobuf::Message {
 public:
  DataMember();
  virtual ~DataMember();

  DataMember(const DataMember& from);

  inline DataMember& operator=(const DataMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataMember& default_instance();

  void Swap(DataMember* other);

  // implements Message ----------------------------------------------

  inline DataMember* New() const { return New(NULL); }

  DataMember* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataMember& from);
  void MergeFrom(const DataMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.DataType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::pb::DataType& type() const;
  ::pb::DataType* mutable_type();
  ::pb::DataType* release_type();
  void set_allocated_type(::pb::DataType* type);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool extend_to = 3;
  bool has_extend_to() const;
  void clear_extend_to();
  static const int kExtendToFieldNumber = 3;
  bool extend_to() const;
  void set_extend_to(bool value);

  // optional .pb.Variant default_value = 4;
  bool has_default_value() const;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 4;
  const ::pb::Variant& default_value() const;
  ::pb::Variant* mutable_default_value();
  ::pb::Variant* release_default_value();
  void set_allocated_default_value(::pb::Variant* default_value);

  // repeated string when_discriminant = 5;
  int when_discriminant_size() const;
  void clear_when_discriminant();
  static const int kWhenDiscriminantFieldNumber = 5;
  const ::std::string& when_discriminant(int index) const;
  ::std::string* mutable_when_discriminant(int index);
  void set_when_discriminant(int index, const ::std::string& value);
  void set_when_discriminant(int index, const char* value);
  void set_when_discriminant(int index, const char* value, size_t size);
  ::std::string* add_when_discriminant();
  void add_when_discriminant(const ::std::string& value);
  void add_when_discriminant(const char* value);
  void add_when_discriminant(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& when_discriminant() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_when_discriminant();

  // optional .pb.EncodedOrMember __parent = 6;
  bool has___parent() const;
  void clear___parent();
  static const int kParentFieldNumber = 6;
  const ::pb::EncodedOrMember& __parent() const;
  ::pb::EncodedOrMember* mutable___parent();
  ::pb::EncodedOrMember* release___parent();
  void set_allocated___parent(::pb::EncodedOrMember* __parent);

  // @@protoc_insertion_point(class_scope:pb.DataMember)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_extend_to();
  inline void clear_has_extend_to();
  inline void set_has_default_value();
  inline void clear_has_default_value();
  inline void set_has___parent();
  inline void clear_has___parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::DataType* type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pb::Variant* default_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> when_discriminant_;
  ::pb::EncodedOrMember* __parent_;
  bool extend_to_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static DataMember* default_instance_;
};
// -------------------------------------------------------------------

class EncodedMembers : public ::google::protobuf::Message {
 public:
  EncodedMembers();
  virtual ~EncodedMembers();

  EncodedMembers(const EncodedMembers& from);

  inline EncodedMembers& operator=(const EncodedMembers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncodedMembers& default_instance();

  void Swap(EncodedMembers* other);

  // implements Message ----------------------------------------------

  inline EncodedMembers* New() const { return New(NULL); }

  EncodedMembers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncodedMembers& from);
  void MergeFrom(const EncodedMembers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncodedMembers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EncodingSpecifics encoding_specifics = 1;
  bool has_encoding_specifics() const;
  void clear_encoding_specifics();
  static const int kEncodingSpecificsFieldNumber = 1;
  const ::pb::EncodingSpecifics& encoding_specifics() const;
  ::pb::EncodingSpecifics* mutable_encoding_specifics();
  ::pb::EncodingSpecifics* release_encoding_specifics();
  void set_allocated_encoding_specifics(::pb::EncodingSpecifics* encoding_specifics);

  // repeated .pb.__unique_ptr_EncodedOrMember members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  const ::pb::__unique_ptr_EncodedOrMember& members(int index) const;
  ::pb::__unique_ptr_EncodedOrMember* mutable_members(int index);
  ::pb::__unique_ptr_EncodedOrMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_EncodedOrMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_EncodedOrMember >&
      members() const;

  // optional .pb.EncodedOrMember __parent = 3;
  bool has___parent() const;
  void clear___parent();
  static const int kParentFieldNumber = 3;
  const ::pb::EncodedOrMember& __parent() const;
  ::pb::EncodedOrMember* mutable___parent();
  ::pb::EncodedOrMember* release___parent();
  void set_allocated___parent(::pb::EncodedOrMember* __parent);

  // @@protoc_insertion_point(class_scope:pb.EncodedMembers)
 private:
  inline void set_has_encoding_specifics();
  inline void clear_has_encoding_specifics();
  inline void set_has___parent();
  inline void clear_has___parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::EncodingSpecifics* encoding_specifics_;
  ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_EncodedOrMember > members_;
  ::pb::EncodedOrMember* __parent_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static EncodedMembers* default_instance_;
};
// -------------------------------------------------------------------

class Structure : public ::google::protobuf::Message {
 public:
  Structure();
  virtual ~Structure();

  Structure(const Structure& from);

  inline Structure& operator=(const Structure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Structure& default_instance();

  void Swap(Structure* other);

  // implements Message ----------------------------------------------

  inline Structure* New() const { return New(NULL); }

  Structure* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Structure& from);
  void MergeFrom(const Structure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Structure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 decl_type = 1;
  bool has_decl_type() const;
  void clear_decl_type();
  static const int kDeclTypeFieldNumber = 1;
  ::google::protobuf::uint32 decl_type() const;
  void set_decl_type(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string discriminant = 4;
  bool has_discriminant() const;
  void clear_discriminant();
  static const int kDiscriminantFieldNumber = 4;
  const ::std::string& discriminant() const;
  void set_discriminant(const ::std::string& value);
  void set_discriminant(const char* value);
  void set_discriminant(const char* value, size_t size);
  ::std::string* mutable_discriminant();
  ::std::string* release_discriminant();
  void set_allocated_discriminant(::std::string* discriminant);

  // optional string inherited_from = 5;
  bool has_inherited_from() const;
  void clear_inherited_from();
  static const int kInheritedFromFieldNumber = 5;
  const ::std::string& inherited_from() const;
  void set_inherited_from(const ::std::string& value);
  void set_inherited_from(const char* value);
  void set_inherited_from(const char* value, size_t size);
  ::std::string* mutable_inherited_from();
  ::std::string* release_inherited_from();
  void set_allocated_inherited_from(::std::string* inherited_from);

  // optional .pb.EncodedMembers __parent = 6;
  bool has___parent() const;
  void clear___parent();
  static const int kParentFieldNumber = 6;
  const ::pb::EncodedMembers& __parent() const;
  ::pb::EncodedMembers* mutable___parent();
  ::pb::EncodedMembers* release___parent();
  void set_allocated___parent(::pb::EncodedMembers* __parent);

  // @@protoc_insertion_point(class_scope:pb.Structure)
 private:
  inline void set_has_decl_type();
  inline void clear_has_decl_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_discriminant();
  inline void clear_has_discriminant();
  inline void set_has_inherited_from();
  inline void clear_has_inherited_from();
  inline void set_has___parent();
  inline void clear_has___parent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 decl_type_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr discriminant_;
  ::google::protobuf::internal::ArenaStringPtr inherited_from_;
  ::pb::EncodedMembers* __parent_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static Structure* default_instance_;
};
// -------------------------------------------------------------------

class Typedef : public ::google::protobuf::Message {
 public:
  Typedef();
  virtual ~Typedef();

  Typedef(const Typedef& from);

  inline Typedef& operator=(const Typedef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Typedef& default_instance();

  void Swap(Typedef* other);

  // implements Message ----------------------------------------------

  inline Typedef* New() const { return New(NULL); }

  Typedef* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Typedef& from);
  void MergeFrom(const Typedef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Typedef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Location location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::pb::Location& location() const;
  ::pb::Location* mutable_location();
  ::pb::Location* release_location();
  void set_allocated_location(::pb::Location* location);

  // optional .pb.DataType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::pb::DataType& type() const;
  ::pb::DataType* mutable_type();
  ::pb::DataType* release_type();
  void set_allocated_type(::pb::DataType* type);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.Typedef)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::Location* location_;
  ::pb::DataType* type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static Typedef* default_instance_;
};
// -------------------------------------------------------------------

class Root : public ::google::protobuf::Message {
 public:
  Root();
  virtual ~Root();

  Root(const Root& from);

  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Root& default_instance();

  void Swap(Root* other);

  // implements Message ----------------------------------------------

  inline Root* New() const { return New(NULL); }

  Root* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root& from);
  void MergeFrom(const Root& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Root* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Typedef typedefs = 1;
  int typedefs_size() const;
  void clear_typedefs();
  static const int kTypedefsFieldNumber = 1;
  const ::pb::Typedef& typedefs(int index) const;
  ::pb::Typedef* mutable_typedefs(int index);
  ::pb::Typedef* add_typedefs();
  ::google::protobuf::RepeatedPtrField< ::pb::Typedef >*
      mutable_typedefs();
  const ::google::protobuf::RepeatedPtrField< ::pb::Typedef >&
      typedefs() const;

  // repeated .pb.__unique_ptr_Structure structures = 2;
  int structures_size() const;
  void clear_structures();
  static const int kStructuresFieldNumber = 2;
  const ::pb::__unique_ptr_Structure& structures(int index) const;
  ::pb::__unique_ptr_Structure* mutable_structures(int index);
  ::pb::__unique_ptr_Structure* add_structures();
  ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_Structure >*
      mutable_structures();
  const ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_Structure >&
      structures() const;

  // @@protoc_insertion_point(class_scope:pb.Root)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::Typedef > typedefs_;
  ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_Structure > structures_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static Root* default_instance_;
};
// -------------------------------------------------------------------

class __unique_ptr_DataType : public ::google::protobuf::Message {
 public:
  __unique_ptr_DataType();
  virtual ~__unique_ptr_DataType();

  __unique_ptr_DataType(const __unique_ptr_DataType& from);

  inline __unique_ptr_DataType& operator=(const __unique_ptr_DataType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const __unique_ptr_DataType& default_instance();

  void Swap(__unique_ptr_DataType* other);

  // implements Message ----------------------------------------------

  inline __unique_ptr_DataType* New() const { return New(NULL); }

  __unique_ptr_DataType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const __unique_ptr_DataType& from);
  void MergeFrom(const __unique_ptr_DataType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(__unique_ptr_DataType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.DataType du_data_type = 1;
  bool has_du_data_type() const;
  void clear_du_data_type();
  static const int kDuDataTypeFieldNumber = 1;
  const ::pb::DataType& du_data_type() const;
  ::pb::DataType* mutable_du_data_type();
  ::pb::DataType* release_du_data_type();
  void set_allocated_du_data_type(::pb::DataType* du_data_type);

  // @@protoc_insertion_point(class_scope:pb.__unique_ptr_DataType)
 private:
  inline void set_has_du_data_type();
  inline void clear_has_du_data_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::DataType* du_data_type_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static __unique_ptr_DataType* default_instance_;
};
// -------------------------------------------------------------------

class __unique_ptr_EncodedOrMember : public ::google::protobuf::Message {
 public:
  __unique_ptr_EncodedOrMember();
  virtual ~__unique_ptr_EncodedOrMember();

  __unique_ptr_EncodedOrMember(const __unique_ptr_EncodedOrMember& from);

  inline __unique_ptr_EncodedOrMember& operator=(const __unique_ptr_EncodedOrMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const __unique_ptr_EncodedOrMember& default_instance();

  void Swap(__unique_ptr_EncodedOrMember* other);

  // implements Message ----------------------------------------------

  inline __unique_ptr_EncodedOrMember* New() const { return New(NULL); }

  __unique_ptr_EncodedOrMember* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const __unique_ptr_EncodedOrMember& from);
  void MergeFrom(const __unique_ptr_EncodedOrMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(__unique_ptr_EncodedOrMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.DataMember du_data_member = 1;
  bool has_du_data_member() const;
  void clear_du_data_member();
  static const int kDuDataMemberFieldNumber = 1;
  const ::pb::DataMember& du_data_member() const;
  ::pb::DataMember* mutable_du_data_member();
  ::pb::DataMember* release_du_data_member();
  void set_allocated_du_data_member(::pb::DataMember* du_data_member);

  // optional .pb.EncodedMembers du_encoded_members = 2;
  bool has_du_encoded_members() const;
  void clear_du_encoded_members();
  static const int kDuEncodedMembersFieldNumber = 2;
  const ::pb::EncodedMembers& du_encoded_members() const;
  ::pb::EncodedMembers* mutable_du_encoded_members();
  ::pb::EncodedMembers* release_du_encoded_members();
  void set_allocated_du_encoded_members(::pb::EncodedMembers* du_encoded_members);

  // optional .pb.EncodedOrMember du_encoded_or_member = 3;
  bool has_du_encoded_or_member() const;
  void clear_du_encoded_or_member();
  static const int kDuEncodedOrMemberFieldNumber = 3;
  const ::pb::EncodedOrMember& du_encoded_or_member() const;
  ::pb::EncodedOrMember* mutable_du_encoded_or_member();
  ::pb::EncodedOrMember* release_du_encoded_or_member();
  void set_allocated_du_encoded_or_member(::pb::EncodedOrMember* du_encoded_or_member);

  // @@protoc_insertion_point(class_scope:pb.__unique_ptr_EncodedOrMember)
 private:
  inline void set_has_du_data_member();
  inline void clear_has_du_data_member();
  inline void set_has_du_encoded_members();
  inline void clear_has_du_encoded_members();
  inline void set_has_du_encoded_or_member();
  inline void clear_has_du_encoded_or_member();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::DataMember* du_data_member_;
  ::pb::EncodedMembers* du_encoded_members_;
  ::pb::EncodedOrMember* du_encoded_or_member_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static __unique_ptr_EncodedOrMember* default_instance_;
};
// -------------------------------------------------------------------

class __unique_ptr_Structure : public ::google::protobuf::Message {
 public:
  __unique_ptr_Structure();
  virtual ~__unique_ptr_Structure();

  __unique_ptr_Structure(const __unique_ptr_Structure& from);

  inline __unique_ptr_Structure& operator=(const __unique_ptr_Structure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const __unique_ptr_Structure& default_instance();

  void Swap(__unique_ptr_Structure* other);

  // implements Message ----------------------------------------------

  inline __unique_ptr_Structure* New() const { return New(NULL); }

  __unique_ptr_Structure* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const __unique_ptr_Structure& from);
  void MergeFrom(const __unique_ptr_Structure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(__unique_ptr_Structure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.Structure du_structure = 1;
  bool has_du_structure() const;
  void clear_du_structure();
  static const int kDuStructureFieldNumber = 1;
  const ::pb::Structure& du_structure() const;
  ::pb::Structure* mutable_du_structure();
  ::pb::Structure* release_du_structure();
  void set_allocated_du_structure(::pb::Structure* du_structure);

  // @@protoc_insertion_point(class_scope:pb.__unique_ptr_Structure)
 private:
  inline void set_has_du_structure();
  inline void clear_has_du_structure();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::Structure* du_structure_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static __unique_ptr_Structure* default_instance_;
};
// -------------------------------------------------------------------

class map_string_Variant : public ::google::protobuf::Message {
 public:
  map_string_Variant();
  virtual ~map_string_Variant();

  map_string_Variant(const map_string_Variant& from);

  inline map_string_Variant& operator=(const map_string_Variant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const map_string_Variant& default_instance();

  void Swap(map_string_Variant* other);

  // implements Message ----------------------------------------------

  inline map_string_Variant* New() const { return New(NULL); }

  map_string_Variant* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const map_string_Variant& from);
  void MergeFrom(const map_string_Variant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(map_string_Variant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .pb.Variant value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::pb::Variant& value() const;
  ::pb::Variant* mutable_value();
  ::pb::Variant* release_value();
  void set_allocated_value(::pb::Variant* value);

  // @@protoc_insertion_point(class_scope:pb.map_string_Variant)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::pb::Variant* value_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static map_string_Variant* default_instance_;
};
// -------------------------------------------------------------------

class map_string_uint32 : public ::google::protobuf::Message {
 public:
  map_string_uint32();
  virtual ~map_string_uint32();

  map_string_uint32(const map_string_uint32& from);

  inline map_string_uint32& operator=(const map_string_uint32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const map_string_uint32& default_instance();

  void Swap(map_string_uint32* other);

  // implements Message ----------------------------------------------

  inline map_string_uint32* New() const { return New(NULL); }

  map_string_uint32* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const map_string_uint32& from);
  void MergeFrom(const map_string_uint32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(map_string_uint32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.map_string_uint32)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static map_string_uint32* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Limit

// optional bool inclusive = 1;
inline bool Limit::has_inclusive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Limit::set_has_inclusive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Limit::clear_has_inclusive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Limit::clear_inclusive() {
  inclusive_ = false;
  clear_has_inclusive();
}
inline bool Limit::inclusive() const {
  // @@protoc_insertion_point(field_get:pb.Limit.inclusive)
  return inclusive_;
}
inline void Limit::set_inclusive(bool value) {
  set_has_inclusive();
  inclusive_ = value;
  // @@protoc_insertion_point(field_set:pb.Limit.inclusive)
}

// optional double value = 2;
inline bool Limit::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Limit::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Limit::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Limit::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double Limit::value() const {
  // @@protoc_insertion_point(field_get:pb.Limit.value)
  return value_;
}
inline void Limit::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.Limit.value)
}

// -------------------------------------------------------------------

// Location

// optional string file_name = 1;
inline bool Location::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& Location::file_name() const {
  // @@protoc_insertion_point(field_get:pb.Location.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Location.file_name)
}
inline void Location::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Location.file_name)
}
inline void Location::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Location.file_name)
}
inline ::std::string* Location::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:pb.Location.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_file_name() {
  // @@protoc_insertion_point(field_release:pb.Location.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:pb.Location.file_name)
}

// optional sint32 line_number = 2;
inline bool Location::has_line_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location::set_has_line_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location::clear_has_line_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location::clear_line_number() {
  line_number_ = 0;
  clear_has_line_number();
}
inline ::google::protobuf::int32 Location::line_number() const {
  // @@protoc_insertion_point(field_get:pb.Location.line_number)
  return line_number_;
}
inline void Location::set_line_number(::google::protobuf::int32 value) {
  set_has_line_number();
  line_number_ = value;
  // @@protoc_insertion_point(field_set:pb.Location.line_number)
}

// -------------------------------------------------------------------

// CharacterRange

// optional uint32 from = 1;
inline bool CharacterRange::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterRange::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterRange::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterRange::clear_from() {
  from_ = 0u;
  clear_has_from();
}
inline ::google::protobuf::uint32 CharacterRange::from() const {
  // @@protoc_insertion_point(field_get:pb.CharacterRange.from)
  return from_;
}
inline void CharacterRange::set_from(::google::protobuf::uint32 value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:pb.CharacterRange.from)
}

// optional uint32 to = 2;
inline bool CharacterRange::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterRange::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterRange::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterRange::clear_to() {
  to_ = 0u;
  clear_has_to();
}
inline ::google::protobuf::uint32 CharacterRange::to() const {
  // @@protoc_insertion_point(field_get:pb.CharacterRange.to)
  return to_;
}
inline void CharacterRange::set_to(::google::protobuf::uint32 value) {
  set_has_to();
  to_ = value;
  // @@protoc_insertion_point(field_set:pb.CharacterRange.to)
}

// -------------------------------------------------------------------

// CharacterSet

// repeated .pb.CharacterRange ranges = 1;
inline int CharacterSet::ranges_size() const {
  return ranges_.size();
}
inline void CharacterSet::clear_ranges() {
  ranges_.Clear();
}
inline const ::pb::CharacterRange& CharacterSet::ranges(int index) const {
  // @@protoc_insertion_point(field_get:pb.CharacterSet.ranges)
  return ranges_.Get(index);
}
inline ::pb::CharacterRange* CharacterSet::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CharacterSet.ranges)
  return ranges_.Mutable(index);
}
inline ::pb::CharacterRange* CharacterSet::add_ranges() {
  // @@protoc_insertion_point(field_add:pb.CharacterSet.ranges)
  return ranges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CharacterRange >*
CharacterSet::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:pb.CharacterSet.ranges)
  return &ranges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CharacterRange >&
CharacterSet::ranges() const {
  // @@protoc_insertion_point(field_list:pb.CharacterSet.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// Variant

// optional uint32 kind = 1;
inline bool Variant::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Variant::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Variant::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Variant::clear_kind() {
  kind_ = 0u;
  clear_has_kind();
}
inline ::google::protobuf::uint32 Variant::kind() const {
  // @@protoc_insertion_point(field_get:pb.Variant.kind)
  return kind_;
}
inline void Variant::set_kind(::google::protobuf::uint32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:pb.Variant.kind)
}

// optional double number_value = 2;
inline bool Variant::has_number_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Variant::set_has_number_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Variant::clear_has_number_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Variant::clear_number_value() {
  number_value_ = 0;
  clear_has_number_value();
}
inline double Variant::number_value() const {
  // @@protoc_insertion_point(field_get:pb.Variant.number_value)
  return number_value_;
}
inline void Variant::set_number_value(double value) {
  set_has_number_value();
  number_value_ = value;
  // @@protoc_insertion_point(field_set:pb.Variant.number_value)
}

// optional string string_value = 3;
inline bool Variant::has_string_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Variant::set_has_string_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Variant::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Variant::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
inline const ::std::string& Variant::string_value() const {
  // @@protoc_insertion_point(field_get:pb.Variant.string_value)
  return string_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variant::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Variant.string_value)
}
inline void Variant::set_string_value(const char* value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Variant.string_value)
}
inline void Variant::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Variant.string_value)
}
inline ::std::string* Variant::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:pb.Variant.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variant::release_string_value() {
  // @@protoc_insertion_point(field_release:pb.Variant.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variant::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:pb.Variant.string_value)
}

// -------------------------------------------------------------------

// DataType

// optional uint32 kind = 1;
inline bool DataType::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataType::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataType::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataType::clear_kind() {
  kind_ = 0u;
  clear_has_kind();
}
inline ::google::protobuf::uint32 DataType::kind() const {
  // @@protoc_insertion_point(field_get:pb.DataType.kind)
  return kind_;
}
inline void DataType::set_kind(::google::protobuf::uint32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:pb.DataType.kind)
}

// optional string name = 2;
inline bool DataType::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataType::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataType::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DataType::name() const {
  // @@protoc_insertion_point(field_get:pb.DataType.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataType::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DataType.name)
}
inline void DataType::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DataType.name)
}
inline void DataType::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DataType.name)
}
inline ::std::string* DataType::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pb.DataType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataType::release_name() {
  // @@protoc_insertion_point(field_release:pb.DataType.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.DataType.name)
}

// optional string mapping_name = 3;
inline bool DataType::has_mapping_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataType::set_has_mapping_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataType::clear_has_mapping_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataType::clear_mapping_name() {
  mapping_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mapping_name();
}
inline const ::std::string& DataType::mapping_name() const {
  // @@protoc_insertion_point(field_get:pb.DataType.mapping_name)
  return mapping_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataType::set_mapping_name(const ::std::string& value) {
  set_has_mapping_name();
  mapping_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DataType.mapping_name)
}
inline void DataType::set_mapping_name(const char* value) {
  set_has_mapping_name();
  mapping_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DataType.mapping_name)
}
inline void DataType::set_mapping_name(const char* value, size_t size) {
  set_has_mapping_name();
  mapping_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DataType.mapping_name)
}
inline ::std::string* DataType::mutable_mapping_name() {
  set_has_mapping_name();
  // @@protoc_insertion_point(field_mutable:pb.DataType.mapping_name)
  return mapping_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataType::release_mapping_name() {
  // @@protoc_insertion_point(field_release:pb.DataType.mapping_name)
  clear_has_mapping_name();
  return mapping_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataType::set_allocated_mapping_name(::std::string* mapping_name) {
  if (mapping_name != NULL) {
    set_has_mapping_name();
  } else {
    clear_has_mapping_name();
  }
  mapping_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapping_name);
  // @@protoc_insertion_point(field_set_allocated:pb.DataType.mapping_name)
}

// optional string encoding_name = 4;
inline bool DataType::has_encoding_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataType::set_has_encoding_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataType::clear_has_encoding_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataType::clear_encoding_name() {
  encoding_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encoding_name();
}
inline const ::std::string& DataType::encoding_name() const {
  // @@protoc_insertion_point(field_get:pb.DataType.encoding_name)
  return encoding_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataType::set_encoding_name(const ::std::string& value) {
  set_has_encoding_name();
  encoding_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DataType.encoding_name)
}
inline void DataType::set_encoding_name(const char* value) {
  set_has_encoding_name();
  encoding_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DataType.encoding_name)
}
inline void DataType::set_encoding_name(const char* value, size_t size) {
  set_has_encoding_name();
  encoding_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DataType.encoding_name)
}
inline ::std::string* DataType::mutable_encoding_name() {
  set_has_encoding_name();
  // @@protoc_insertion_point(field_mutable:pb.DataType.encoding_name)
  return encoding_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataType::release_encoding_name() {
  // @@protoc_insertion_point(field_release:pb.DataType.encoding_name)
  clear_has_encoding_name();
  return encoding_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataType::set_allocated_encoding_name(::std::string* encoding_name) {
  if (encoding_name != NULL) {
    set_has_encoding_name();
  } else {
    clear_has_encoding_name();
  }
  encoding_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoding_name);
  // @@protoc_insertion_point(field_set_allocated:pb.DataType.encoding_name)
}

// optional .pb.__unique_ptr_DataType key_type = 5;
inline bool DataType::has_key_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataType::set_has_key_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataType::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataType::clear_key_type() {
  if (key_type_ != NULL) key_type_->::pb::__unique_ptr_DataType::Clear();
  clear_has_key_type();
}
inline const ::pb::__unique_ptr_DataType& DataType::key_type() const {
  // @@protoc_insertion_point(field_get:pb.DataType.key_type)
  return key_type_ != NULL ? *key_type_ : *default_instance_->key_type_;
}
inline ::pb::__unique_ptr_DataType* DataType::mutable_key_type() {
  set_has_key_type();
  if (key_type_ == NULL) {
    key_type_ = new ::pb::__unique_ptr_DataType;
  }
  // @@protoc_insertion_point(field_mutable:pb.DataType.key_type)
  return key_type_;
}
inline ::pb::__unique_ptr_DataType* DataType::release_key_type() {
  // @@protoc_insertion_point(field_release:pb.DataType.key_type)
  clear_has_key_type();
  ::pb::__unique_ptr_DataType* temp = key_type_;
  key_type_ = NULL;
  return temp;
}
inline void DataType::set_allocated_key_type(::pb::__unique_ptr_DataType* key_type) {
  delete key_type_;
  key_type_ = key_type;
  if (key_type) {
    set_has_key_type();
  } else {
    clear_has_key_type();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.DataType.key_type)
}

// optional .pb.__unique_ptr_DataType param_type = 6;
inline bool DataType::has_param_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataType::set_has_param_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataType::clear_has_param_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataType::clear_param_type() {
  if (param_type_ != NULL) param_type_->::pb::__unique_ptr_DataType::Clear();
  clear_has_param_type();
}
inline const ::pb::__unique_ptr_DataType& DataType::param_type() const {
  // @@protoc_insertion_point(field_get:pb.DataType.param_type)
  return param_type_ != NULL ? *param_type_ : *default_instance_->param_type_;
}
inline ::pb::__unique_ptr_DataType* DataType::mutable_param_type() {
  set_has_param_type();
  if (param_type_ == NULL) {
    param_type_ = new ::pb::__unique_ptr_DataType;
  }
  // @@protoc_insertion_point(field_mutable:pb.DataType.param_type)
  return param_type_;
}
inline ::pb::__unique_ptr_DataType* DataType::release_param_type() {
  // @@protoc_insertion_point(field_release:pb.DataType.param_type)
  clear_has_param_type();
  ::pb::__unique_ptr_DataType* temp = param_type_;
  param_type_ = NULL;
  return temp;
}
inline void DataType::set_allocated_param_type(::pb::__unique_ptr_DataType* param_type) {
  delete param_type_;
  param_type_ = param_type;
  if (param_type) {
    set_has_param_type();
  } else {
    clear_has_param_type();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.DataType.param_type)
}

// optional .pb.Limit low_limit = 7;
inline bool DataType::has_low_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataType::set_has_low_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataType::clear_has_low_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataType::clear_low_limit() {
  if (low_limit_ != NULL) low_limit_->::pb::Limit::Clear();
  clear_has_low_limit();
}
inline const ::pb::Limit& DataType::low_limit() const {
  // @@protoc_insertion_point(field_get:pb.DataType.low_limit)
  return low_limit_ != NULL ? *low_limit_ : *default_instance_->low_limit_;
}
inline ::pb::Limit* DataType::mutable_low_limit() {
  set_has_low_limit();
  if (low_limit_ == NULL) {
    low_limit_ = new ::pb::Limit;
  }
  // @@protoc_insertion_point(field_mutable:pb.DataType.low_limit)
  return low_limit_;
}
inline ::pb::Limit* DataType::release_low_limit() {
  // @@protoc_insertion_point(field_release:pb.DataType.low_limit)
  clear_has_low_limit();
  ::pb::Limit* temp = low_limit_;
  low_limit_ = NULL;
  return temp;
}
inline void DataType::set_allocated_low_limit(::pb::Limit* low_limit) {
  delete low_limit_;
  low_limit_ = low_limit;
  if (low_limit) {
    set_has_low_limit();
  } else {
    clear_has_low_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.DataType.low_limit)
}

// optional .pb.Limit high_limit = 8;
inline bool DataType::has_high_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataType::set_has_high_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataType::clear_has_high_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataType::clear_high_limit() {
  if (high_limit_ != NULL) high_limit_->::pb::Limit::Clear();
  clear_has_high_limit();
}
inline const ::pb::Limit& DataType::high_limit() const {
  // @@protoc_insertion_point(field_get:pb.DataType.high_limit)
  return high_limit_ != NULL ? *high_limit_ : *default_instance_->high_limit_;
}
inline ::pb::Limit* DataType::mutable_high_limit() {
  set_has_high_limit();
  if (high_limit_ == NULL) {
    high_limit_ = new ::pb::Limit;
  }
  // @@protoc_insertion_point(field_mutable:pb.DataType.high_limit)
  return high_limit_;
}
inline ::pb::Limit* DataType::release_high_limit() {
  // @@protoc_insertion_point(field_release:pb.DataType.high_limit)
  clear_has_high_limit();
  ::pb::Limit* temp = high_limit_;
  high_limit_ = NULL;
  return temp;
}
inline void DataType::set_allocated_high_limit(::pb::Limit* high_limit) {
  delete high_limit_;
  high_limit_ = high_limit;
  if (high_limit) {
    set_has_high_limit();
  } else {
    clear_has_high_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.DataType.high_limit)
}

// optional double fixed_precision = 9;
inline bool DataType::has_fixed_precision() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataType::set_has_fixed_precision() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataType::clear_has_fixed_precision() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataType::clear_fixed_precision() {
  fixed_precision_ = 0;
  clear_has_fixed_precision();
}
inline double DataType::fixed_precision() const {
  // @@protoc_insertion_point(field_get:pb.DataType.fixed_precision)
  return fixed_precision_;
}
inline void DataType::set_fixed_precision(double value) {
  set_has_fixed_precision();
  fixed_precision_ = value;
  // @@protoc_insertion_point(field_set:pb.DataType.fixed_precision)
}

// optional uint32 floating_significand_bits = 10;
inline bool DataType::has_floating_significand_bits() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataType::set_has_floating_significand_bits() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataType::clear_has_floating_significand_bits() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataType::clear_floating_significand_bits() {
  floating_significand_bits_ = 0u;
  clear_has_floating_significand_bits();
}
inline ::google::protobuf::uint32 DataType::floating_significand_bits() const {
  // @@protoc_insertion_point(field_get:pb.DataType.floating_significand_bits)
  return floating_significand_bits_;
}
inline void DataType::set_floating_significand_bits(::google::protobuf::uint32 value) {
  set_has_floating_significand_bits();
  floating_significand_bits_ = value;
  // @@protoc_insertion_point(field_set:pb.DataType.floating_significand_bits)
}

// optional uint32 floating_exponent_bits = 11;
inline bool DataType::has_floating_exponent_bits() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DataType::set_has_floating_exponent_bits() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DataType::clear_has_floating_exponent_bits() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DataType::clear_floating_exponent_bits() {
  floating_exponent_bits_ = 0u;
  clear_has_floating_exponent_bits();
}
inline ::google::protobuf::uint32 DataType::floating_exponent_bits() const {
  // @@protoc_insertion_point(field_get:pb.DataType.floating_exponent_bits)
  return floating_exponent_bits_;
}
inline void DataType::set_floating_exponent_bits(::google::protobuf::uint32 value) {
  set_has_floating_exponent_bits();
  floating_exponent_bits_ = value;
  // @@protoc_insertion_point(field_set:pb.DataType.floating_exponent_bits)
}

// optional .pb.CharacterSet character_set = 12;
inline bool DataType::has_character_set() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DataType::set_has_character_set() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DataType::clear_has_character_set() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DataType::clear_character_set() {
  if (character_set_ != NULL) character_set_->::pb::CharacterSet::Clear();
  clear_has_character_set();
}
inline const ::pb::CharacterSet& DataType::character_set() const {
  // @@protoc_insertion_point(field_get:pb.DataType.character_set)
  return character_set_ != NULL ? *character_set_ : *default_instance_->character_set_;
}
inline ::pb::CharacterSet* DataType::mutable_character_set() {
  set_has_character_set();
  if (character_set_ == NULL) {
    character_set_ = new ::pb::CharacterSet;
  }
  // @@protoc_insertion_point(field_mutable:pb.DataType.character_set)
  return character_set_;
}
inline ::pb::CharacterSet* DataType::release_character_set() {
  // @@protoc_insertion_point(field_release:pb.DataType.character_set)
  clear_has_character_set();
  ::pb::CharacterSet* temp = character_set_;
  character_set_ = NULL;
  return temp;
}
inline void DataType::set_allocated_character_set(::pb::CharacterSet* character_set) {
  delete character_set_;
  character_set_ = character_set;
  if (character_set) {
    set_has_character_set();
  } else {
    clear_has_character_set();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.DataType.character_set)
}

// optional uint32 string_min_size = 13;
inline bool DataType::has_string_min_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DataType::set_has_string_min_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DataType::clear_has_string_min_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DataType::clear_string_min_size() {
  string_min_size_ = 0u;
  clear_has_string_min_size();
}
inline ::google::protobuf::uint32 DataType::string_min_size() const {
  // @@protoc_insertion_point(field_get:pb.DataType.string_min_size)
  return string_min_size_;
}
inline void DataType::set_string_min_size(::google::protobuf::uint32 value) {
  set_has_string_min_size();
  string_min_size_ = value;
  // @@protoc_insertion_point(field_set:pb.DataType.string_min_size)
}

// optional uint32 string_max_size = 14;
inline bool DataType::has_string_max_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DataType::set_has_string_max_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DataType::clear_has_string_max_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DataType::clear_string_max_size() {
  string_max_size_ = 0u;
  clear_has_string_max_size();
}
inline ::google::protobuf::uint32 DataType::string_max_size() const {
  // @@protoc_insertion_point(field_get:pb.DataType.string_max_size)
  return string_max_size_;
}
inline void DataType::set_string_max_size(::google::protobuf::uint32 value) {
  set_has_string_max_size();
  string_max_size_ = value;
  // @@protoc_insertion_point(field_set:pb.DataType.string_max_size)
}

// repeated .pb.map_string_Variant encoding_attrs = 15;
inline int DataType::encoding_attrs_size() const {
  return encoding_attrs_.size();
}
inline void DataType::clear_encoding_attrs() {
  encoding_attrs_.Clear();
}
inline const ::pb::map_string_Variant& DataType::encoding_attrs(int index) const {
  // @@protoc_insertion_point(field_get:pb.DataType.encoding_attrs)
  return encoding_attrs_.Get(index);
}
inline ::pb::map_string_Variant* DataType::mutable_encoding_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DataType.encoding_attrs)
  return encoding_attrs_.Mutable(index);
}
inline ::pb::map_string_Variant* DataType::add_encoding_attrs() {
  // @@protoc_insertion_point(field_add:pb.DataType.encoding_attrs)
  return encoding_attrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >*
DataType::mutable_encoding_attrs() {
  // @@protoc_insertion_point(field_mutable_list:pb.DataType.encoding_attrs)
  return &encoding_attrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >&
DataType::encoding_attrs() const {
  // @@protoc_insertion_point(field_list:pb.DataType.encoding_attrs)
  return encoding_attrs_;
}

// repeated .pb.map_string_Variant mapping_attrs = 16;
inline int DataType::mapping_attrs_size() const {
  return mapping_attrs_.size();
}
inline void DataType::clear_mapping_attrs() {
  mapping_attrs_.Clear();
}
inline const ::pb::map_string_Variant& DataType::mapping_attrs(int index) const {
  // @@protoc_insertion_point(field_get:pb.DataType.mapping_attrs)
  return mapping_attrs_.Get(index);
}
inline ::pb::map_string_Variant* DataType::mutable_mapping_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DataType.mapping_attrs)
  return mapping_attrs_.Mutable(index);
}
inline ::pb::map_string_Variant* DataType::add_mapping_attrs() {
  // @@protoc_insertion_point(field_add:pb.DataType.mapping_attrs)
  return mapping_attrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >*
DataType::mutable_mapping_attrs() {
  // @@protoc_insertion_point(field_mutable_list:pb.DataType.mapping_attrs)
  return &mapping_attrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >&
DataType::mapping_attrs() const {
  // @@protoc_insertion_point(field_list:pb.DataType.mapping_attrs)
  return mapping_attrs_;
}

// repeated .pb.map_string_uint32 enum_values = 17;
inline int DataType::enum_values_size() const {
  return enum_values_.size();
}
inline void DataType::clear_enum_values() {
  enum_values_.Clear();
}
inline const ::pb::map_string_uint32& DataType::enum_values(int index) const {
  // @@protoc_insertion_point(field_get:pb.DataType.enum_values)
  return enum_values_.Get(index);
}
inline ::pb::map_string_uint32* DataType::mutable_enum_values(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DataType.enum_values)
  return enum_values_.Mutable(index);
}
inline ::pb::map_string_uint32* DataType::add_enum_values() {
  // @@protoc_insertion_point(field_add:pb.DataType.enum_values)
  return enum_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::map_string_uint32 >*
DataType::mutable_enum_values() {
  // @@protoc_insertion_point(field_mutable_list:pb.DataType.enum_values)
  return &enum_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::map_string_uint32 >&
DataType::enum_values() const {
  // @@protoc_insertion_point(field_list:pb.DataType.enum_values)
  return enum_values_;
}

// -------------------------------------------------------------------

// EncodingSpecifics

// optional string name = 1;
inline bool EncodingSpecifics::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncodingSpecifics::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncodingSpecifics::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncodingSpecifics::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& EncodingSpecifics::name() const {
  // @@protoc_insertion_point(field_get:pb.EncodingSpecifics.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncodingSpecifics::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.EncodingSpecifics.name)
}
inline void EncodingSpecifics::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.EncodingSpecifics.name)
}
inline void EncodingSpecifics::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.EncodingSpecifics.name)
}
inline ::std::string* EncodingSpecifics::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pb.EncodingSpecifics.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncodingSpecifics::release_name() {
  // @@protoc_insertion_point(field_release:pb.EncodingSpecifics.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncodingSpecifics::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.EncodingSpecifics.name)
}

// repeated .pb.map_string_Variant attrs = 2;
inline int EncodingSpecifics::attrs_size() const {
  return attrs_.size();
}
inline void EncodingSpecifics::clear_attrs() {
  attrs_.Clear();
}
inline const ::pb::map_string_Variant& EncodingSpecifics::attrs(int index) const {
  // @@protoc_insertion_point(field_get:pb.EncodingSpecifics.attrs)
  return attrs_.Get(index);
}
inline ::pb::map_string_Variant* EncodingSpecifics::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.EncodingSpecifics.attrs)
  return attrs_.Mutable(index);
}
inline ::pb::map_string_Variant* EncodingSpecifics::add_attrs() {
  // @@protoc_insertion_point(field_add:pb.EncodingSpecifics.attrs)
  return attrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >*
EncodingSpecifics::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:pb.EncodingSpecifics.attrs)
  return &attrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::map_string_Variant >&
EncodingSpecifics::attrs() const {
  // @@protoc_insertion_point(field_list:pb.EncodingSpecifics.attrs)
  return attrs_;
}

// -------------------------------------------------------------------

// EncodedOrMember

// optional .pb.Location location = 1;
inline bool EncodedOrMember::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncodedOrMember::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncodedOrMember::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncodedOrMember::clear_location() {
  if (location_ != NULL) location_->::pb::Location::Clear();
  clear_has_location();
}
inline const ::pb::Location& EncodedOrMember::location() const {
  // @@protoc_insertion_point(field_get:pb.EncodedOrMember.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::pb::Location* EncodedOrMember::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::pb::Location;
  }
  // @@protoc_insertion_point(field_mutable:pb.EncodedOrMember.location)
  return location_;
}
inline ::pb::Location* EncodedOrMember::release_location() {
  // @@protoc_insertion_point(field_release:pb.EncodedOrMember.location)
  clear_has_location();
  ::pb::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void EncodedOrMember::set_allocated_location(::pb::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.EncodedOrMember.location)
}

// -------------------------------------------------------------------

// DataMember

// optional .pb.DataType type = 1;
inline bool DataMember::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataMember::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataMember::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataMember::clear_type() {
  if (type_ != NULL) type_->::pb::DataType::Clear();
  clear_has_type();
}
inline const ::pb::DataType& DataMember::type() const {
  // @@protoc_insertion_point(field_get:pb.DataMember.type)
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::pb::DataType* DataMember::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    type_ = new ::pb::DataType;
  }
  // @@protoc_insertion_point(field_mutable:pb.DataMember.type)
  return type_;
}
inline ::pb::DataType* DataMember::release_type() {
  // @@protoc_insertion_point(field_release:pb.DataMember.type)
  clear_has_type();
  ::pb::DataType* temp = type_;
  type_ = NULL;
  return temp;
}
inline void DataMember::set_allocated_type(::pb::DataType* type) {
  delete type_;
  type_ = type;
  if (type) {
    set_has_type();
  } else {
    clear_has_type();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.DataMember.type)
}

// optional string name = 2;
inline bool DataMember::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataMember::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DataMember::name() const {
  // @@protoc_insertion_point(field_get:pb.DataMember.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.DataMember.name)
}
inline void DataMember::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.DataMember.name)
}
inline void DataMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.DataMember.name)
}
inline ::std::string* DataMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pb.DataMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataMember::release_name() {
  // @@protoc_insertion_point(field_release:pb.DataMember.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.DataMember.name)
}

// optional bool extend_to = 3;
inline bool DataMember::has_extend_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataMember::set_has_extend_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataMember::clear_has_extend_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataMember::clear_extend_to() {
  extend_to_ = false;
  clear_has_extend_to();
}
inline bool DataMember::extend_to() const {
  // @@protoc_insertion_point(field_get:pb.DataMember.extend_to)
  return extend_to_;
}
inline void DataMember::set_extend_to(bool value) {
  set_has_extend_to();
  extend_to_ = value;
  // @@protoc_insertion_point(field_set:pb.DataMember.extend_to)
}

// optional .pb.Variant default_value = 4;
inline bool DataMember::has_default_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataMember::set_has_default_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataMember::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataMember::clear_default_value() {
  if (default_value_ != NULL) default_value_->::pb::Variant::Clear();
  clear_has_default_value();
}
inline const ::pb::Variant& DataMember::default_value() const {
  // @@protoc_insertion_point(field_get:pb.DataMember.default_value)
  return default_value_ != NULL ? *default_value_ : *default_instance_->default_value_;
}
inline ::pb::Variant* DataMember::mutable_default_value() {
  set_has_default_value();
  if (default_value_ == NULL) {
    default_value_ = new ::pb::Variant;
  }
  // @@protoc_insertion_point(field_mutable:pb.DataMember.default_value)
  return default_value_;
}
inline ::pb::Variant* DataMember::release_default_value() {
  // @@protoc_insertion_point(field_release:pb.DataMember.default_value)
  clear_has_default_value();
  ::pb::Variant* temp = default_value_;
  default_value_ = NULL;
  return temp;
}
inline void DataMember::set_allocated_default_value(::pb::Variant* default_value) {
  delete default_value_;
  default_value_ = default_value;
  if (default_value) {
    set_has_default_value();
  } else {
    clear_has_default_value();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.DataMember.default_value)
}

// repeated string when_discriminant = 5;
inline int DataMember::when_discriminant_size() const {
  return when_discriminant_.size();
}
inline void DataMember::clear_when_discriminant() {
  when_discriminant_.Clear();
}
inline const ::std::string& DataMember::when_discriminant(int index) const {
  // @@protoc_insertion_point(field_get:pb.DataMember.when_discriminant)
  return when_discriminant_.Get(index);
}
inline ::std::string* DataMember::mutable_when_discriminant(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DataMember.when_discriminant)
  return when_discriminant_.Mutable(index);
}
inline void DataMember::set_when_discriminant(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.DataMember.when_discriminant)
  when_discriminant_.Mutable(index)->assign(value);
}
inline void DataMember::set_when_discriminant(int index, const char* value) {
  when_discriminant_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.DataMember.when_discriminant)
}
inline void DataMember::set_when_discriminant(int index, const char* value, size_t size) {
  when_discriminant_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.DataMember.when_discriminant)
}
inline ::std::string* DataMember::add_when_discriminant() {
  // @@protoc_insertion_point(field_add_mutable:pb.DataMember.when_discriminant)
  return when_discriminant_.Add();
}
inline void DataMember::add_when_discriminant(const ::std::string& value) {
  when_discriminant_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.DataMember.when_discriminant)
}
inline void DataMember::add_when_discriminant(const char* value) {
  when_discriminant_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.DataMember.when_discriminant)
}
inline void DataMember::add_when_discriminant(const char* value, size_t size) {
  when_discriminant_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.DataMember.when_discriminant)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataMember::when_discriminant() const {
  // @@protoc_insertion_point(field_list:pb.DataMember.when_discriminant)
  return when_discriminant_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataMember::mutable_when_discriminant() {
  // @@protoc_insertion_point(field_mutable_list:pb.DataMember.when_discriminant)
  return &when_discriminant_;
}

// optional .pb.EncodedOrMember __parent = 6;
inline bool DataMember::has___parent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataMember::set_has___parent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataMember::clear_has___parent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataMember::clear___parent() {
  if (__parent_ != NULL) __parent_->::pb::EncodedOrMember::Clear();
  clear_has___parent();
}
inline const ::pb::EncodedOrMember& DataMember::__parent() const {
  // @@protoc_insertion_point(field_get:pb.DataMember.__parent)
  return __parent_ != NULL ? *__parent_ : *default_instance_->__parent_;
}
inline ::pb::EncodedOrMember* DataMember::mutable___parent() {
  set_has___parent();
  if (__parent_ == NULL) {
    __parent_ = new ::pb::EncodedOrMember;
  }
  // @@protoc_insertion_point(field_mutable:pb.DataMember.__parent)
  return __parent_;
}
inline ::pb::EncodedOrMember* DataMember::release___parent() {
  // @@protoc_insertion_point(field_release:pb.DataMember.__parent)
  clear_has___parent();
  ::pb::EncodedOrMember* temp = __parent_;
  __parent_ = NULL;
  return temp;
}
inline void DataMember::set_allocated___parent(::pb::EncodedOrMember* __parent) {
  delete __parent_;
  __parent_ = __parent;
  if (__parent) {
    set_has___parent();
  } else {
    clear_has___parent();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.DataMember.__parent)
}

// -------------------------------------------------------------------

// EncodedMembers

// optional .pb.EncodingSpecifics encoding_specifics = 1;
inline bool EncodedMembers::has_encoding_specifics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncodedMembers::set_has_encoding_specifics() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncodedMembers::clear_has_encoding_specifics() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncodedMembers::clear_encoding_specifics() {
  if (encoding_specifics_ != NULL) encoding_specifics_->::pb::EncodingSpecifics::Clear();
  clear_has_encoding_specifics();
}
inline const ::pb::EncodingSpecifics& EncodedMembers::encoding_specifics() const {
  // @@protoc_insertion_point(field_get:pb.EncodedMembers.encoding_specifics)
  return encoding_specifics_ != NULL ? *encoding_specifics_ : *default_instance_->encoding_specifics_;
}
inline ::pb::EncodingSpecifics* EncodedMembers::mutable_encoding_specifics() {
  set_has_encoding_specifics();
  if (encoding_specifics_ == NULL) {
    encoding_specifics_ = new ::pb::EncodingSpecifics;
  }
  // @@protoc_insertion_point(field_mutable:pb.EncodedMembers.encoding_specifics)
  return encoding_specifics_;
}
inline ::pb::EncodingSpecifics* EncodedMembers::release_encoding_specifics() {
  // @@protoc_insertion_point(field_release:pb.EncodedMembers.encoding_specifics)
  clear_has_encoding_specifics();
  ::pb::EncodingSpecifics* temp = encoding_specifics_;
  encoding_specifics_ = NULL;
  return temp;
}
inline void EncodedMembers::set_allocated_encoding_specifics(::pb::EncodingSpecifics* encoding_specifics) {
  delete encoding_specifics_;
  encoding_specifics_ = encoding_specifics;
  if (encoding_specifics) {
    set_has_encoding_specifics();
  } else {
    clear_has_encoding_specifics();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.EncodedMembers.encoding_specifics)
}

// repeated .pb.__unique_ptr_EncodedOrMember members = 2;
inline int EncodedMembers::members_size() const {
  return members_.size();
}
inline void EncodedMembers::clear_members() {
  members_.Clear();
}
inline const ::pb::__unique_ptr_EncodedOrMember& EncodedMembers::members(int index) const {
  // @@protoc_insertion_point(field_get:pb.EncodedMembers.members)
  return members_.Get(index);
}
inline ::pb::__unique_ptr_EncodedOrMember* EncodedMembers::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:pb.EncodedMembers.members)
  return members_.Mutable(index);
}
inline ::pb::__unique_ptr_EncodedOrMember* EncodedMembers::add_members() {
  // @@protoc_insertion_point(field_add:pb.EncodedMembers.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_EncodedOrMember >*
EncodedMembers::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:pb.EncodedMembers.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_EncodedOrMember >&
EncodedMembers::members() const {
  // @@protoc_insertion_point(field_list:pb.EncodedMembers.members)
  return members_;
}

// optional .pb.EncodedOrMember __parent = 3;
inline bool EncodedMembers::has___parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EncodedMembers::set_has___parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EncodedMembers::clear_has___parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EncodedMembers::clear___parent() {
  if (__parent_ != NULL) __parent_->::pb::EncodedOrMember::Clear();
  clear_has___parent();
}
inline const ::pb::EncodedOrMember& EncodedMembers::__parent() const {
  // @@protoc_insertion_point(field_get:pb.EncodedMembers.__parent)
  return __parent_ != NULL ? *__parent_ : *default_instance_->__parent_;
}
inline ::pb::EncodedOrMember* EncodedMembers::mutable___parent() {
  set_has___parent();
  if (__parent_ == NULL) {
    __parent_ = new ::pb::EncodedOrMember;
  }
  // @@protoc_insertion_point(field_mutable:pb.EncodedMembers.__parent)
  return __parent_;
}
inline ::pb::EncodedOrMember* EncodedMembers::release___parent() {
  // @@protoc_insertion_point(field_release:pb.EncodedMembers.__parent)
  clear_has___parent();
  ::pb::EncodedOrMember* temp = __parent_;
  __parent_ = NULL;
  return temp;
}
inline void EncodedMembers::set_allocated___parent(::pb::EncodedOrMember* __parent) {
  delete __parent_;
  __parent_ = __parent;
  if (__parent) {
    set_has___parent();
  } else {
    clear_has___parent();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.EncodedMembers.__parent)
}

// -------------------------------------------------------------------

// Structure

// optional uint32 decl_type = 1;
inline bool Structure::has_decl_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Structure::set_has_decl_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Structure::clear_has_decl_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Structure::clear_decl_type() {
  decl_type_ = 0u;
  clear_has_decl_type();
}
inline ::google::protobuf::uint32 Structure::decl_type() const {
  // @@protoc_insertion_point(field_get:pb.Structure.decl_type)
  return decl_type_;
}
inline void Structure::set_decl_type(::google::protobuf::uint32 value) {
  set_has_decl_type();
  decl_type_ = value;
  // @@protoc_insertion_point(field_set:pb.Structure.decl_type)
}

// optional uint32 type = 2;
inline bool Structure::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Structure::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Structure::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Structure::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Structure::type() const {
  // @@protoc_insertion_point(field_get:pb.Structure.type)
  return type_;
}
inline void Structure::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.Structure.type)
}

// optional string name = 3;
inline bool Structure::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Structure::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Structure::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Structure::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Structure::name() const {
  // @@protoc_insertion_point(field_get:pb.Structure.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Structure::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Structure.name)
}
inline void Structure::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Structure.name)
}
inline void Structure::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Structure.name)
}
inline ::std::string* Structure::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pb.Structure.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Structure::release_name() {
  // @@protoc_insertion_point(field_release:pb.Structure.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Structure::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.Structure.name)
}

// optional string discriminant = 4;
inline bool Structure::has_discriminant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Structure::set_has_discriminant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Structure::clear_has_discriminant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Structure::clear_discriminant() {
  discriminant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_discriminant();
}
inline const ::std::string& Structure::discriminant() const {
  // @@protoc_insertion_point(field_get:pb.Structure.discriminant)
  return discriminant_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Structure::set_discriminant(const ::std::string& value) {
  set_has_discriminant();
  discriminant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Structure.discriminant)
}
inline void Structure::set_discriminant(const char* value) {
  set_has_discriminant();
  discriminant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Structure.discriminant)
}
inline void Structure::set_discriminant(const char* value, size_t size) {
  set_has_discriminant();
  discriminant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Structure.discriminant)
}
inline ::std::string* Structure::mutable_discriminant() {
  set_has_discriminant();
  // @@protoc_insertion_point(field_mutable:pb.Structure.discriminant)
  return discriminant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Structure::release_discriminant() {
  // @@protoc_insertion_point(field_release:pb.Structure.discriminant)
  clear_has_discriminant();
  return discriminant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Structure::set_allocated_discriminant(::std::string* discriminant) {
  if (discriminant != NULL) {
    set_has_discriminant();
  } else {
    clear_has_discriminant();
  }
  discriminant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), discriminant);
  // @@protoc_insertion_point(field_set_allocated:pb.Structure.discriminant)
}

// optional string inherited_from = 5;
inline bool Structure::has_inherited_from() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Structure::set_has_inherited_from() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Structure::clear_has_inherited_from() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Structure::clear_inherited_from() {
  inherited_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inherited_from();
}
inline const ::std::string& Structure::inherited_from() const {
  // @@protoc_insertion_point(field_get:pb.Structure.inherited_from)
  return inherited_from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Structure::set_inherited_from(const ::std::string& value) {
  set_has_inherited_from();
  inherited_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Structure.inherited_from)
}
inline void Structure::set_inherited_from(const char* value) {
  set_has_inherited_from();
  inherited_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Structure.inherited_from)
}
inline void Structure::set_inherited_from(const char* value, size_t size) {
  set_has_inherited_from();
  inherited_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Structure.inherited_from)
}
inline ::std::string* Structure::mutable_inherited_from() {
  set_has_inherited_from();
  // @@protoc_insertion_point(field_mutable:pb.Structure.inherited_from)
  return inherited_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Structure::release_inherited_from() {
  // @@protoc_insertion_point(field_release:pb.Structure.inherited_from)
  clear_has_inherited_from();
  return inherited_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Structure::set_allocated_inherited_from(::std::string* inherited_from) {
  if (inherited_from != NULL) {
    set_has_inherited_from();
  } else {
    clear_has_inherited_from();
  }
  inherited_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inherited_from);
  // @@protoc_insertion_point(field_set_allocated:pb.Structure.inherited_from)
}

// optional .pb.EncodedMembers __parent = 6;
inline bool Structure::has___parent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Structure::set_has___parent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Structure::clear_has___parent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Structure::clear___parent() {
  if (__parent_ != NULL) __parent_->::pb::EncodedMembers::Clear();
  clear_has___parent();
}
inline const ::pb::EncodedMembers& Structure::__parent() const {
  // @@protoc_insertion_point(field_get:pb.Structure.__parent)
  return __parent_ != NULL ? *__parent_ : *default_instance_->__parent_;
}
inline ::pb::EncodedMembers* Structure::mutable___parent() {
  set_has___parent();
  if (__parent_ == NULL) {
    __parent_ = new ::pb::EncodedMembers;
  }
  // @@protoc_insertion_point(field_mutable:pb.Structure.__parent)
  return __parent_;
}
inline ::pb::EncodedMembers* Structure::release___parent() {
  // @@protoc_insertion_point(field_release:pb.Structure.__parent)
  clear_has___parent();
  ::pb::EncodedMembers* temp = __parent_;
  __parent_ = NULL;
  return temp;
}
inline void Structure::set_allocated___parent(::pb::EncodedMembers* __parent) {
  delete __parent_;
  __parent_ = __parent;
  if (__parent) {
    set_has___parent();
  } else {
    clear_has___parent();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Structure.__parent)
}

// -------------------------------------------------------------------

// Typedef

// optional .pb.Location location = 1;
inline bool Typedef::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Typedef::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Typedef::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Typedef::clear_location() {
  if (location_ != NULL) location_->::pb::Location::Clear();
  clear_has_location();
}
inline const ::pb::Location& Typedef::location() const {
  // @@protoc_insertion_point(field_get:pb.Typedef.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::pb::Location* Typedef::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::pb::Location;
  }
  // @@protoc_insertion_point(field_mutable:pb.Typedef.location)
  return location_;
}
inline ::pb::Location* Typedef::release_location() {
  // @@protoc_insertion_point(field_release:pb.Typedef.location)
  clear_has_location();
  ::pb::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Typedef::set_allocated_location(::pb::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Typedef.location)
}

// optional .pb.DataType type = 2;
inline bool Typedef::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Typedef::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Typedef::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Typedef::clear_type() {
  if (type_ != NULL) type_->::pb::DataType::Clear();
  clear_has_type();
}
inline const ::pb::DataType& Typedef::type() const {
  // @@protoc_insertion_point(field_get:pb.Typedef.type)
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::pb::DataType* Typedef::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    type_ = new ::pb::DataType;
  }
  // @@protoc_insertion_point(field_mutable:pb.Typedef.type)
  return type_;
}
inline ::pb::DataType* Typedef::release_type() {
  // @@protoc_insertion_point(field_release:pb.Typedef.type)
  clear_has_type();
  ::pb::DataType* temp = type_;
  type_ = NULL;
  return temp;
}
inline void Typedef::set_allocated_type(::pb::DataType* type) {
  delete type_;
  type_ = type;
  if (type) {
    set_has_type();
  } else {
    clear_has_type();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Typedef.type)
}

// optional string name = 3;
inline bool Typedef::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Typedef::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Typedef::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Typedef::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Typedef::name() const {
  // @@protoc_insertion_point(field_get:pb.Typedef.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Typedef::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Typedef.name)
}
inline void Typedef::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Typedef.name)
}
inline void Typedef::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Typedef.name)
}
inline ::std::string* Typedef::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pb.Typedef.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Typedef::release_name() {
  // @@protoc_insertion_point(field_release:pb.Typedef.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Typedef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.Typedef.name)
}

// -------------------------------------------------------------------

// Root

// repeated .pb.Typedef typedefs = 1;
inline int Root::typedefs_size() const {
  return typedefs_.size();
}
inline void Root::clear_typedefs() {
  typedefs_.Clear();
}
inline const ::pb::Typedef& Root::typedefs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Root.typedefs)
  return typedefs_.Get(index);
}
inline ::pb::Typedef* Root::mutable_typedefs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Root.typedefs)
  return typedefs_.Mutable(index);
}
inline ::pb::Typedef* Root::add_typedefs() {
  // @@protoc_insertion_point(field_add:pb.Root.typedefs)
  return typedefs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Typedef >*
Root::mutable_typedefs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Root.typedefs)
  return &typedefs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Typedef >&
Root::typedefs() const {
  // @@protoc_insertion_point(field_list:pb.Root.typedefs)
  return typedefs_;
}

// repeated .pb.__unique_ptr_Structure structures = 2;
inline int Root::structures_size() const {
  return structures_.size();
}
inline void Root::clear_structures() {
  structures_.Clear();
}
inline const ::pb::__unique_ptr_Structure& Root::structures(int index) const {
  // @@protoc_insertion_point(field_get:pb.Root.structures)
  return structures_.Get(index);
}
inline ::pb::__unique_ptr_Structure* Root::mutable_structures(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Root.structures)
  return structures_.Mutable(index);
}
inline ::pb::__unique_ptr_Structure* Root::add_structures() {
  // @@protoc_insertion_point(field_add:pb.Root.structures)
  return structures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_Structure >*
Root::mutable_structures() {
  // @@protoc_insertion_point(field_mutable_list:pb.Root.structures)
  return &structures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::__unique_ptr_Structure >&
Root::structures() const {
  // @@protoc_insertion_point(field_list:pb.Root.structures)
  return structures_;
}

// -------------------------------------------------------------------

// __unique_ptr_DataType

// optional .pb.DataType du_data_type = 1;
inline bool __unique_ptr_DataType::has_du_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void __unique_ptr_DataType::set_has_du_data_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void __unique_ptr_DataType::clear_has_du_data_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void __unique_ptr_DataType::clear_du_data_type() {
  if (du_data_type_ != NULL) du_data_type_->::pb::DataType::Clear();
  clear_has_du_data_type();
}
inline const ::pb::DataType& __unique_ptr_DataType::du_data_type() const {
  // @@protoc_insertion_point(field_get:pb.__unique_ptr_DataType.du_data_type)
  return du_data_type_ != NULL ? *du_data_type_ : *default_instance_->du_data_type_;
}
inline ::pb::DataType* __unique_ptr_DataType::mutable_du_data_type() {
  set_has_du_data_type();
  if (du_data_type_ == NULL) {
    du_data_type_ = new ::pb::DataType;
  }
  // @@protoc_insertion_point(field_mutable:pb.__unique_ptr_DataType.du_data_type)
  return du_data_type_;
}
inline ::pb::DataType* __unique_ptr_DataType::release_du_data_type() {
  // @@protoc_insertion_point(field_release:pb.__unique_ptr_DataType.du_data_type)
  clear_has_du_data_type();
  ::pb::DataType* temp = du_data_type_;
  du_data_type_ = NULL;
  return temp;
}
inline void __unique_ptr_DataType::set_allocated_du_data_type(::pb::DataType* du_data_type) {
  delete du_data_type_;
  du_data_type_ = du_data_type;
  if (du_data_type) {
    set_has_du_data_type();
  } else {
    clear_has_du_data_type();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.__unique_ptr_DataType.du_data_type)
}

// -------------------------------------------------------------------

// __unique_ptr_EncodedOrMember

// optional .pb.DataMember du_data_member = 1;
inline bool __unique_ptr_EncodedOrMember::has_du_data_member() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void __unique_ptr_EncodedOrMember::set_has_du_data_member() {
  _has_bits_[0] |= 0x00000001u;
}
inline void __unique_ptr_EncodedOrMember::clear_has_du_data_member() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void __unique_ptr_EncodedOrMember::clear_du_data_member() {
  if (du_data_member_ != NULL) du_data_member_->::pb::DataMember::Clear();
  clear_has_du_data_member();
}
inline const ::pb::DataMember& __unique_ptr_EncodedOrMember::du_data_member() const {
  // @@protoc_insertion_point(field_get:pb.__unique_ptr_EncodedOrMember.du_data_member)
  return du_data_member_ != NULL ? *du_data_member_ : *default_instance_->du_data_member_;
}
inline ::pb::DataMember* __unique_ptr_EncodedOrMember::mutable_du_data_member() {
  set_has_du_data_member();
  if (du_data_member_ == NULL) {
    du_data_member_ = new ::pb::DataMember;
  }
  // @@protoc_insertion_point(field_mutable:pb.__unique_ptr_EncodedOrMember.du_data_member)
  return du_data_member_;
}
inline ::pb::DataMember* __unique_ptr_EncodedOrMember::release_du_data_member() {
  // @@protoc_insertion_point(field_release:pb.__unique_ptr_EncodedOrMember.du_data_member)
  clear_has_du_data_member();
  ::pb::DataMember* temp = du_data_member_;
  du_data_member_ = NULL;
  return temp;
}
inline void __unique_ptr_EncodedOrMember::set_allocated_du_data_member(::pb::DataMember* du_data_member) {
  delete du_data_member_;
  du_data_member_ = du_data_member;
  if (du_data_member) {
    set_has_du_data_member();
  } else {
    clear_has_du_data_member();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.__unique_ptr_EncodedOrMember.du_data_member)
}

// optional .pb.EncodedMembers du_encoded_members = 2;
inline bool __unique_ptr_EncodedOrMember::has_du_encoded_members() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void __unique_ptr_EncodedOrMember::set_has_du_encoded_members() {
  _has_bits_[0] |= 0x00000002u;
}
inline void __unique_ptr_EncodedOrMember::clear_has_du_encoded_members() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void __unique_ptr_EncodedOrMember::clear_du_encoded_members() {
  if (du_encoded_members_ != NULL) du_encoded_members_->::pb::EncodedMembers::Clear();
  clear_has_du_encoded_members();
}
inline const ::pb::EncodedMembers& __unique_ptr_EncodedOrMember::du_encoded_members() const {
  // @@protoc_insertion_point(field_get:pb.__unique_ptr_EncodedOrMember.du_encoded_members)
  return du_encoded_members_ != NULL ? *du_encoded_members_ : *default_instance_->du_encoded_members_;
}
inline ::pb::EncodedMembers* __unique_ptr_EncodedOrMember::mutable_du_encoded_members() {
  set_has_du_encoded_members();
  if (du_encoded_members_ == NULL) {
    du_encoded_members_ = new ::pb::EncodedMembers;
  }
  // @@protoc_insertion_point(field_mutable:pb.__unique_ptr_EncodedOrMember.du_encoded_members)
  return du_encoded_members_;
}
inline ::pb::EncodedMembers* __unique_ptr_EncodedOrMember::release_du_encoded_members() {
  // @@protoc_insertion_point(field_release:pb.__unique_ptr_EncodedOrMember.du_encoded_members)
  clear_has_du_encoded_members();
  ::pb::EncodedMembers* temp = du_encoded_members_;
  du_encoded_members_ = NULL;
  return temp;
}
inline void __unique_ptr_EncodedOrMember::set_allocated_du_encoded_members(::pb::EncodedMembers* du_encoded_members) {
  delete du_encoded_members_;
  du_encoded_members_ = du_encoded_members;
  if (du_encoded_members) {
    set_has_du_encoded_members();
  } else {
    clear_has_du_encoded_members();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.__unique_ptr_EncodedOrMember.du_encoded_members)
}

// optional .pb.EncodedOrMember du_encoded_or_member = 3;
inline bool __unique_ptr_EncodedOrMember::has_du_encoded_or_member() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void __unique_ptr_EncodedOrMember::set_has_du_encoded_or_member() {
  _has_bits_[0] |= 0x00000004u;
}
inline void __unique_ptr_EncodedOrMember::clear_has_du_encoded_or_member() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void __unique_ptr_EncodedOrMember::clear_du_encoded_or_member() {
  if (du_encoded_or_member_ != NULL) du_encoded_or_member_->::pb::EncodedOrMember::Clear();
  clear_has_du_encoded_or_member();
}
inline const ::pb::EncodedOrMember& __unique_ptr_EncodedOrMember::du_encoded_or_member() const {
  // @@protoc_insertion_point(field_get:pb.__unique_ptr_EncodedOrMember.du_encoded_or_member)
  return du_encoded_or_member_ != NULL ? *du_encoded_or_member_ : *default_instance_->du_encoded_or_member_;
}
inline ::pb::EncodedOrMember* __unique_ptr_EncodedOrMember::mutable_du_encoded_or_member() {
  set_has_du_encoded_or_member();
  if (du_encoded_or_member_ == NULL) {
    du_encoded_or_member_ = new ::pb::EncodedOrMember;
  }
  // @@protoc_insertion_point(field_mutable:pb.__unique_ptr_EncodedOrMember.du_encoded_or_member)
  return du_encoded_or_member_;
}
inline ::pb::EncodedOrMember* __unique_ptr_EncodedOrMember::release_du_encoded_or_member() {
  // @@protoc_insertion_point(field_release:pb.__unique_ptr_EncodedOrMember.du_encoded_or_member)
  clear_has_du_encoded_or_member();
  ::pb::EncodedOrMember* temp = du_encoded_or_member_;
  du_encoded_or_member_ = NULL;
  return temp;
}
inline void __unique_ptr_EncodedOrMember::set_allocated_du_encoded_or_member(::pb::EncodedOrMember* du_encoded_or_member) {
  delete du_encoded_or_member_;
  du_encoded_or_member_ = du_encoded_or_member;
  if (du_encoded_or_member) {
    set_has_du_encoded_or_member();
  } else {
    clear_has_du_encoded_or_member();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.__unique_ptr_EncodedOrMember.du_encoded_or_member)
}

// -------------------------------------------------------------------

// __unique_ptr_Structure

// optional .pb.Structure du_structure = 1;
inline bool __unique_ptr_Structure::has_du_structure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void __unique_ptr_Structure::set_has_du_structure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void __unique_ptr_Structure::clear_has_du_structure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void __unique_ptr_Structure::clear_du_structure() {
  if (du_structure_ != NULL) du_structure_->::pb::Structure::Clear();
  clear_has_du_structure();
}
inline const ::pb::Structure& __unique_ptr_Structure::du_structure() const {
  // @@protoc_insertion_point(field_get:pb.__unique_ptr_Structure.du_structure)
  return du_structure_ != NULL ? *du_structure_ : *default_instance_->du_structure_;
}
inline ::pb::Structure* __unique_ptr_Structure::mutable_du_structure() {
  set_has_du_structure();
  if (du_structure_ == NULL) {
    du_structure_ = new ::pb::Structure;
  }
  // @@protoc_insertion_point(field_mutable:pb.__unique_ptr_Structure.du_structure)
  return du_structure_;
}
inline ::pb::Structure* __unique_ptr_Structure::release_du_structure() {
  // @@protoc_insertion_point(field_release:pb.__unique_ptr_Structure.du_structure)
  clear_has_du_structure();
  ::pb::Structure* temp = du_structure_;
  du_structure_ = NULL;
  return temp;
}
inline void __unique_ptr_Structure::set_allocated_du_structure(::pb::Structure* du_structure) {
  delete du_structure_;
  du_structure_ = du_structure;
  if (du_structure) {
    set_has_du_structure();
  } else {
    clear_has_du_structure();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.__unique_ptr_Structure.du_structure)
}

// -------------------------------------------------------------------

// map_string_Variant

// optional string key = 1;
inline bool map_string_Variant::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void map_string_Variant::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void map_string_Variant::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void map_string_Variant::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& map_string_Variant::key() const {
  // @@protoc_insertion_point(field_get:pb.map_string_Variant.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void map_string_Variant::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.map_string_Variant.key)
}
inline void map_string_Variant::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.map_string_Variant.key)
}
inline void map_string_Variant::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.map_string_Variant.key)
}
inline ::std::string* map_string_Variant::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pb.map_string_Variant.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* map_string_Variant::release_key() {
  // @@protoc_insertion_point(field_release:pb.map_string_Variant.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void map_string_Variant::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.map_string_Variant.key)
}

// optional .pb.Variant value = 2;
inline bool map_string_Variant::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void map_string_Variant::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void map_string_Variant::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void map_string_Variant::clear_value() {
  if (value_ != NULL) value_->::pb::Variant::Clear();
  clear_has_value();
}
inline const ::pb::Variant& map_string_Variant::value() const {
  // @@protoc_insertion_point(field_get:pb.map_string_Variant.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::pb::Variant* map_string_Variant::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::pb::Variant;
  }
  // @@protoc_insertion_point(field_mutable:pb.map_string_Variant.value)
  return value_;
}
inline ::pb::Variant* map_string_Variant::release_value() {
  // @@protoc_insertion_point(field_release:pb.map_string_Variant.value)
  clear_has_value();
  ::pb::Variant* temp = value_;
  value_ = NULL;
  return temp;
}
inline void map_string_Variant::set_allocated_value(::pb::Variant* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.map_string_Variant.value)
}

// -------------------------------------------------------------------

// map_string_uint32

// optional string key = 1;
inline bool map_string_uint32::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void map_string_uint32::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void map_string_uint32::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void map_string_uint32::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& map_string_uint32::key() const {
  // @@protoc_insertion_point(field_get:pb.map_string_uint32.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void map_string_uint32::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.map_string_uint32.key)
}
inline void map_string_uint32::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.map_string_uint32.key)
}
inline void map_string_uint32::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.map_string_uint32.key)
}
inline ::std::string* map_string_uint32::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pb.map_string_uint32.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* map_string_uint32::release_key() {
  // @@protoc_insertion_point(field_release:pb.map_string_uint32.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void map_string_uint32::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pb.map_string_uint32.key)
}

// optional uint32 value = 2;
inline bool map_string_uint32::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void map_string_uint32::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void map_string_uint32::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void map_string_uint32::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 map_string_uint32::value() const {
  // @@protoc_insertion_point(field_get:pb.map_string_uint32.value)
  return value_;
}
inline void map_string_uint32::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.map_string_uint32.value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_output_2eproto__INCLUDED
