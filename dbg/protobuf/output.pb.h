// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output.proto

#ifndef PROTOBUF_output_2eproto__INCLUDED
#define PROTOBUF_output_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_output_2eproto();
void protobuf_AssignDesc_output_2eproto();
void protobuf_ShutdownFile_output_2eproto();

class Root;

// ===================================================================

class Root : public ::google::protobuf::Message {
 public:
  Root();
  virtual ~Root();

  Root(const Root& from);

  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Root& default_instance();

  void Swap(Root* other);

  // implements Message ----------------------------------------------

  Root* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root& from);
  void MergeFrom(const Root& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 packed_var_ints = 1 [packed = true];
  inline int packed_var_ints_size() const;
  inline void clear_packed_var_ints();
  static const int kPackedVarIntsFieldNumber = 1;
  inline ::google::protobuf::int32 packed_var_ints(int index) const;
  inline void set_packed_var_ints(int index, ::google::protobuf::int32 value);
  inline void add_packed_var_ints(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      packed_var_ints() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_packed_var_ints();

  // repeated double packed_doubles = 2 [packed = true];
  inline int packed_doubles_size() const;
  inline void clear_packed_doubles();
  static const int kPackedDoublesFieldNumber = 2;
  inline double packed_doubles(int index) const;
  inline void set_packed_doubles(int index, double value);
  inline void add_packed_doubles(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      packed_doubles() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_packed_doubles();

  // repeated string unpacked_strings = 3;
  inline int unpacked_strings_size() const;
  inline void clear_unpacked_strings();
  static const int kUnpackedStringsFieldNumber = 3;
  inline const ::std::string& unpacked_strings(int index) const;
  inline ::std::string* mutable_unpacked_strings(int index);
  inline void set_unpacked_strings(int index, const ::std::string& value);
  inline void set_unpacked_strings(int index, const char* value);
  inline void set_unpacked_strings(int index, const char* value, size_t size);
  inline ::std::string* add_unpacked_strings();
  inline void add_unpacked_strings(const ::std::string& value);
  inline void add_unpacked_strings(const char* value);
  inline void add_unpacked_strings(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& unpacked_strings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unpacked_strings();

  // @@protoc_insertion_point(class_scope:pb.Root)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > packed_var_ints_;
  mutable int _packed_var_ints_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > packed_doubles_;
  mutable int _packed_doubles_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unpacked_strings_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static Root* default_instance_;
};
// ===================================================================


// ===================================================================

// Root

// repeated sint32 packed_var_ints = 1 [packed = true];
inline int Root::packed_var_ints_size() const {
  return packed_var_ints_.size();
}
inline void Root::clear_packed_var_ints() {
  packed_var_ints_.Clear();
}
inline ::google::protobuf::int32 Root::packed_var_ints(int index) const {
  // @@protoc_insertion_point(field_get:pb.Root.packed_var_ints)
  return packed_var_ints_.Get(index);
}
inline void Root::set_packed_var_ints(int index, ::google::protobuf::int32 value) {
  packed_var_ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Root.packed_var_ints)
}
inline void Root::add_packed_var_ints(::google::protobuf::int32 value) {
  packed_var_ints_.Add(value);
  // @@protoc_insertion_point(field_add:pb.Root.packed_var_ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Root::packed_var_ints() const {
  // @@protoc_insertion_point(field_list:pb.Root.packed_var_ints)
  return packed_var_ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Root::mutable_packed_var_ints() {
  // @@protoc_insertion_point(field_mutable_list:pb.Root.packed_var_ints)
  return &packed_var_ints_;
}

// repeated double packed_doubles = 2 [packed = true];
inline int Root::packed_doubles_size() const {
  return packed_doubles_.size();
}
inline void Root::clear_packed_doubles() {
  packed_doubles_.Clear();
}
inline double Root::packed_doubles(int index) const {
  // @@protoc_insertion_point(field_get:pb.Root.packed_doubles)
  return packed_doubles_.Get(index);
}
inline void Root::set_packed_doubles(int index, double value) {
  packed_doubles_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Root.packed_doubles)
}
inline void Root::add_packed_doubles(double value) {
  packed_doubles_.Add(value);
  // @@protoc_insertion_point(field_add:pb.Root.packed_doubles)
}
inline const ::google::protobuf::RepeatedField< double >&
Root::packed_doubles() const {
  // @@protoc_insertion_point(field_list:pb.Root.packed_doubles)
  return packed_doubles_;
}
inline ::google::protobuf::RepeatedField< double >*
Root::mutable_packed_doubles() {
  // @@protoc_insertion_point(field_mutable_list:pb.Root.packed_doubles)
  return &packed_doubles_;
}

// repeated string unpacked_strings = 3;
inline int Root::unpacked_strings_size() const {
  return unpacked_strings_.size();
}
inline void Root::clear_unpacked_strings() {
  unpacked_strings_.Clear();
}
inline const ::std::string& Root::unpacked_strings(int index) const {
  // @@protoc_insertion_point(field_get:pb.Root.unpacked_strings)
  return unpacked_strings_.Get(index);
}
inline ::std::string* Root::mutable_unpacked_strings(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Root.unpacked_strings)
  return unpacked_strings_.Mutable(index);
}
inline void Root::set_unpacked_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Root.unpacked_strings)
  unpacked_strings_.Mutable(index)->assign(value);
}
inline void Root::set_unpacked_strings(int index, const char* value) {
  unpacked_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Root.unpacked_strings)
}
inline void Root::set_unpacked_strings(int index, const char* value, size_t size) {
  unpacked_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Root.unpacked_strings)
}
inline ::std::string* Root::add_unpacked_strings() {
  return unpacked_strings_.Add();
}
inline void Root::add_unpacked_strings(const ::std::string& value) {
  unpacked_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Root.unpacked_strings)
}
inline void Root::add_unpacked_strings(const char* value) {
  unpacked_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Root.unpacked_strings)
}
inline void Root::add_unpacked_strings(const char* value, size_t size) {
  unpacked_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Root.unpacked_strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Root::unpacked_strings() const {
  // @@protoc_insertion_point(field_list:pb.Root.unpacked_strings)
  return unpacked_strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Root::mutable_unpacked_strings() {
  // @@protoc_insertion_point(field_mutable_list:pb.Root.unpacked_strings)
  return &unpacked_strings_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_output_2eproto__INCLUDED
