// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: output.proto

#ifndef PROTOBUF_output_2eproto__INCLUDED
#define PROTOBUF_output_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_output_2eproto();
void protobuf_AssignDesc_output_2eproto();
void protobuf_ShutdownFile_output_2eproto();

class BasicTypes;

// ===================================================================

class BasicTypes : public ::google::protobuf::Message {
 public:
  BasicTypes();
  virtual ~BasicTypes();

  BasicTypes(const BasicTypes& from);

  inline BasicTypes& operator=(const BasicTypes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicTypes& default_instance();

  void Swap(BasicTypes* other);

  // implements Message ----------------------------------------------

  inline BasicTypes* New() const { return New(NULL); }

  BasicTypes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasicTypes& from);
  void MergeFrom(const BasicTypes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BasicTypes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 max_u32 = 1;
  bool has_max_u32() const;
  void clear_max_u32();
  static const int kMaxU32FieldNumber = 1;
  ::google::protobuf::uint32 max_u32() const;
  void set_max_u32(::google::protobuf::uint32 value);

  // optional uint64 max_u64 = 2;
  bool has_max_u64() const;
  void clear_max_u64();
  static const int kMaxU64FieldNumber = 2;
  ::google::protobuf::uint64 max_u64() const;
  void set_max_u64(::google::protobuf::uint64 value);

  // optional sint32 max_s32 = 3;
  bool has_max_s32() const;
  void clear_max_s32();
  static const int kMaxS32FieldNumber = 3;
  ::google::protobuf::int32 max_s32() const;
  void set_max_s32(::google::protobuf::int32 value);

  // optional sint64 max_s64 = 4;
  bool has_max_s64() const;
  void clear_max_s64();
  static const int kMaxS64FieldNumber = 4;
  ::google::protobuf::int64 max_s64() const;
  void set_max_s64(::google::protobuf::int64 value);

  // optional float a_float = 5;
  bool has_a_float() const;
  void clear_a_float();
  static const int kAFloatFieldNumber = 5;
  float a_float() const;
  void set_a_float(float value);

  // optional double a_double = 6;
  bool has_a_double() const;
  void clear_a_double();
  static const int kADoubleFieldNumber = 6;
  double a_double() const;
  void set_a_double(double value);

  // optional string description = 7;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint32 a_value = 8;
  bool has_a_value() const;
  void clear_a_value();
  static const int kAValueFieldNumber = 8;
  ::google::protobuf::uint32 a_value() const;
  void set_a_value(::google::protobuf::uint32 value);

  // optional bool flag = 9;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 9;
  bool flag() const;
  void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:pb.BasicTypes)
 private:
  inline void set_has_max_u32();
  inline void clear_has_max_u32();
  inline void set_has_max_u64();
  inline void clear_has_max_u64();
  inline void set_has_max_s32();
  inline void clear_has_max_s32();
  inline void set_has_max_s64();
  inline void clear_has_max_s64();
  inline void set_has_a_float();
  inline void clear_has_a_float();
  inline void set_has_a_double();
  inline void clear_has_a_double();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_a_value();
  inline void clear_has_a_value();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 max_u64_;
  ::google::protobuf::uint32 max_u32_;
  ::google::protobuf::int32 max_s32_;
  ::google::protobuf::int64 max_s64_;
  double a_double_;
  float a_float_;
  ::google::protobuf::uint32 a_value_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  bool flag_;
  friend void  protobuf_AddDesc_output_2eproto();
  friend void protobuf_AssignDesc_output_2eproto();
  friend void protobuf_ShutdownFile_output_2eproto();

  void InitAsDefaultInstance();
  static BasicTypes* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BasicTypes

// optional uint32 max_u32 = 1;
inline bool BasicTypes::has_max_u32() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicTypes::set_has_max_u32() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicTypes::clear_has_max_u32() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicTypes::clear_max_u32() {
  max_u32_ = 0u;
  clear_has_max_u32();
}
inline ::google::protobuf::uint32 BasicTypes::max_u32() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.max_u32)
  return max_u32_;
}
inline void BasicTypes::set_max_u32(::google::protobuf::uint32 value) {
  set_has_max_u32();
  max_u32_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.max_u32)
}

// optional uint64 max_u64 = 2;
inline bool BasicTypes::has_max_u64() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicTypes::set_has_max_u64() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BasicTypes::clear_has_max_u64() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BasicTypes::clear_max_u64() {
  max_u64_ = GOOGLE_ULONGLONG(0);
  clear_has_max_u64();
}
inline ::google::protobuf::uint64 BasicTypes::max_u64() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.max_u64)
  return max_u64_;
}
inline void BasicTypes::set_max_u64(::google::protobuf::uint64 value) {
  set_has_max_u64();
  max_u64_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.max_u64)
}

// optional sint32 max_s32 = 3;
inline bool BasicTypes::has_max_s32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicTypes::set_has_max_s32() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BasicTypes::clear_has_max_s32() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BasicTypes::clear_max_s32() {
  max_s32_ = 0;
  clear_has_max_s32();
}
inline ::google::protobuf::int32 BasicTypes::max_s32() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.max_s32)
  return max_s32_;
}
inline void BasicTypes::set_max_s32(::google::protobuf::int32 value) {
  set_has_max_s32();
  max_s32_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.max_s32)
}

// optional sint64 max_s64 = 4;
inline bool BasicTypes::has_max_s64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BasicTypes::set_has_max_s64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BasicTypes::clear_has_max_s64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BasicTypes::clear_max_s64() {
  max_s64_ = GOOGLE_LONGLONG(0);
  clear_has_max_s64();
}
inline ::google::protobuf::int64 BasicTypes::max_s64() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.max_s64)
  return max_s64_;
}
inline void BasicTypes::set_max_s64(::google::protobuf::int64 value) {
  set_has_max_s64();
  max_s64_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.max_s64)
}

// optional float a_float = 5;
inline bool BasicTypes::has_a_float() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BasicTypes::set_has_a_float() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BasicTypes::clear_has_a_float() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BasicTypes::clear_a_float() {
  a_float_ = 0;
  clear_has_a_float();
}
inline float BasicTypes::a_float() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.a_float)
  return a_float_;
}
inline void BasicTypes::set_a_float(float value) {
  set_has_a_float();
  a_float_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.a_float)
}

// optional double a_double = 6;
inline bool BasicTypes::has_a_double() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BasicTypes::set_has_a_double() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BasicTypes::clear_has_a_double() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BasicTypes::clear_a_double() {
  a_double_ = 0;
  clear_has_a_double();
}
inline double BasicTypes::a_double() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.a_double)
  return a_double_;
}
inline void BasicTypes::set_a_double(double value) {
  set_has_a_double();
  a_double_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.a_double)
}

// optional string description = 7;
inline bool BasicTypes::has_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BasicTypes::set_has_description() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BasicTypes::clear_has_description() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BasicTypes::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& BasicTypes::description() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicTypes::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BasicTypes.description)
}
inline void BasicTypes::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BasicTypes.description)
}
inline void BasicTypes::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BasicTypes.description)
}
inline ::std::string* BasicTypes::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:pb.BasicTypes.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasicTypes::release_description() {
  // @@protoc_insertion_point(field_release:pb.BasicTypes.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicTypes::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:pb.BasicTypes.description)
}

// optional uint32 a_value = 8;
inline bool BasicTypes::has_a_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BasicTypes::set_has_a_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BasicTypes::clear_has_a_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BasicTypes::clear_a_value() {
  a_value_ = 0u;
  clear_has_a_value();
}
inline ::google::protobuf::uint32 BasicTypes::a_value() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.a_value)
  return a_value_;
}
inline void BasicTypes::set_a_value(::google::protobuf::uint32 value) {
  set_has_a_value();
  a_value_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.a_value)
}

// optional bool flag = 9;
inline bool BasicTypes::has_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BasicTypes::set_has_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BasicTypes::clear_has_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BasicTypes::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool BasicTypes::flag() const {
  // @@protoc_insertion_point(field_get:pb.BasicTypes.flag)
  return flag_;
}
inline void BasicTypes::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:pb.BasicTypes.flag)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_output_2eproto__INCLUDED
