Terminals unused in grammar

   CHAR_LITERAL


Gramática

    0 $accept: file $end

    1 file: /* vacío */
    2     | file publishable_struct
    3     | file mapping
    4     | file encoding

    5 publishable_struct_begin: KW_PUBLISHABLE_STRUCT IDENTIFIER '{'
    6                         | publishable_struct_begin data_element

    7 publishable_struct: publishable_struct_begin '}' ';'

    8 mapping_begin: KW_MAPPING '(' str_list ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{'
    9              | mapping_begin data_element

   10 mapping: mapping_begin '}' ';'

   11 encoding_begin: KW_ENCODING '(' STRING_LITERAL ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{'
   12               | encoding_begin data_element
   13               | encoding_begin data_group

   14 encoding: encoding_begin '}' ';'

   15 data_element: data_type IDENTIFIER ';'
   16             | IDENTIFIER IDENTIFIER ';'
   17             | IDENTIFIER data_element
   18             | IDENTIFIER '(' arg_list ')' data_element

   19 data_group_begin: IDENTIFIER '{'
   20                 | IDENTIFIER '(' arg_list ')' '{'
   21                 | data_group_begin data_element
   22                 | data_group_begin data_group

   23 data_group: data_group_begin '}'

   24 data_type: numeric_type
   25          | int_type
   26          | sequence_type
   27          | inline_enum_type
   28          | class_ref_type
   29          | bit_type
   30          | fixed_point_type

   31 numeric_type: KW_NUMERIC '[' expr ',' expr ']'
   32             | KW_NUMERIC '(' expr ',' expr ']'
   33             | KW_NUMERIC '[' expr ',' expr ')'
   34             | KW_NUMERIC '(' expr ',' expr ')'

   35 int_type: KW_INT '[' expr ',' expr ']'
   36         | KW_INT '(' expr ',' expr ']'
   37         | KW_INT '[' expr ',' expr ')'
   38         | KW_INT '(' expr ',' expr ')'

   39 fixed_point_type: KW_FIXED_POINT '(' expr ')'

   40 bit_type: KW_BIT '(' expr ')'

   41 sequence_type: KW_SEQUENCE '<' IDENTIFIER '>'

   42 class_ref_type: KW_CLASS IDENTIFIER

   43 inline_enum_type: KW_ENUM IDENTIFIER '{' enum_values '}'

   44 enum_values: IDENTIFIER '=' INTEGER_LITERAL
   45            | enum_values ',' IDENTIFIER '=' INTEGER_LITERAL

   46 str_list: STRING_LITERAL
   47         | str_list ',' STRING_LITERAL

   48 arg_list: expr
   49         | arg_list ',' expr

   50 expr: INTEGER_LITERAL
   51     | FLOAT_LITERAL
   52     | IDENTIFIER


Terminales con las reglas donde aparecen

$end (0) 0
'(' (40) 8 11 18 20 32 34 36 38 39 40
')' (41) 8 11 18 20 33 34 37 38 39 40
',' (44) 31 32 33 34 35 36 37 38 45 47 49
';' (59) 7 10 14 15 16
'<' (60) 41
'=' (61) 44 45
'>' (62) 41
'[' (91) 31 33 35 37
']' (93) 31 32 35 36
'{' (123) 5 8 11 19 20 43
'}' (125) 7 10 14 23 43
error (256)
KW_PUBLISHABLE_STRUCT (258) 5 8 11
KW_ENUM (259) 43
KW_CLASS (260) 42
KW_MAPPING (261) 8
KW_ENCODING (262) 11
KW_NUMERIC (263) 31 32 33 34
KW_INT (264) 35 36 37 38
KW_SEQUENCE (265) 41
KW_FIXED_POINT (266) 39
KW_BIT (267) 40
IDENTIFIER (268) 5 8 11 15 16 17 18 19 20 41 42 43 44 45 52
STRING_LITERAL (269) 11 46 47
INTEGER_LITERAL (270) 44 45 50
CHAR_LITERAL (271)
FLOAT_LITERAL (272) 51


No terminales con las reglas donde aparecen

$accept (29)
    en la izquierda: 0
file (30)
    en la izquierda: 1 2 3 4, en la derecha: 0 2 3 4
publishable_struct_begin (31)
    en la izquierda: 5 6, en la derecha: 6 7
publishable_struct (32)
    en la izquierda: 7, en la derecha: 2
mapping_begin (33)
    en la izquierda: 8 9, en la derecha: 9 10
mapping (34)
    en la izquierda: 10, en la derecha: 3
encoding_begin (35)
    en la izquierda: 11 12 13, en la derecha: 12 13 14
encoding (36)
    en la izquierda: 14, en la derecha: 4
data_element (37)
    en la izquierda: 15 16 17 18, en la derecha: 6 9 12 17 18 21
data_group_begin (38)
    en la izquierda: 19 20 21 22, en la derecha: 21 22 23
data_group (39)
    en la izquierda: 23, en la derecha: 13 22
data_type (40)
    en la izquierda: 24 25 26 27 28 29 30, en la derecha: 15
numeric_type (41)
    en la izquierda: 31 32 33 34, en la derecha: 24
int_type (42)
    en la izquierda: 35 36 37 38, en la derecha: 25
fixed_point_type (43)
    en la izquierda: 39, en la derecha: 30
bit_type (44)
    en la izquierda: 40, en la derecha: 29
sequence_type (45)
    en la izquierda: 41, en la derecha: 26
class_ref_type (46)
    en la izquierda: 42, en la derecha: 28
inline_enum_type (47)
    en la izquierda: 43, en la derecha: 27
enum_values (48)
    en la izquierda: 44 45, en la derecha: 43 45
str_list (49)
    en la izquierda: 46 47, en la derecha: 8 47
arg_list (50)
    en la izquierda: 48 49, en la derecha: 18 20 49
expr (51)
    en la izquierda: 50 51 52, en la derecha: 31 32 33 34 35 36 37
    38 39 40 48 49


estado 0

    0 $accept: . file $end

    $default  reduce usando la regla 1 (file)

    file  ir al estado 1


estado 1

    0 $accept: file . $end
    2 file: file . publishable_struct
    3     | file . mapping
    4     | file . encoding

    $end                   desplazar e ir al estado 2
    KW_PUBLISHABLE_STRUCT  desplazar e ir al estado 3
    KW_MAPPING             desplazar e ir al estado 4
    KW_ENCODING            desplazar e ir al estado 5

    publishable_struct_begin  ir al estado 6
    publishable_struct        ir al estado 7
    mapping_begin             ir al estado 8
    mapping                   ir al estado 9
    encoding_begin            ir al estado 10
    encoding                  ir al estado 11


estado 2

    0 $accept: file $end .

    $default  aceptar


estado 3

    5 publishable_struct_begin: KW_PUBLISHABLE_STRUCT . IDENTIFIER '{'

    IDENTIFIER  desplazar e ir al estado 12


estado 4

    8 mapping_begin: KW_MAPPING . '(' str_list ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{'

    '('  desplazar e ir al estado 13


estado 5

   11 encoding_begin: KW_ENCODING . '(' STRING_LITERAL ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{'

    '('  desplazar e ir al estado 14


estado 6

    6 publishable_struct_begin: publishable_struct_begin . data_element
    7 publishable_struct: publishable_struct_begin . '}' ';'

    KW_ENUM         desplazar e ir al estado 15
    KW_CLASS        desplazar e ir al estado 16
    KW_NUMERIC      desplazar e ir al estado 17
    KW_INT          desplazar e ir al estado 18
    KW_SEQUENCE     desplazar e ir al estado 19
    KW_FIXED_POINT  desplazar e ir al estado 20
    KW_BIT          desplazar e ir al estado 21
    IDENTIFIER      desplazar e ir al estado 22
    '}'             desplazar e ir al estado 23

    data_element      ir al estado 24
    data_type         ir al estado 25
    numeric_type      ir al estado 26
    int_type          ir al estado 27
    fixed_point_type  ir al estado 28
    bit_type          ir al estado 29
    sequence_type     ir al estado 30
    class_ref_type    ir al estado 31
    inline_enum_type  ir al estado 32


estado 7

    2 file: file publishable_struct .

    $default  reduce usando la regla 2 (file)


estado 8

    9 mapping_begin: mapping_begin . data_element
   10 mapping: mapping_begin . '}' ';'

    KW_ENUM         desplazar e ir al estado 15
    KW_CLASS        desplazar e ir al estado 16
    KW_NUMERIC      desplazar e ir al estado 17
    KW_INT          desplazar e ir al estado 18
    KW_SEQUENCE     desplazar e ir al estado 19
    KW_FIXED_POINT  desplazar e ir al estado 20
    KW_BIT          desplazar e ir al estado 21
    IDENTIFIER      desplazar e ir al estado 22
    '}'             desplazar e ir al estado 33

    data_element      ir al estado 34
    data_type         ir al estado 25
    numeric_type      ir al estado 26
    int_type          ir al estado 27
    fixed_point_type  ir al estado 28
    bit_type          ir al estado 29
    sequence_type     ir al estado 30
    class_ref_type    ir al estado 31
    inline_enum_type  ir al estado 32


estado 9

    3 file: file mapping .

    $default  reduce usando la regla 3 (file)


estado 10

   12 encoding_begin: encoding_begin . data_element
   13               | encoding_begin . data_group
   14 encoding: encoding_begin . '}' ';'

    KW_ENUM         desplazar e ir al estado 15
    KW_CLASS        desplazar e ir al estado 16
    KW_NUMERIC      desplazar e ir al estado 17
    KW_INT          desplazar e ir al estado 18
    KW_SEQUENCE     desplazar e ir al estado 19
    KW_FIXED_POINT  desplazar e ir al estado 20
    KW_BIT          desplazar e ir al estado 21
    IDENTIFIER      desplazar e ir al estado 35
    '}'             desplazar e ir al estado 36

    data_element      ir al estado 37
    data_group_begin  ir al estado 38
    data_group        ir al estado 39
    data_type         ir al estado 25
    numeric_type      ir al estado 26
    int_type          ir al estado 27
    fixed_point_type  ir al estado 28
    bit_type          ir al estado 29
    sequence_type     ir al estado 30
    class_ref_type    ir al estado 31
    inline_enum_type  ir al estado 32


estado 11

    4 file: file encoding .

    $default  reduce usando la regla 4 (file)


estado 12

    5 publishable_struct_begin: KW_PUBLISHABLE_STRUCT IDENTIFIER . '{'

    '{'  desplazar e ir al estado 40


estado 13

    8 mapping_begin: KW_MAPPING '(' . str_list ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{'

    STRING_LITERAL  desplazar e ir al estado 41

    str_list  ir al estado 42


estado 14

   11 encoding_begin: KW_ENCODING '(' . STRING_LITERAL ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{'

    STRING_LITERAL  desplazar e ir al estado 43


estado 15

   43 inline_enum_type: KW_ENUM . IDENTIFIER '{' enum_values '}'

    IDENTIFIER  desplazar e ir al estado 44


estado 16

   42 class_ref_type: KW_CLASS . IDENTIFIER

    IDENTIFIER  desplazar e ir al estado 45


estado 17

   31 numeric_type: KW_NUMERIC . '[' expr ',' expr ']'
   32             | KW_NUMERIC . '(' expr ',' expr ']'
   33             | KW_NUMERIC . '[' expr ',' expr ')'
   34             | KW_NUMERIC . '(' expr ',' expr ')'

    '('  desplazar e ir al estado 46
    '['  desplazar e ir al estado 47


estado 18

   35 int_type: KW_INT . '[' expr ',' expr ']'
   36         | KW_INT . '(' expr ',' expr ']'
   37         | KW_INT . '[' expr ',' expr ')'
   38         | KW_INT . '(' expr ',' expr ')'

    '('  desplazar e ir al estado 48
    '['  desplazar e ir al estado 49


estado 19

   41 sequence_type: KW_SEQUENCE . '<' IDENTIFIER '>'

    '<'  desplazar e ir al estado 50


estado 20

   39 fixed_point_type: KW_FIXED_POINT . '(' expr ')'

    '('  desplazar e ir al estado 51


estado 21

   40 bit_type: KW_BIT . '(' expr ')'

    '('  desplazar e ir al estado 52


estado 22

   16 data_element: IDENTIFIER . IDENTIFIER ';'
   17             | IDENTIFIER . data_element
   18             | IDENTIFIER . '(' arg_list ')' data_element

    KW_ENUM         desplazar e ir al estado 15
    KW_CLASS        desplazar e ir al estado 16
    KW_NUMERIC      desplazar e ir al estado 17
    KW_INT          desplazar e ir al estado 18
    KW_SEQUENCE     desplazar e ir al estado 19
    KW_FIXED_POINT  desplazar e ir al estado 20
    KW_BIT          desplazar e ir al estado 21
    IDENTIFIER      desplazar e ir al estado 53
    '('             desplazar e ir al estado 54

    data_element      ir al estado 55
    data_type         ir al estado 25
    numeric_type      ir al estado 26
    int_type          ir al estado 27
    fixed_point_type  ir al estado 28
    bit_type          ir al estado 29
    sequence_type     ir al estado 30
    class_ref_type    ir al estado 31
    inline_enum_type  ir al estado 32


estado 23

    7 publishable_struct: publishable_struct_begin '}' . ';'

    ';'  desplazar e ir al estado 56


estado 24

    6 publishable_struct_begin: publishable_struct_begin data_element .

    $default  reduce usando la regla 6 (publishable_struct_begin)


estado 25

   15 data_element: data_type . IDENTIFIER ';'

    IDENTIFIER  desplazar e ir al estado 57


estado 26

   24 data_type: numeric_type .

    $default  reduce usando la regla 24 (data_type)


estado 27

   25 data_type: int_type .

    $default  reduce usando la regla 25 (data_type)


estado 28

   30 data_type: fixed_point_type .

    $default  reduce usando la regla 30 (data_type)


estado 29

   29 data_type: bit_type .

    $default  reduce usando la regla 29 (data_type)


estado 30

   26 data_type: sequence_type .

    $default  reduce usando la regla 26 (data_type)


estado 31

   28 data_type: class_ref_type .

    $default  reduce usando la regla 28 (data_type)


estado 32

   27 data_type: inline_enum_type .

    $default  reduce usando la regla 27 (data_type)


estado 33

   10 mapping: mapping_begin '}' . ';'

    ';'  desplazar e ir al estado 58


estado 34

    9 mapping_begin: mapping_begin data_element .

    $default  reduce usando la regla 9 (mapping_begin)


estado 35

   16 data_element: IDENTIFIER . IDENTIFIER ';'
   17             | IDENTIFIER . data_element
   18             | IDENTIFIER . '(' arg_list ')' data_element
   19 data_group_begin: IDENTIFIER . '{'
   20                 | IDENTIFIER . '(' arg_list ')' '{'

    KW_ENUM         desplazar e ir al estado 15
    KW_CLASS        desplazar e ir al estado 16
    KW_NUMERIC      desplazar e ir al estado 17
    KW_INT          desplazar e ir al estado 18
    KW_SEQUENCE     desplazar e ir al estado 19
    KW_FIXED_POINT  desplazar e ir al estado 20
    KW_BIT          desplazar e ir al estado 21
    IDENTIFIER      desplazar e ir al estado 53
    '{'             desplazar e ir al estado 59
    '('             desplazar e ir al estado 60

    data_element      ir al estado 55
    data_type         ir al estado 25
    numeric_type      ir al estado 26
    int_type          ir al estado 27
    fixed_point_type  ir al estado 28
    bit_type          ir al estado 29
    sequence_type     ir al estado 30
    class_ref_type    ir al estado 31
    inline_enum_type  ir al estado 32


estado 36

   14 encoding: encoding_begin '}' . ';'

    ';'  desplazar e ir al estado 61


estado 37

   12 encoding_begin: encoding_begin data_element .

    $default  reduce usando la regla 12 (encoding_begin)


estado 38

   21 data_group_begin: data_group_begin . data_element
   22                 | data_group_begin . data_group
   23 data_group: data_group_begin . '}'

    KW_ENUM         desplazar e ir al estado 15
    KW_CLASS        desplazar e ir al estado 16
    KW_NUMERIC      desplazar e ir al estado 17
    KW_INT          desplazar e ir al estado 18
    KW_SEQUENCE     desplazar e ir al estado 19
    KW_FIXED_POINT  desplazar e ir al estado 20
    KW_BIT          desplazar e ir al estado 21
    IDENTIFIER      desplazar e ir al estado 35
    '}'             desplazar e ir al estado 62

    data_element      ir al estado 63
    data_group_begin  ir al estado 38
    data_group        ir al estado 64
    data_type         ir al estado 25
    numeric_type      ir al estado 26
    int_type          ir al estado 27
    fixed_point_type  ir al estado 28
    bit_type          ir al estado 29
    sequence_type     ir al estado 30
    class_ref_type    ir al estado 31
    inline_enum_type  ir al estado 32


estado 39

   13 encoding_begin: encoding_begin data_group .

    $default  reduce usando la regla 13 (encoding_begin)


estado 40

    5 publishable_struct_begin: KW_PUBLISHABLE_STRUCT IDENTIFIER '{' .

    $default  reduce usando la regla 5 (publishable_struct_begin)


estado 41

   46 str_list: STRING_LITERAL .

    $default  reduce usando la regla 46 (str_list)


estado 42

    8 mapping_begin: KW_MAPPING '(' str_list . ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{'
   47 str_list: str_list . ',' STRING_LITERAL

    ')'  desplazar e ir al estado 65
    ','  desplazar e ir al estado 66


estado 43

   11 encoding_begin: KW_ENCODING '(' STRING_LITERAL . ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{'

    ')'  desplazar e ir al estado 67


estado 44

   43 inline_enum_type: KW_ENUM IDENTIFIER . '{' enum_values '}'

    '{'  desplazar e ir al estado 68


estado 45

   42 class_ref_type: KW_CLASS IDENTIFIER .

    $default  reduce usando la regla 42 (class_ref_type)


estado 46

   32 numeric_type: KW_NUMERIC '(' . expr ',' expr ']'
   34             | KW_NUMERIC '(' . expr ',' expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 72


estado 47

   31 numeric_type: KW_NUMERIC '[' . expr ',' expr ']'
   33             | KW_NUMERIC '[' . expr ',' expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 73


estado 48

   36 int_type: KW_INT '(' . expr ',' expr ']'
   38         | KW_INT '(' . expr ',' expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 74


estado 49

   35 int_type: KW_INT '[' . expr ',' expr ']'
   37         | KW_INT '[' . expr ',' expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 75


estado 50

   41 sequence_type: KW_SEQUENCE '<' . IDENTIFIER '>'

    IDENTIFIER  desplazar e ir al estado 76


estado 51

   39 fixed_point_type: KW_FIXED_POINT '(' . expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 77


estado 52

   40 bit_type: KW_BIT '(' . expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 78


estado 53

   16 data_element: IDENTIFIER . IDENTIFIER ';'
   16             | IDENTIFIER IDENTIFIER . ';'
   17             | IDENTIFIER . data_element
   18             | IDENTIFIER . '(' arg_list ')' data_element

    KW_ENUM         desplazar e ir al estado 15
    KW_CLASS        desplazar e ir al estado 16
    KW_NUMERIC      desplazar e ir al estado 17
    KW_INT          desplazar e ir al estado 18
    KW_SEQUENCE     desplazar e ir al estado 19
    KW_FIXED_POINT  desplazar e ir al estado 20
    KW_BIT          desplazar e ir al estado 21
    IDENTIFIER      desplazar e ir al estado 53
    ';'             desplazar e ir al estado 79
    '('             desplazar e ir al estado 54

    data_element      ir al estado 55
    data_type         ir al estado 25
    numeric_type      ir al estado 26
    int_type          ir al estado 27
    fixed_point_type  ir al estado 28
    bit_type          ir al estado 29
    sequence_type     ir al estado 30
    class_ref_type    ir al estado 31
    inline_enum_type  ir al estado 32


estado 54

   18 data_element: IDENTIFIER '(' . arg_list ')' data_element

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    arg_list  ir al estado 80
    expr      ir al estado 81


estado 55

   17 data_element: IDENTIFIER data_element .

    $default  reduce usando la regla 17 (data_element)


estado 56

    7 publishable_struct: publishable_struct_begin '}' ';' .

    $default  reduce usando la regla 7 (publishable_struct)


estado 57

   15 data_element: data_type IDENTIFIER . ';'

    ';'  desplazar e ir al estado 82


estado 58

   10 mapping: mapping_begin '}' ';' .

    $default  reduce usando la regla 10 (mapping)


estado 59

   19 data_group_begin: IDENTIFIER '{' .

    $default  reduce usando la regla 19 (data_group_begin)


estado 60

   18 data_element: IDENTIFIER '(' . arg_list ')' data_element
   20 data_group_begin: IDENTIFIER '(' . arg_list ')' '{'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    arg_list  ir al estado 83
    expr      ir al estado 81


estado 61

   14 encoding: encoding_begin '}' ';' .

    $default  reduce usando la regla 14 (encoding)


estado 62

   23 data_group: data_group_begin '}' .

    $default  reduce usando la regla 23 (data_group)


estado 63

   21 data_group_begin: data_group_begin data_element .

    $default  reduce usando la regla 21 (data_group_begin)


estado 64

   22 data_group_begin: data_group_begin data_group .

    $default  reduce usando la regla 22 (data_group_begin)


estado 65

    8 mapping_begin: KW_MAPPING '(' str_list ')' . KW_PUBLISHABLE_STRUCT IDENTIFIER '{'

    KW_PUBLISHABLE_STRUCT  desplazar e ir al estado 84


estado 66

   47 str_list: str_list ',' . STRING_LITERAL

    STRING_LITERAL  desplazar e ir al estado 85


estado 67

   11 encoding_begin: KW_ENCODING '(' STRING_LITERAL ')' . KW_PUBLISHABLE_STRUCT IDENTIFIER '{'

    KW_PUBLISHABLE_STRUCT  desplazar e ir al estado 86


estado 68

   43 inline_enum_type: KW_ENUM IDENTIFIER '{' . enum_values '}'

    IDENTIFIER  desplazar e ir al estado 87

    enum_values  ir al estado 88


estado 69

   52 expr: IDENTIFIER .

    $default  reduce usando la regla 52 (expr)


estado 70

   50 expr: INTEGER_LITERAL .

    $default  reduce usando la regla 50 (expr)


estado 71

   51 expr: FLOAT_LITERAL .

    $default  reduce usando la regla 51 (expr)


estado 72

   32 numeric_type: KW_NUMERIC '(' expr . ',' expr ']'
   34             | KW_NUMERIC '(' expr . ',' expr ')'

    ','  desplazar e ir al estado 89


estado 73

   31 numeric_type: KW_NUMERIC '[' expr . ',' expr ']'
   33             | KW_NUMERIC '[' expr . ',' expr ')'

    ','  desplazar e ir al estado 90


estado 74

   36 int_type: KW_INT '(' expr . ',' expr ']'
   38         | KW_INT '(' expr . ',' expr ')'

    ','  desplazar e ir al estado 91


estado 75

   35 int_type: KW_INT '[' expr . ',' expr ']'
   37         | KW_INT '[' expr . ',' expr ')'

    ','  desplazar e ir al estado 92


estado 76

   41 sequence_type: KW_SEQUENCE '<' IDENTIFIER . '>'

    '>'  desplazar e ir al estado 93


estado 77

   39 fixed_point_type: KW_FIXED_POINT '(' expr . ')'

    ')'  desplazar e ir al estado 94


estado 78

   40 bit_type: KW_BIT '(' expr . ')'

    ')'  desplazar e ir al estado 95


estado 79

   16 data_element: IDENTIFIER IDENTIFIER ';' .

    $default  reduce usando la regla 16 (data_element)


estado 80

   18 data_element: IDENTIFIER '(' arg_list . ')' data_element
   49 arg_list: arg_list . ',' expr

    ')'  desplazar e ir al estado 96
    ','  desplazar e ir al estado 97


estado 81

   48 arg_list: expr .

    $default  reduce usando la regla 48 (arg_list)


estado 82

   15 data_element: data_type IDENTIFIER ';' .

    $default  reduce usando la regla 15 (data_element)


estado 83

   18 data_element: IDENTIFIER '(' arg_list . ')' data_element
   20 data_group_begin: IDENTIFIER '(' arg_list . ')' '{'
   49 arg_list: arg_list . ',' expr

    ')'  desplazar e ir al estado 98
    ','  desplazar e ir al estado 97


estado 84

    8 mapping_begin: KW_MAPPING '(' str_list ')' KW_PUBLISHABLE_STRUCT . IDENTIFIER '{'

    IDENTIFIER  desplazar e ir al estado 99


estado 85

   47 str_list: str_list ',' STRING_LITERAL .

    $default  reduce usando la regla 47 (str_list)


estado 86

   11 encoding_begin: KW_ENCODING '(' STRING_LITERAL ')' KW_PUBLISHABLE_STRUCT . IDENTIFIER '{'

    IDENTIFIER  desplazar e ir al estado 100


estado 87

   44 enum_values: IDENTIFIER . '=' INTEGER_LITERAL

    '='  desplazar e ir al estado 101


estado 88

   43 inline_enum_type: KW_ENUM IDENTIFIER '{' enum_values . '}'
   45 enum_values: enum_values . ',' IDENTIFIER '=' INTEGER_LITERAL

    '}'  desplazar e ir al estado 102
    ','  desplazar e ir al estado 103


estado 89

   32 numeric_type: KW_NUMERIC '(' expr ',' . expr ']'
   34             | KW_NUMERIC '(' expr ',' . expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 104


estado 90

   31 numeric_type: KW_NUMERIC '[' expr ',' . expr ']'
   33             | KW_NUMERIC '[' expr ',' . expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 105


estado 91

   36 int_type: KW_INT '(' expr ',' . expr ']'
   38         | KW_INT '(' expr ',' . expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 106


estado 92

   35 int_type: KW_INT '[' expr ',' . expr ']'
   37         | KW_INT '[' expr ',' . expr ')'

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 107


estado 93

   41 sequence_type: KW_SEQUENCE '<' IDENTIFIER '>' .

    $default  reduce usando la regla 41 (sequence_type)


estado 94

   39 fixed_point_type: KW_FIXED_POINT '(' expr ')' .

    $default  reduce usando la regla 39 (fixed_point_type)


estado 95

   40 bit_type: KW_BIT '(' expr ')' .

    $default  reduce usando la regla 40 (bit_type)


estado 96

   18 data_element: IDENTIFIER '(' arg_list ')' . data_element

    KW_ENUM         desplazar e ir al estado 15
    KW_CLASS        desplazar e ir al estado 16
    KW_NUMERIC      desplazar e ir al estado 17
    KW_INT          desplazar e ir al estado 18
    KW_SEQUENCE     desplazar e ir al estado 19
    KW_FIXED_POINT  desplazar e ir al estado 20
    KW_BIT          desplazar e ir al estado 21
    IDENTIFIER      desplazar e ir al estado 22

    data_element      ir al estado 108
    data_type         ir al estado 25
    numeric_type      ir al estado 26
    int_type          ir al estado 27
    fixed_point_type  ir al estado 28
    bit_type          ir al estado 29
    sequence_type     ir al estado 30
    class_ref_type    ir al estado 31
    inline_enum_type  ir al estado 32


estado 97

   49 arg_list: arg_list ',' . expr

    IDENTIFIER       desplazar e ir al estado 69
    INTEGER_LITERAL  desplazar e ir al estado 70
    FLOAT_LITERAL    desplazar e ir al estado 71

    expr  ir al estado 109


estado 98

   18 data_element: IDENTIFIER '(' arg_list ')' . data_element
   20 data_group_begin: IDENTIFIER '(' arg_list ')' . '{'

    KW_ENUM         desplazar e ir al estado 15
    KW_CLASS        desplazar e ir al estado 16
    KW_NUMERIC      desplazar e ir al estado 17
    KW_INT          desplazar e ir al estado 18
    KW_SEQUENCE     desplazar e ir al estado 19
    KW_FIXED_POINT  desplazar e ir al estado 20
    KW_BIT          desplazar e ir al estado 21
    IDENTIFIER      desplazar e ir al estado 22
    '{'             desplazar e ir al estado 110

    data_element      ir al estado 108
    data_type         ir al estado 25
    numeric_type      ir al estado 26
    int_type          ir al estado 27
    fixed_point_type  ir al estado 28
    bit_type          ir al estado 29
    sequence_type     ir al estado 30
    class_ref_type    ir al estado 31
    inline_enum_type  ir al estado 32


estado 99

    8 mapping_begin: KW_MAPPING '(' str_list ')' KW_PUBLISHABLE_STRUCT IDENTIFIER . '{'

    '{'  desplazar e ir al estado 111


estado 100

   11 encoding_begin: KW_ENCODING '(' STRING_LITERAL ')' KW_PUBLISHABLE_STRUCT IDENTIFIER . '{'

    '{'  desplazar e ir al estado 112


estado 101

   44 enum_values: IDENTIFIER '=' . INTEGER_LITERAL

    INTEGER_LITERAL  desplazar e ir al estado 113


estado 102

   43 inline_enum_type: KW_ENUM IDENTIFIER '{' enum_values '}' .

    $default  reduce usando la regla 43 (inline_enum_type)


estado 103

   45 enum_values: enum_values ',' . IDENTIFIER '=' INTEGER_LITERAL

    IDENTIFIER  desplazar e ir al estado 114


estado 104

   32 numeric_type: KW_NUMERIC '(' expr ',' expr . ']'
   34             | KW_NUMERIC '(' expr ',' expr . ')'

    ')'  desplazar e ir al estado 115
    ']'  desplazar e ir al estado 116


estado 105

   31 numeric_type: KW_NUMERIC '[' expr ',' expr . ']'
   33             | KW_NUMERIC '[' expr ',' expr . ')'

    ')'  desplazar e ir al estado 117
    ']'  desplazar e ir al estado 118


estado 106

   36 int_type: KW_INT '(' expr ',' expr . ']'
   38         | KW_INT '(' expr ',' expr . ')'

    ')'  desplazar e ir al estado 119
    ']'  desplazar e ir al estado 120


estado 107

   35 int_type: KW_INT '[' expr ',' expr . ']'
   37         | KW_INT '[' expr ',' expr . ')'

    ')'  desplazar e ir al estado 121
    ']'  desplazar e ir al estado 122


estado 108

   18 data_element: IDENTIFIER '(' arg_list ')' data_element .

    $default  reduce usando la regla 18 (data_element)


estado 109

   49 arg_list: arg_list ',' expr .

    $default  reduce usando la regla 49 (arg_list)


estado 110

   20 data_group_begin: IDENTIFIER '(' arg_list ')' '{' .

    $default  reduce usando la regla 20 (data_group_begin)


estado 111

    8 mapping_begin: KW_MAPPING '(' str_list ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{' .

    $default  reduce usando la regla 8 (mapping_begin)


estado 112

   11 encoding_begin: KW_ENCODING '(' STRING_LITERAL ')' KW_PUBLISHABLE_STRUCT IDENTIFIER '{' .

    $default  reduce usando la regla 11 (encoding_begin)


estado 113

   44 enum_values: IDENTIFIER '=' INTEGER_LITERAL .

    $default  reduce usando la regla 44 (enum_values)


estado 114

   45 enum_values: enum_values ',' IDENTIFIER . '=' INTEGER_LITERAL

    '='  desplazar e ir al estado 123


estado 115

   34 numeric_type: KW_NUMERIC '(' expr ',' expr ')' .

    $default  reduce usando la regla 34 (numeric_type)


estado 116

   32 numeric_type: KW_NUMERIC '(' expr ',' expr ']' .

    $default  reduce usando la regla 32 (numeric_type)


estado 117

   33 numeric_type: KW_NUMERIC '[' expr ',' expr ')' .

    $default  reduce usando la regla 33 (numeric_type)


estado 118

   31 numeric_type: KW_NUMERIC '[' expr ',' expr ']' .

    $default  reduce usando la regla 31 (numeric_type)


estado 119

   38 int_type: KW_INT '(' expr ',' expr ')' .

    $default  reduce usando la regla 38 (int_type)


estado 120

   36 int_type: KW_INT '(' expr ',' expr ']' .

    $default  reduce usando la regla 36 (int_type)


estado 121

   37 int_type: KW_INT '[' expr ',' expr ')' .

    $default  reduce usando la regla 37 (int_type)


estado 122

   35 int_type: KW_INT '[' expr ',' expr ']' .

    $default  reduce usando la regla 35 (int_type)


estado 123

   45 enum_values: enum_values ',' IDENTIFIER '=' . INTEGER_LITERAL

    INTEGER_LITERAL  desplazar e ir al estado 124


estado 124

   45 enum_values: enum_values ',' IDENTIFIER '=' INTEGER_LITERAL .

    $default  reduce usando la regla 45 (enum_values)
