From 5c64369b42f2d66effb40ae1cfed8e467b1e863c Mon Sep 17 00:00:00 2001
From: mb <mb@o-log-n.com>
Date: Tue, 5 Apr 2016 17:39:39 -0300
Subject: [PATCH] Added basic HareIDL attribute support.

---
 include/clang/Basic/Attr.td     |  7 +++++++
 include/clang/Basic/AttrDocs.td |  7 +++++++
 lib/Sema/SemaDeclAttr.cpp       | 27 +++++++++++++++++++++++++++
 3 files changed, 41 insertions(+)

diff --git a/include/clang/Basic/Attr.td b/include/clang/Basic/Attr.td
index d5ba722..6343fe7 100644
--- a/include/clang/Basic/Attr.td
+++ b/include/clang/Basic/Attr.td
@@ -2170,3 +2170,10 @@ def InternalLinkage : InheritableAttr {
   let Subjects = SubjectList<[Var, Function, CXXRecord]>;
   let Documentation = [InternalLinkageDocs];
 }
+
+def HareCXXRecord : InheritableAttr {
+  let Spellings = [CXX11<"hare","idl">];
+  let Args = [VariadicStringArgument<"Argument">];
+  let Subjects = SubjectList<[CXXRecord]>;
+  let Documentation = [HareCXXRecordDocs];
+}
diff --git a/include/clang/Basic/AttrDocs.td b/include/clang/Basic/AttrDocs.td
index 2567d55..44d0ba0 100644
--- a/include/clang/Basic/AttrDocs.td
+++ b/include/clang/Basic/AttrDocs.td
@@ -1859,3 +1859,10 @@ Marking virtual functions as ``disable_tail_calls`` is legal.
 
   }];
 }
+
+def HareCXXRecordDocs : Documentation {
+  let Category = DocCatFunction;
+  let Content = [{
+A class or struct declared as with ``[[hare::idl]]`` shall be involved in Hare-IDL interaction.
+  }];
+}
diff --git a/lib/Sema/SemaDeclAttr.cpp b/lib/Sema/SemaDeclAttr.cpp
index f94c822..9ae24e4 100644
--- a/lib/Sema/SemaDeclAttr.cpp
+++ b/lib/Sema/SemaDeclAttr.cpp
@@ -3963,6 +3963,30 @@ static void handleTypeTagForDatatypeAttr(Sema &S, Decl *D,
                                     Attr.getAttributeSpellingListIndex()));
 }
 
+static void handleHareCXXRecordAttr(Sema &S, Decl *D, const AttributeList &Attr) {
+//  if (!checkAttributeAtLeastNumArgs(S, Attr, 1))
+//    return;
+
+  std::vector<std::string> Arguments;
+
+  for (unsigned I = 0, E = Attr.getNumArgs(); I != E; ++I) {
+    StringRef ArgumentValue;
+    SourceLocation LiteralLoc;
+
+    if (!S.checkStringLiteralArgumentAttr(Attr, I, ArgumentValue, &LiteralLoc))
+      return;
+
+//    if (parseSanitizerValue(ArgumentsName, /*AllowGroups=*/true) == 0)
+//      S.Diag(LiteralLoc, diag::warn_unknown_sanitizer_ignored) << ArgumentsName;
+
+    Arguments.push_back(ArgumentValue);
+  }
+
+  D->addAttr(::new (S.Context) HareCXXRecordAttr(
+      Attr.getRange(), S.Context, Arguments.data(), Arguments.size(),
+      Attr.getAttributeSpellingListIndex()));
+}
+
 //===----------------------------------------------------------------------===//
 // Checker-specific attribute handlers.
 //===----------------------------------------------------------------------===//
@@ -5466,6 +5490,9 @@ static void ProcessDeclAttribute(Sema &S, Scope *scope, Decl *D,
   case AttributeList::AT_TypeTagForDatatype:
     handleTypeTagForDatatypeAttr(S, D, Attr);
     break;
+  case AttributeList::AT_HareCXXRecord:
+      handleHareCXXRecordAttr(S, D, Attr);
+      break;
   }
 }
 
-- 
2.6.4.windows.1

