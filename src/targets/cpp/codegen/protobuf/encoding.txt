
@@--------   SERIALIZATION   --------


@@BEGIN-TEMPLATE NAME="SERIALIZATION-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="SERIALIZE-STRUCT-DECLARE-FN-ONLY" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="SERIALIZE-DU-DECLARE-FN-ONLY" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="SERIALIZATION-GENERATE-DECLARATIONS"


@@BEGIN-TEMPLATE NAME="SERIALIZATION-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="SERIALIZE-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="SERIALIZE-DU" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END

@@END-TEMPLATE NAME="SERIALIZATION-GENERATE-IMPLEMENTATIONS"



@@BEGIN-TEMPLATE NAME="SERIALIZE-DU-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
void serialize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s, OStream& o );
@@END-TEMPLATE NAME="SERIALIZE-DU-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="SERIALIZE-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
void serialize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s, OStream& o ) {
@@LET LOCAL-IS-OWNING-PTR = PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" )
@@IF LOCAL-IS-OWNING-PTR.HAS-VALUE()
  
  if(s.get() == nullptr) {
    return;
  }
   @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
   @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
     @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
     @@IF LOCAL-POLY-PTR.HAS-VALUE()
       else if ( typeid( *s ) == typeid( @LOCAL-POLY-PTR@ ) ) {
         auto ptr = dynamic_cast<@LOCAL-POLY-PTR@*>(s.get());
      @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="*ptr" PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMBER=LOCAL-MEMBER PARAM-MEMCTR=LOCAL-MEMCTR

       }
    @@ENDIF
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   @@FOR-EACH END
   else {
     ;// TODO assert?
   }
@@ELSE
   @@ASSERT "0" MSG="Cannot process discriminated union for serialization: name=@PARAM-DU.STRUCT-NAME()@"
@@ENDIF
}
@@END-TEMPLATE NAME="SERIALIZE-DU"



@@BEGIN-TEMPLATE NAME="SERIALIZE-STRUCT-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
void serialize@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s, OStream& o );
@@END-TEMPLATE NAME="SERIALIZE-STRUCT-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="SERIALIZE-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
void serialize@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.STRUCT-NAME()@& s, OStream& o ) {
   @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="SERIALIZE-STRUCT"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=PARAM-MEMCTR
@@END-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="SERIALIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
    o.writeUInt(@PARAM-MEMCTR@, @PARAM-NAME@);
  @@ELSE
    o.writeInt(@PARAM-MEMCTR@, @PARAM-NAME@);
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
    o.writeDouble(@PARAM-MEMCTR@, @PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
    o.writeDouble(@PARAM-MEMCTR@, @PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
    o.writeString(@PARAM-MEMCTR@, @PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-STRUCTURE()
    size_t sz_@PARAM-MEMCTR@ = getSize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
    o.writeObjectTagAndSize(@PARAM-MEMCTR@, sz_@PARAM-MEMCTR@);
    serialize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@, o);
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
   @@DBG-PRINT "[---0---], PARAM-TYPE = @PARAM-TYPE@"
    size_t sz_@PARAM-MEMCTR@ = getSize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
    o.writeObjectTagAndSize(@PARAM-MEMCTR@, sz_@PARAM-MEMCTR@);
  @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="*(@PARAM-NAME@)" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
@@ELIF PARAM-TYPE.IS-ENUM()
    o.writeUInt(@PARAM-MEMCTR@, @PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-SEQUENCE()
    for(const auto& item:@PARAM-NAME@) {
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
    for(const auto& item:@PARAM-NAME@) {
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="SERIALIZE-ENUM-VALUE"
@@ASSERT IS-ENUM-VALUE(PARAM-ENUM-VALUE)
        case @PARAM-ENUM-VALUE.MAPPING-ENUM-VALUE-VALUE()@ /*@PARAM-ENUM-VALUE.ENUM-VALUE-NAME()@*/: o.write_@PARAM-TYPE@( @PARAM-ENUM-VALUE.ENCODING-ENUM-VALUE-VALUE()@ ); break;
@@END-TEMPLATE NAME="SERIALIZE-ENUM-VALUE"






@@--------   DESERIALIZATION   --------


@@BEGIN-TEMPLATE NAME="DESERIALIZATION-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="DESERIALIZE-STRUCT-DECLARE-FN-ONLY" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="DESERIALIZE-DU-DECLARE-FN-ONLY" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="DESERIALIZATION-GENERATE-DECLARATIONS"


@@BEGIN-TEMPLATE NAME="DESERIALIZATION-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="DESERIALIZE-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="DESERIALIZE-DU" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END
  
@@END-TEMPLATE NAME="DESERIALIZATION-GENERATE-IMPLEMENTATIONS"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
bool deserialize@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.MAPPING-STRUCT-NAME()@& s, IStream& i );
@@END-TEMPLATE NAME="DESERIALIZE-DU-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
bool deserialize@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.MAPPING-STRUCT-NAME()@& s, IStream& i ) {
   int type;
   int fieldNumber;
   bool readret;
   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-DU.MEMBERS()
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   const int memcnt = @LOCAL-MEMCTR@;
   uint8_t initFlags[memcnt] = { 0 };
   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-DU.MEMBERS()
      @@INCLUDE TEMPLATE="DESERIALIZE-TYPE-INIT" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   do
   {
      readret = i.readFieldTypeAndID( type, fieldNumber );
    if ( !readret )
      break;
    switch ( fieldNumber )
    {
  @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
   @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
     @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
     @@IF LOCAL-POLY-PTR.HAS-VALUE()
       case @LOCAL-MEMCTR@:
       {
       //else if ( typeid( *s ) == typeid( @LOCAL-POLY-PTR@ ) ) 
         unique_ptr<@LOCAL-POLY-PTR@> ptr(new @LOCAL-POLY-PTR@);
         @@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="*ptr" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR
         s = move(ptr);
       }
       break;
    @@ENDIF
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   @@FOR-EACH END

    default:
    {
      // TODO: what?
      break;
    }
    }
   }
   while ( 1 ); // TODO: stop criterion (except the end of the message?

   bool OK = true;
   for ( int i=0; i<memcnt; i++ )
     OK = OK || initFlags[i] != 0;

   return OK;
}
@@END-TEMPLATE NAME="DESERIALIZE-DU"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU-OPTION"
@@ASSERT IS-DU-OPTION(PARAM-DU-OPTION)
   @@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OPTION.MEMBERS()
      @@INCLUDE TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMBER=LOCAL-MEMBER PARAM-MEMCTR=PARAM-MEMCTR
   @@FOR-EACH END
@@END-TEMPLATE NAME="DESERIALIZE-DU-OPTION"



@@BEGIN-TEMPLATE NAME="DESERIALIZE-STRUCT-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
bool deserialize@PARAM-STRUCT.STRUCT-NAME()@( @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s, IStream& i );
@@END-TEMPLATE NAME="DESERIALIZE-STRUCT-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
bool deserialize@PARAM-STRUCT.STRUCT-NAME()@( @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s, IStream& i ) {
   int type;
   int fieldNumber;
   bool readret;
   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   const int memcnt = @LOCAL-MEMCTR@;
   uint8_t initFlags[memcnt] = { 0 };
   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="DESERIALIZE-TYPE-INIT" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   do
   {
      readret = i.readFieldTypeAndID( type, fieldNumber );
	  if ( !readret )
		  break;
	  switch ( fieldNumber )
	  {
   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMBER=LOCAL-MEMBER PARAM-MEMCTR=LOCAL-MEMCTR
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
		default:
		{
			// TODO: what?
			break;
		}
	  }
   }
   while ( 1 ); // TODO: stop criterion (except the end of the message?

   bool OK = true;
   for ( int i=0; i<memcnt; i++ )
     OK = OK && initFlags[i] != 0;

   return OK;
}

@@END-TEMPLATE NAME="DESERIALIZE-STRUCT"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@LET LOCAL-TMP1=PARAM-MEMCTR+1
    case @LOCAL-TMP1@:
    {
@@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=PARAM-MEMCTR
      break;
    }
@@END-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="DECLARE-PTR-TO-OBJECT-OF-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
	   @PARAM-TYPE.ENCODING-MEMBER-TYPE()@* @PARAM-NAME@ = new @PARAM-TYPE.ENCODING-MEMBER-TYPE()@;
@@END-TEMPLATE NAME="DECLARE-PTR-TO-OBJECT-OF-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE-INIT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.IS-SEQUENCE()) || (PARAM-TYPE.IS-DICTIONARY())
  initFlags[@PARAM-MEMCTR@] = true;
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE-INIT"



@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
    @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(1)
      uint64_t temp = 0;
      initFlags[@PARAM-MEMCTR@] = i.readVariantUInt64( temp );
      @PARAM-NAME@ = static_cast<bool>( temp );
    @@ELIF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(63)
      uint64_t temp = 0;
      initFlags[@PARAM-MEMCTR@] = i.readVariantUInt64( temp );
      @PARAM-NAME@ = temp;
    @@ELIF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(64)
      initFlags[@PARAM-MEMCTR@] = i.readVariantUInt64( @PARAM-NAME@ );
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ELSE
    @@IF PARAM-TYPE.IS-SIGNED-INTEGER-FITTING-INT(63)
      int64_t temp = 0;
      initFlags[@PARAM-MEMCTR@] = i.readVariantInt64( temp );
      @PARAM-NAME@ = temp;
    @@ELIF PARAM-TYPE.IS-SIGNED-INTEGER-FITTING-INT(64)
      initFlags[@PARAM-MEMCTR@] = i.readVariantInt64( @PARAM-NAME@ );
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
   @@ASSERT "0" MSG="Cannot process member for deserialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  @@IF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(53,11)
      initFlags[@PARAM-MEMCTR@] = i.readFixed64Bit( @PARAM-NAME@ );
  @@ELSE
    @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
  @@ENDIF
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
     initFlags[@PARAM-MEMCTR@] = i.readString( @PARAM-NAME@ );
@@ELIF PARAM-TYPE.IS-STRUCTURE()
    uint64_t sz_@PARAM-MEMCTR@ = 0;
    i.readVariantUInt64(sz_@PARAM-MEMCTR@);
    IStream is_@PARAM-MEMCTR@ = i.makeSubStream(sz_@PARAM-MEMCTR@);
    initFlags[@PARAM-MEMCTR@] = deserialize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@, is_@PARAM-MEMCTR@);
@@ELIF PARAM-TYPE.IS-ENUM()
  @@ASSERT "0" MSG="Cannot process member for deserialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ELIF PARAM-TYPE.IS-SEQUENCE()
      @PARAM-TYPE.COLLECTION-TYPE().ENCODING-MEMBER-TYPE()@ temp2;
      @@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="temp2" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE() PARAM-MEMCTR=PARAM-MEMCTR
      @PARAM-NAME@.push_back(temp2);
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for deserialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE"
@@ASSERT IS-ENUM-VALUE(PARAM-ENUM-VALUE)
	      case @PARAM-ENUM-VALUE.ENCODING-ENUM-VALUE-VALUE()@: @PARAM-NAME@ = s.@PARAM-ENUM-VALUE.ENUM-VALUE-NAME()@; break;
@@END-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE"




@@--------   PRINTING   --------



@@BEGIN-TEMPLATE NAME="PRINTING-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="PRINT-STRUCT-DECLARE-FN-ONLY" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="PRINT-DU-DECLARE-FN-ONLY" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="PRINTING-GENERATE-DECLARATIONS"


@@BEGIN-TEMPLATE NAME="PRINTING-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="PRINT-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="PRINT-DU" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END  
@@END-TEMPLATE NAME="PRINTING-GENERATE-IMPLEMENTATIONS"


@@BEGIN-TEMPLATE NAME="PRINT-DU-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
void print@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.MAPPING-STRUCT-NAME()@& s );
@@END-TEMPLATE NAME="PRINT-DU-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="PRINT-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
void print@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.MAPPING-STRUCT-NAME()@& s ) {
@FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE(PARAM-DU, "s", "TMP")@
/*   switch ( TMP )
   {
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
      @@INCLUDE TEMPLATE="PRINT-DU-OPTION" PARAM-DU-OPTION=LOCAL-DU-OPTION
   @@FOR-EACH END
   }*/
}

@@END-TEMPLATE NAME="PRINT-DU"

@@BEGIN-TEMPLATE NAME="PRINT-DU-OPTION"
@@ASSERT IS-DU-OPTION(PARAM-DU-OPTION)
      case @PARAM-DU-OPTION.MAPPING-DISCRIMINATED-UNION-OPTION-VALUE()@:
	  {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OPTION.MEMBERS()
      @@INCLUDE TEMPLATE="PRINT-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMBER=LOCAL-MEMBER
   @@FOR-EACH END
         break;
      }
@@END-TEMPLATE NAME="PRINT-DU-OPTION"


@@BEGIN-TEMPLATE NAME="DISCRIMINATED-UNION-GET-DISCRIMINATOR"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
	      @PARAM-NAME@ != nullptr
@@END-TEMPLATE NAME="DISCRIMINATED-UNION-GET-DISCRIMINATOR"



@@BEGIN-TEMPLATE NAME="PRINT-STRUCT-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
void print@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s );
@@END-TEMPLATE NAME="PRINT-STRUCT-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="PRINT-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
void print@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s ) {
   @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
/*    cout << "@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@: ";
	cout << 
      @@INCLUDE TEMPLATE="PRINT-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMBER=LOCAL-MEMBER
	  ;
    cout << endl;*/
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="PRINT-STRUCT"


@@BEGIN-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="PRINT-TYPE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE()
@@END-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="PRINT-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
   @PARAM-NAME@ 
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
   @PARAM-NAME@ 
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
   @PARAM-NAME@ 
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
   @PARAM-NAME@ 
@@ELIF PARAM-TYPE.IS-STRUCTURE()
  "TODO"
@@ELIF PARAM-TYPE.IS-ENUM()
   @PARAM-NAME@ 
@@ELIF PARAM-TYPE.IS-SEQUENCE()
    "TODO"
@@ELIF PARAM-TYPE.IS-DICTIONARY()
    "TODO"
@@ELSE
@@ASSERT "0" MSG="Cannot process member for printing: name=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="PRINT-TYPE"


@@--------   GET-SIZE   --------


@@BEGIN-TEMPLATE NAME="GET-SIZE-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="GET-SIZE-STRUCT-DECLARE-FN-ONLY" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="GET-SIZE-DU-DECLARE-FN-ONLY" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="GET-SIZE-GENERATE-DECLARATIONS"


@@BEGIN-TEMPLATE NAME="GET-SIZE-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="GET-SIZE-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="GET-SIZE-DU" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END

@@END-TEMPLATE NAME="GET-SIZE-GENERATE-IMPLEMENTATIONS"



@@BEGIN-TEMPLATE NAME="GET-SIZE-DU-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
size_t getSize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s );
@@END-TEMPLATE NAME="GET-SIZE-DU-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="GET-SIZE-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
size_t getSize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s ) {
@@LET LOCAL-IS-OWNING-PTR = PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" )
@@IF LOCAL-IS-OWNING-PTR.HAS-VALUE()
  

     size_t sz = 0;
  if(s.get() == nullptr) {
    return sz;
  }
   @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
   @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
     @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
     @@IF LOCAL-POLY-PTR.HAS-VALUE()
       else if ( typeid( *s ) == typeid( @LOCAL-POLY-PTR@ ) ) {
         auto ptr = dynamic_cast<@LOCAL-POLY-PTR@*>(s.get());
      @@INCLUDE TEMPLATE="GET-SIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="*ptr" PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR

       }
    @@ENDIF
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   @@FOR-EACH END
   else {
     ;// TODO assert?
   }
   return sz;
@@ELSE
   @@ASSERT "0" MSG="Cannot process discriminated union for size calculation: name=@PARAM-DU.STRUCT-NAME()@"
@@ENDIF
}
@@END-TEMPLATE NAME="GET-SIZE-DU"


@@BEGIN-TEMPLATE NAME="GET-SIZE-STRUCT-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
size_t getSize@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s );
@@END-TEMPLATE NAME="GET-SIZE-STRUCT-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="GET-SIZE-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
size_t getSize@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.STRUCT-NAME()@& s ) {
   size_t sz = 0;
   @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      
      @@INCLUDE TEMPLATE="GET-SIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   
   return sz;
}

@@END-TEMPLATE NAME="GET-SIZE-STRUCT"


@@BEGIN-TEMPLATE NAME="GET-SIZE-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=PARAM-MEMCTR
@@END-TEMPLATE NAME="GET-SIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="GET-SIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  sz += getTagSize(@PARAM-MEMCTR@);
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
  sz += getUnsignedVarIntSize(@PARAM-NAME@);
  @@ELSE
  sz += getSignedVarIntSize(@PARAM-NAME@);
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getFixedSize(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getFixedSize(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getUnsignedVarIntSize(@PARAM-NAME@.size());
  sz += @PARAM-NAME@.size();
@@ELIF PARAM-TYPE.IS-STRUCTURE()
  sz += getTagSize(@PARAM-MEMCTR@);
  size_t sz_@PARAM-MEMCTR@ = getSize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
  sz += getUnsignedVarIntSize(sz_@PARAM-MEMCTR@);
  sz += sz_@PARAM-MEMCTR@;
@@ELIF PARAM-TYPE.IS-ENUM()
      @@ASSERT "0" MSG="Cannot process member for size: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ELIF PARAM-TYPE.IS-SEQUENCE()
    @@IF (PARAM-TYPE.COLLECTION-TYPE().IS-SEQUENCE())
      @@ASSERT "0" MSG="Cannot process member for size: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
    @@ENDIF
    for(const auto& item:@PARAM-NAME@) {
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
    for(auto item:@PARAM-NAME@) {
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for size: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="GET-SIZE-TYPE"








