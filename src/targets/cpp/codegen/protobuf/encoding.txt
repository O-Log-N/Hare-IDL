

@@--------   COMMON FUNCTIONS   --------

@@BEGIN-FUNCTION NAME="FUNCTION-GET-REF-TO-MEMBER" PARAM-STRUCT-NAME PARAM-MEMBER
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@LET LOCAL-IS-PARENT = PARAM-MEMBER.GET-MAPPING-ANNOTATION( "PARENT" )
@@IF LOCAL-IS-PARENT.HAS-VALUE()
   @@RETURN "@PARAM-STRUCT-NAME@"
@@ENDIF
   @@RETURN "@PARAM-STRUCT-NAME@.@PARAM-MEMBER.MAPPING-MEMBER-NAME()@"
@@END-FUNCTION NAME="FUNCTION-GET-REF-TO-MEMBER"

@@BEGIN-FUNCTION NAME="FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE" PARAM-DU PARAM-DU-NAME PARAM-TEMP-NAME
   @@-DBG-PRINT "[---0---], PARAM-DU-NAME = @PARAM-DU-NAME@"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@LET LOCAL-IS-OWNING-PTR = PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" )
@@IF LOCAL-IS-OWNING-PTR.HAS-VALUE()
   @@LET LOCAL-STARTING-PART = "uint8_t @PARAM-TEMP-NAME@; "
   @@FOR-EACH LOCAL-OPTION IN PARAM-DU.DISCRIMINATED-UNION-DISCRIMINATOR().MEMBER-TYPE().ENUM-VALUES()
   @@IF LOCAL-OPTION.ENUM-VALUE-NAME() == "nullptr"
      @@LET LOCAL-TMP="if ( @PARAM-DU-NAME@ == nullptr ) @PARAM-TEMP-NAME@ = @LOCAL-OPTION.ENCODING-ENUM-VALUE-VALUE()@; "
      @@LET LOCAL-STARTING-PART = LOCAL-STARTING-PART + LOCAL-TMP
   @@ENDIF
   @@FOR-EACH END
   @@FOR-EACH LOCAL-OPTION IN PARAM-DU.DISCRIMINATED-UNION-DISCRIMINATOR().MEMBER-TYPE().ENUM-VALUES()
   @@IF LOCAL-OPTION.ENUM-VALUE-NAME() != "nullptr"
      @@LET LOCAL-TMP="else if ( typeid( *(@PARAM-DU-NAME@) ) == typeid( @LOCAL-OPTION.ENUM-VALUE-NAME()@ ) ) @PARAM-TEMP-NAME@ = @LOCAL-OPTION.ENCODING-ENUM-VALUE-VALUE()@; "
      @@LET LOCAL-STARTING-PART = LOCAL-STARTING-PART + LOCAL-TMP
   @@ENDIF
   @@FOR-EACH END
   @@LET LOCAL-STARTING-PART = LOCAL-STARTING-PART + "else assert( false );"
   @@RETURN LOCAL-STARTING-PART
@@ELSE
   @@RETURN "uint8_t @PARAM-TEMP-NAME@ = (@PARAM-DU-NAME@.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@);"
@@ENDIF
@@END-FUNCTION NAME="FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE"


@@--------   SERIALIZATION   --------


@@BEGIN-TEMPLATE NAME="SERIALIZATION-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="SERIALIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="SERIALIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
@@END-TEMPLATE NAME="SERIALIZATION-GENERATE-DECLARATIONS"

@@BEGIN-TEMPLATE NAME="SERIALIZE-DECLARE-FN-ONLY"
void serialize@PARAM-NAME@( const @PARAM-MAPPING-NAME@& s, OProtobufStream& o );
@@END-TEMPLATE NAME="SERIALIZE-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="SERIALIZATION-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="SERIALIZE-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="SERIALIZE-DU" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="SERIALIZATION-GENERATE-IMPLEMENTATIONS"


@@BEGIN-TEMPLATE NAME="SERIALIZE-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
void serialize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s, OProtobufStream& o ) {
  @FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE(PARAM-DU, "s", "disc")@
  o.writeUInt( 1, disc );
  switch ( disc )
  {
  @@LET LOCAL-MEMCTR=2
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    case @LOCAL-DU-OPTION.ENCODING-DISCRIMINATED-UNION-OPTION-VALUE()@:
    {
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
      @@IF LOCAL-POLY-PTR.HAS-VALUE()
      auto ptr = dynamic_cast<@LOCAL-POLY-PTR@*>(s.get());
        @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="*ptr" PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMBER=LOCAL-MEMBER PARAM-MEMCTR=LOCAL-MEMCTR
      @@ELSE
        @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMBER=LOCAL-MEMBER PARAM-MEMCTR=LOCAL-MEMCTR
      @@ENDIF
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
    }
    break;
  @@FOR-EACH END
    //default:
      //assert( false );
  }
}
@@END-TEMPLATE NAME="SERIALIZE-DU"


@@BEGIN-TEMPLATE NAME="SERIALIZE-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
void serialize@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.STRUCT-NAME()@& s, OProtobufStream& o ) {
   @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="SERIALIZE-STRUCT"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=PARAM-MEMCTR
@@END-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="SERIALIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
    o.writeUInt(@PARAM-MEMCTR@, @PARAM-NAME@);
  @@ELSE
    o.writeInt(@PARAM-MEMCTR@, @PARAM-NAME@);
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
    o.writeDouble(@PARAM-MEMCTR@, @PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
    o.writeDouble(@PARAM-MEMCTR@, @PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
    o.writeString(@PARAM-MEMCTR@, @PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-STRUCTURE()
    size_t sz_@PARAM-MEMCTR@ = protobufGetSize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
    o.writeObjectTagAndSize(@PARAM-MEMCTR@, sz_@PARAM-MEMCTR@);
    serialize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@, o);
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
   @@DBG-PRINT "[---0---], PARAM-TYPE = @PARAM-TYPE@"
    size_t sz_@PARAM-MEMCTR@ = protobufGetSize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
    o.writeObjectTagAndSize(@PARAM-MEMCTR@, sz_@PARAM-MEMCTR@);
  @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="*(@PARAM-NAME@)" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
@@ELIF PARAM-TYPE.IS-ENUM()
    switch ( @PARAM-NAME@ )
    {
   @@LET LOCAL-ENCODING-MEMBER-TYPE="@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
   @@FOR-EACH LOCAL-ENUM-VAL IN PARAM-TYPE.ENUM-VALUES()
      @@INCLUDE TEMPLATE="SERIALIZE-ENUM-VALUE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=LOCAL-ENCODING-MEMBER-TYPE PARAM-ENUM-VALUE=LOCAL-ENUM-VAL PARAM-MEMCTR=PARAM-MEMCTR
   @@FOR-EACH END
        default: assert( false );
    }
@@ELIF PARAM-TYPE.IS-SEQUENCE()
    for(const auto& item:@PARAM-NAME@) {
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
    for(const auto& item:@PARAM-NAME@) {
      {
      size_t sz = 0;
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2() PARAM-MEMCTR="1"
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE() PARAM-MEMCTR="2"
//      sz += getUnsignedVarIntSize(sz);
      o.writeObjectTagAndSize(@PARAM-MEMCTR@, sz);
      }
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2() PARAM-MEMCTR="1"
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE() PARAM-MEMCTR="2"
    }

@@ELSE
  @@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="SERIALIZE-ENUM-VALUE"
@@ASSERT IS-ENUM-VALUE(PARAM-ENUM-VALUE)
        case @PARAM-ENUM-VALUE.MAPPING-ENUM-VALUE-VALUE()@ /*@PARAM-ENUM-VALUE.ENUM-VALUE-NAME()@*/: o.writeUInt(@PARAM-MEMCTR@, @PARAM-ENUM-VALUE.ENCODING-ENUM-VALUE-VALUE()@ ); break;
@@END-TEMPLATE NAME="SERIALIZE-ENUM-VALUE"






@@--------   DESERIALIZATION   --------


@@BEGIN-TEMPLATE NAME="DESERIALIZATION-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="DESERIALIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="DESERIALIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
@@END-TEMPLATE NAME="DESERIALIZATION-GENERATE-DECLARATIONS"

@@BEGIN-TEMPLATE NAME="DESERIALIZE-DECLARE-FN-ONLY"
bool deserialize@PARAM-NAME@( @PARAM-MAPPING-NAME@& s, IProtobufStream& i );
@@END-TEMPLATE NAME="DESERIALIZE-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="DESERIALIZATION-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)

  @@INCLUDE TEMPLATE="DISCARD-UNEXPECTED-FIELD"

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="DESERIALIZE-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="DESERIALIZE-DU" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END
  
@@END-TEMPLATE NAME="DESERIALIZATION-GENERATE-IMPLEMENTATIONS"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
bool deserialize@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.MAPPING-STRUCT-NAME()@& s, IProtobufStream& i ) {

   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-DU.MEMBERS()
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   const int memcnt = @LOCAL-MEMCTR@;
   bool initFlags[memcnt] = { false };
   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-DU.MEMBERS()
      @@INCLUDE TEMPLATE="DESERIALIZE-TYPE-INIT" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-FLAG="initFlags[@LOCAL-MEMCTR@]"
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
    uint64_t disc = 0;
    bool readDisc = false;

    int fieldType;
    int fieldNumber;
    bool readOk = true;

  while(!i.isEndOfStream())
  {
    readOk = i.readFieldTypeAndID( fieldType, fieldNumber );
    if ( !readOk )
      return false;
    switch ( fieldNumber )
    {
      case 1:
       readOk = i.readVariantUInt64( disc );
       readDisc = true;
       break;
  @@LET LOCAL-MEMCTR=0
    @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@LET LOCAL-TMP1=LOCAL-MEMCTR+2
      case @LOCAL-TMP1@:
      {
      @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
      @@IF LOCAL-POLY-PTR.HAS-VALUE()
        std::unique_ptr<@LOCAL-POLY-PTR@> ptr(new @LOCAL-POLY-PTR@);
        @@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="*ptr" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE()
        s = std::move(ptr);
      @@ELSE
        @@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE()
      @@ENDIF
   
      }
      initFlags[@LOCAL-MEMCTR@] = true;
      break;
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
    @@FOR-EACH END
    @@FOR-EACH END

    default:
      readOk = discardUnexpectedField( fieldType, i );
    }
    if ( !readOk )
      return false;
  }

  if( !readDisc )
    return false;

  switch (disc) {
  @@LET LOCAL-MEMCTR=0
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    case @LOCAL-DU-OPTION.ENCODING-DISCRIMINATED-UNION-OPTION-VALUE()@:
      @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      readOk = readOk && initFlags[@LOCAL-MEMCTR@];
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
      @@FOR-EACH END
      break;
  @@FOR-EACH END
    //default:
      //return false;
  }  

  return readOk;
}
@@END-TEMPLATE NAME="DESERIALIZE-DU"



@@BEGIN-TEMPLATE NAME="DESERIALIZE-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
bool deserialize@PARAM-STRUCT.STRUCT-NAME()@( @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s, IProtobufStream& i ) {
   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   const int memcnt = @LOCAL-MEMCTR@;
   bool initFlags[memcnt] = { false };
   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="DESERIALIZE-TYPE-INIT" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-FLAG="initFlags[@LOCAL-MEMCTR@]"
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END

  while(!i.isEndOfStream())
  {
    int fieldType;
    int fieldNumber;

    bool readOk = i.readFieldTypeAndID( fieldType, fieldNumber );
	  if ( !readOk )
		  return false;
	  switch ( fieldNumber )
	  {
   @@LET LOCAL-MEMCTR=0
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
     @@LET LOCAL-TMP1=LOCAL-MEMCTR+1
    case @LOCAL-TMP1@:
    {
      @@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE()
    }
    initFlags[@LOCAL-MEMCTR@] = true;
    break;
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
		default:
      readOk = discardUnexpectedField( fieldType, i );
	  }
    if( !readOk )
      return false;
  }

  bool OK = true;
  for ( int i=0; i<memcnt; i++ )
    OK = OK && initFlags[i] != 0;

  return OK;
}

@@END-TEMPLATE NAME="DESERIALIZE-STRUCT"



@@BEGIN-TEMPLATE NAME="DECLARE-PTR-TO-OBJECT-OF-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
	   @PARAM-TYPE.ENCODING-MEMBER-TYPE()@* @PARAM-NAME@ = new @PARAM-TYPE.ENCODING-MEMBER-TYPE()@;
@@END-TEMPLATE NAME="DECLARE-PTR-TO-OBJECT-OF-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE-INIT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.IS-SEQUENCE()) || (PARAM-TYPE.IS-DICTIONARY())
  @PARAM-FLAG@ = true;
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE-INIT"



@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
    @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(1)
      uint64_t temp = 0;
      readOk = i.readVariantUInt64( temp );
      @PARAM-NAME@ = static_cast<bool>( temp );
    @@ELIF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(63)
      uint64_t temp = 0;
      readOk = i.readVariantUInt64( temp );
      @PARAM-NAME@ = temp;
    @@ELIF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(64)
      readOk = i.readVariantUInt64( @PARAM-NAME@ );
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ELSE
    @@IF PARAM-TYPE.IS-SIGNED-INTEGER-FITTING-INT(63)
      int64_t temp = 0;
      readOk = i.readVariantInt64( temp );
      @PARAM-NAME@ = temp;
    @@ELIF PARAM-TYPE.IS-SIGNED-INTEGER-FITTING-INT(64)
      readOk = i.readVariantInt64( @PARAM-NAME@ );
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
   @@ASSERT "0" MSG="Cannot process member for deserialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  @@IF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(53,11)
      readOk = i.readFixed64Bit( @PARAM-NAME@ );
  @@ELSE
    @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
  @@ENDIF
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
      readOk = i.readString( @PARAM-NAME@ );
@@ELIF PARAM-TYPE.IS-STRUCTURE()
      uint64_t sz = 0;
      i.readVariantUInt64(sz);
      IProtobufStream is = i.makeSubStream(sz);
      readOk = deserialize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@, is);
@@ELIF PARAM-TYPE.IS-ENUM()
     uint64_t temp = 0;
     readOk = i.readVariantUInt64( temp );
     switch ( temp )
     {
   @@FOR-EACH LOCAL-ENUM-VALUE IN PARAM-TYPE.ENUM-VALUES()
      @@INCLUDE TEMPLATE="DESERIALIZE-ENUM-VALUE" PARAM-NAME="@PARAM-NAME@" PARAM-ENUM-VALUE=LOCAL-ENUM-VALUE
   @@FOR-EACH END
        default: return false;
     }
@@ELIF PARAM-TYPE.IS-SEQUENCE()
      @PARAM-TYPE.COLLECTION-TYPE().MAPPING-MEMBER-TYPE()@ temp;
      @@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="temp" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
      @PARAM-NAME@.push_back(std::move(temp));
@@ELIF PARAM-TYPE.IS-DICTIONARY()
  @@INCLUDE TEMPLATE="DESERIALIZE-DICTIONARY" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for deserialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DICTIONARY"
@@ASSERT PARAM-TYPE.IS-DICTIONARY()
  uint64_t sz = 0;
  i.readVariantUInt64(sz);
  IProtobufStream is = i.makeSubStream(sz);
  IProtobufStream& i = is;
  @PARAM-TYPE.COLLECTION-TYPE2().ENCODING-MEMBER-TYPE()@ key;
  @PARAM-TYPE.COLLECTION-TYPE().ENCODING-MEMBER-TYPE()@ value;
  bool initFlags[2] = { false };

  while(!i.isEndOfStream())
  {
    int fieldType;
    int fieldNumber;

    bool readOk = i.readFieldTypeAndID( fieldType, fieldNumber );
    if ( !readOk )
      return false;
  
    switch ( fieldNumber )
    {
        case 1:
    {
@@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="key" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
    }
     initFlags[0] = true;
     break;

    case 2:
    {
@@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="value" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
     initFlags[1] = true;
      break;

    default:
      readOk = discardUnexpectedField( fieldType, i );
    }

    if ( !readOk )
      return false;
   }
   
   readOk = initFlags[0] && initFlags[1];
   if(readOk)
     @PARAM-NAME@[key] = value;

@@END-TEMPLATE NAME="DESERIALIZE-DICTIONARY"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE"
@@ASSERT IS-ENUM-VALUE(PARAM-ENUM-VALUE)
	      case @PARAM-ENUM-VALUE.ENCODING-ENUM-VALUE-VALUE()@: @PARAM-NAME@ = s.@PARAM-ENUM-VALUE.ENUM-VALUE-NAME()@; break;
@@END-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE"

@@BEGIN-TEMPLATE NAME="DISCARD-UNEXPECTED-FIELD"
inline
bool discardUnexpectedField( int fieldType, IProtobufStream& i ) {

  // Unexpected field, just read and discard
  switch(fieldType)
  {
  case VARINT:
    {
      uint64_t temp;
      return i.readVariantUInt64( temp );
    }
    break;
  case FIXED_64_BIT:
    {
      double temp;
      return i.readFixed64Bit( temp );
    }
    break;
  case LENGTH_DELIMITED:
    {
      uint64_t sz;
      i.readVariantUInt64( sz );
      IProtobufStream is = i.makeSubStream( sz );
      string temp;
      return is.readString( temp );
    }
    break;
  case FIXED_32_BIT:
    {
      float temp;
//          readOk = i.readFixed32Bit( temp );
      return false;
    }
    break;
  default:
    return false;
  }
}
@@END-TEMPLATE NAME="DISCARD-UNEXPECTED-FIELD"



@@--------   GET-SIZE   --------


@@BEGIN-TEMPLATE NAME="GET-SIZE-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="GET-SIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="GET-SIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
@@END-TEMPLATE NAME="GET-SIZE-GENERATE-DECLARATIONS"

@@BEGIN-TEMPLATE NAME="GET-SIZE-DECLARE-FN-ONLY"
size_t protobufGetSize@PARAM-NAME@( const @PARAM-MAPPING-NAME@& s );
@@END-TEMPLATE NAME="GET-SIZE-DECLARE-FN-ONLY"

@@BEGIN-TEMPLATE NAME="GET-SIZE-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="GET-SIZE-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="GET-SIZE-DU" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="GET-SIZE-GENERATE-IMPLEMENTATIONS"



@@BEGIN-TEMPLATE NAME="GET-SIZE-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
size_t protobufGetSize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s ) {

  @FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE(PARAM-DU, "s", "disc")@

  size_t sz = 0;
  sz += getTagSize( 1 );
  sz += getUnsignedVarIntSize( disc );

  switch ( disc )
  {
  @@LET LOCAL-MEMCTR=2
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    case @LOCAL-DU-OPTION.ENCODING-DISCRIMINATED-UNION-OPTION-VALUE()@:
    {
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
      @@IF LOCAL-POLY-PTR.HAS-VALUE()
      auto ptr = dynamic_cast<@LOCAL-POLY-PTR@*>(s.get());
        @@INCLUDE TEMPLATE="GET-SIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="*ptr" PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR

      @@ELSE
        @@INCLUDE TEMPLATE="GET-SIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR
      @@ENDIF
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
    }
    break;
  @@FOR-EACH END
    //default:
      //assert( false );
  }
   return sz;
}
@@END-TEMPLATE NAME="GET-SIZE-DU"


@@BEGIN-TEMPLATE NAME="GET-SIZE-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
size_t protobufGetSize@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s ) {
   size_t sz = 0;
   @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      
      @@INCLUDE TEMPLATE="GET-SIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.ENCODING-MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   
   return sz;
}

@@END-TEMPLATE NAME="GET-SIZE-STRUCT"


@@BEGIN-TEMPLATE NAME="GET-SIZE-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=PARAM-MEMCTR
@@END-TEMPLATE NAME="GET-SIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="GET-SIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  sz += getTagSize(@PARAM-MEMCTR@);
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
  sz += getUnsignedVarIntSize(@PARAM-NAME@);
  @@ELSE
  sz += getSignedVarIntSize(@PARAM-NAME@);
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getFixedSize(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getFixedSize(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getUnsignedVarIntSize(@PARAM-NAME@.size());
  sz += @PARAM-NAME@.size();
@@ELIF PARAM-TYPE.IS-STRUCTURE()
  sz += getTagSize(@PARAM-MEMCTR@);
  size_t sz_@PARAM-MEMCTR@ = protobufGetSize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
  sz += getUnsignedVarIntSize(sz_@PARAM-MEMCTR@);
  sz += sz_@PARAM-MEMCTR@;
@@ELIF PARAM-TYPE.IS-ENUM()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getUnsignedVarIntSize(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-SEQUENCE()
    @@IF (PARAM-TYPE.COLLECTION-TYPE().IS-SEQUENCE())
      @@ASSERT "0" MSG="Cannot process member for size: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
    @@ENDIF
    for(const auto& item:@PARAM-NAME@) {
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
    for(const auto& item:@PARAM-NAME@) {
      sz += getTagSize(@PARAM-MEMCTR@);
      size_t sz_begin_@PARAM-MEMCTR@ = sz;
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2() PARAM-MEMCTR="1"
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE() PARAM-MEMCTR="2"
      sz += getUnsignedVarIntSize(sz - sz_begin_@PARAM-MEMCTR@);
    }
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for size: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="GET-SIZE-TYPE"








