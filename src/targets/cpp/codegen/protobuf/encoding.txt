

@@--------   COMMON FUNCTIONS   --------

@@BEGIN-FUNCTION NAME="FUNCTION-GET-REF-TO-MEMBER" PARAM-STRUCT-NAME PARAM-MEMBER
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@LET LOCAL-IS-PARENT = PARAM-MEMBER.GET-MAPPING-ANNOTATION( "PARENT" )
@@IF LOCAL-IS-PARENT.HAS-VALUE()
   @@RETURN "@PARAM-STRUCT-NAME@"
@@ENDIF
   @@RETURN "@PARAM-STRUCT-NAME@.@PARAM-MEMBER.MAPPING-MEMBER-NAME()@"
@@END-FUNCTION NAME="FUNCTION-GET-REF-TO-MEMBER"

@@BEGIN-FUNCTION NAME="FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE" PARAM-DU PARAM-DU-NAME PARAM-TEMP-NAME
   @@-DBG-PRINT "[---0---], PARAM-DU-NAME = @PARAM-DU-NAME@"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@LET LOCAL-IS-OWNING-PTR = PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" )
@@IF LOCAL-IS-OWNING-PTR.HAS-VALUE()
   @@LET LOCAL-STARTING-PART = "uint8_t @PARAM-TEMP-NAME@; "
   @@FOR-EACH LOCAL-OPTION IN PARAM-DU.DISCRIMINATED-UNION-DISCRIMINATOR().MEMBER-TYPE().ENUM-VALUES()
   @@IF LOCAL-OPTION.ENUM-VALUE-NAME() == "nullptr"
      @@LET LOCAL-TMP="if ( @PARAM-DU-NAME@ == nullptr ) @PARAM-TEMP-NAME@ = @LOCAL-OPTION.ENCODING-ENUM-VALUE-VALUE()@; "
      @@LET LOCAL-STARTING-PART = LOCAL-STARTING-PART + LOCAL-TMP
   @@ENDIF
   @@FOR-EACH END
   @@FOR-EACH LOCAL-OPTION IN PARAM-DU.DISCRIMINATED-UNION-DISCRIMINATOR().MEMBER-TYPE().ENUM-VALUES()
   @@IF LOCAL-OPTION.ENUM-VALUE-NAME() != "nullptr"
      @@LET LOCAL-TMP="else if ( typeid( *(@PARAM-DU-NAME@) ) == typeid( @LOCAL-OPTION.ENUM-VALUE-NAME()@ ) ) @PARAM-TEMP-NAME@ = @LOCAL-OPTION.ENCODING-ENUM-VALUE-VALUE()@; "
      @@LET LOCAL-STARTING-PART = LOCAL-STARTING-PART + LOCAL-TMP
   @@ENDIF
   @@FOR-EACH END
   @@LET LOCAL-STARTING-PART = LOCAL-STARTING-PART + "else assert( false );"
   @@RETURN LOCAL-STARTING-PART
@@ELSE
   @@RETURN "uint8_t @PARAM-TEMP-NAME@ = (@PARAM-DU-NAME@.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@);"
@@ENDIF
@@END-FUNCTION NAME="FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE"


@@--------   SERIALIZATION   --------


@@BEGIN-TEMPLATE NAME="SERIALIZATION-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="SERIALIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="SERIALIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
@@END-TEMPLATE NAME="SERIALIZATION-GENERATE-DECLARATIONS"

@@BEGIN-TEMPLATE NAME="SERIALIZE-DECLARE-FN-ONLY"
void serialize@PARAM-NAME@( const @PARAM-MAPPING-NAME@& s, OProtobufStream& o );
@@END-TEMPLATE NAME="SERIALIZE-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="SERIALIZATION-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="SERIALIZE-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
    @@IF LOCAL-PS-IT.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
      @@INCLUDE TEMPLATE="SERIALIZE-DU-OWNING-PTR" PARAM-DU=LOCAL-PS-IT
    @@ELSE
      @@INCLUDE TEMPLATE="SERIALIZE-DU" PARAM-DU=LOCAL-PS-IT
    @@ENDIF
  @@FOR-EACH END
@@END-TEMPLATE NAME="SERIALIZATION-GENERATE-IMPLEMENTATIONS"


@@BEGIN-FUNCTION NAME="FUNCTION-CREATE-DU-MEMBERS-MAP" PARAM-DU
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@LET LOCAL-MEMBERS=CREATE-MAP()
@@LET LOCAL-MEMCTR=1
@@FOR-EACH LOCAL-MEMBER IN PARAM-DU.MEMBERS()
    @@LET LOCAL-MEMBERS=LOCAL-MEMBERS.ASSIGN( LOCAL-MEMBER.MAPPING-MEMBER-NAME(), LOCAL-MEMCTR )
    @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
@@FOR-EACH END
@@RETURN LOCAL-MEMBERS
@@END-FUNCTION NAME="FUNCTION-CREATE-DU-MEMBERS-MAP"

@@BEGIN-TEMPLATE NAME="SERIALIZE-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
void serialize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s, OProtobufStream& o ) {

  @@LET LOCAL-MEMBERS-MAP=FUNCTION-CREATE-DU-MEMBERS-MAP(PARAM-DU)

  uint8_t disc = s.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@;
  o.writeUInt( @LOCAL-MEMBERS-MAP.FIND-IN-MAP( PARAM-DU.MAPPING-DISCRIMINATOR-NAME() )@, disc );
  switch ( disc )
  {
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    case @LOCAL-DU-OPTION.ENCODING-DISCRIMINATED-UNION-OPTION-VALUE()@:
    {
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMBERS-MAP.FIND-IN-MAP( LOCAL-MEMBER.MAPPING-MEMBER-NAME() )
    @@FOR-EACH END
    }
    break;
  @@FOR-EACH END
    default:
      assert( false );
  }
}
@@END-TEMPLATE NAME="SERIALIZE-DU"


@@BEGIN-TEMPLATE NAME="SERIALIZE-DU-OWNING-PTR"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@ASSERT PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
void serialize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s, OProtobufStream& o ) {

  @@LET LOCAL-MEMBERS-MAP=FUNCTION-CREATE-DU-MEMBERS-MAP(PARAM-DU)

      if( s == nullptr )
        return;
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()

      @@ASSERT LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" ).HAS-VALUE()
      @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.MEMBER-TYPE().ENCODING-MEMBER-TYPE()
      else if ( typeid( *s ) == typeid( @LOCAL-POLY-PTR@ ) ) {
        auto ptr = dynamic_cast<@LOCAL-POLY-PTR@*>( s.get() );
        auto sz = protobufGetSize@LOCAL-POLY-PTR@( *ptr );
        o.writeObjectTagAndSize( @LOCAL-MEMBERS-MAP.FIND-IN-MAP( LOCAL-MEMBER.MAPPING-MEMBER-NAME() )@, sz );
        serialize@LOCAL-POLY-PTR@( *ptr, o );
      }
    @@FOR-EACH END
  @@FOR-EACH END
      else
        assert( false );
}
@@END-TEMPLATE NAME="SERIALIZE-DU-OWNING-PTR"

@@BEGIN-TEMPLATE NAME="SERIALIZE-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
void serialize@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.STRUCT-NAME()@& s, OProtobufStream& o ) {
   @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
}
@@END-TEMPLATE NAME="SERIALIZE-STRUCT"


@@BEGIN-TEMPLATE NAME="SERIALIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
    o.writeUInt(@PARAM-MEMCTR@, @PARAM-NAME@);
  @@ELSE
    o.writeInt(@PARAM-MEMCTR@, @PARAM-NAME@);
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
    o.writeDouble(@PARAM-MEMCTR@, @PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  @@IF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(24,8)
    o.writeFloat(@PARAM-MEMCTR@, @PARAM-NAME@);
  @@ELIF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(53,11)
    o.writeDouble(@PARAM-MEMCTR@, @PARAM-NAME@);
  @@ELSE
    @@ASSERT "0" MSG="Cannot process member: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
  @@ENDIF
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
    o.writeString(@PARAM-MEMCTR@, @PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-STRUCTURE()
    auto sz_@PARAM-MEMCTR@ = protobufGetSize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
    o.writeObjectTagAndSize(@PARAM-MEMCTR@, sz_@PARAM-MEMCTR@);
    serialize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@, o);
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
   @@DBG-PRINT "[---0---], PARAM-TYPE = @PARAM-TYPE@"
    auto sz_@PARAM-MEMCTR@ = protobufGetSize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
    o.writeObjectTagAndSize(@PARAM-MEMCTR@, sz_@PARAM-MEMCTR@);
  @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="*(@PARAM-NAME@)" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
@@ELIF PARAM-TYPE.IS-ENUM()
  @@INCLUDE TEMPLATE="SERIALIZE-ENUM" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE PARAM-MEMCTR=PARAM-MEMCTR
@@ELIF PARAM-TYPE.IS-SEQUENCE()
  @@IF PARAM-TYPE.COLLECTION-TYPE().IS-SEQUENCE()
    @@ASSERT "0" MSG="Cannot process member for size: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
  @@ELIF FUNCTION-IS-FIXED-SIZE-TYPE(PARAM-TYPE.COLLECTION-TYPE())
    if(!@PARAM-NAME@.empty()) {
      size_t sz_@PARAM-MEMCTR@ = 0;
      @@INCLUDE TEMPLATE="GET-PACKED-SEQUENCE-SIZE" PARAM-SIZE="sz_@PARAM-MEMCTR@" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
      o.writeObjectTagAndSize(@PARAM-MEMCTR@, sz_@PARAM-MEMCTR@);
      for(const auto& item:@PARAM-NAME@) {
        @@INCLUDE TEMPLATE="SERIALIZE-PACKED-TYPE" PARAM-NAME="item" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
      }
    }
  @@ELSE
    for(const auto& item:@PARAM-NAME@) {
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
  @@ENDIF
@@ELIF PARAM-TYPE.IS-DICTIONARY()
    for(const auto& item:@PARAM-NAME@) {
      {
      size_t sz = 0;
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2() PARAM-MEMCTR="1"
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE() PARAM-MEMCTR="2"
//      sz += getUnsignedVarIntSize(sz);
      o.writeObjectTagAndSize(@PARAM-MEMCTR@, sz);
      }
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2() PARAM-MEMCTR="1"
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE() PARAM-MEMCTR="2"
    }
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="SERIALIZE-PACKED-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
    o.writePackedUnsignedVarInt(@PARAM-NAME@);
  @@ELSE
    o.writePackedSignedVarInt(@PARAM-NAME@);
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
    o.writePackedDouble(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  @@IF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(24,8)
    o.writePackedFloat(@PARAM-NAME@);
  @@ELIF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(53,11)
    o.writePackedDouble(@PARAM-NAME@);
  @@ELSE
    @@ASSERT "0" MSG="Cannot process member: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
  @@ENDIF
@@ELIF PARAM-TYPE.IS-ENUM()
  @@INCLUDE TEMPLATE="SERIALIZE-PACKED-ENUM" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-PACKED-TYPE"

@@BEGIN-TEMPLATE NAME="SERIALIZE-ENUM"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@ASSERT PARAM-TYPE.IS-ENUM()
    switch ( @PARAM-NAME@ )
    {
   @@FOR-EACH LOCAL-ENUM-VAL IN PARAM-TYPE.ENUM-VALUES()
      case /* @LOCAL-ENUM-VAL.ENUM-VALUE-NAME()@ */ @LOCAL-ENUM-VAL.MAPPING-ENUM-VALUE-VALUE()@: o.writeUInt( @PARAM-MEMCTR@, @LOCAL-ENUM-VAL.ENCODING-ENUM-VALUE-VALUE()@ ); break;
   @@FOR-EACH END
        default: o.writeUInt( @PARAM-MEMCTR@, 0 ); assert( false );
    }
@@END-TEMPLATE NAME="SERIALIZE-ENUM"



@@BEGIN-TEMPLATE NAME="SERIALIZE-PACKED-ENUM"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@ASSERT PARAM-TYPE.IS-ENUM()
        switch ( @PARAM-NAME@ )
        {
  @@FOR-EACH LOCAL-ENUM-VAL IN PARAM-TYPE.ENUM-VALUES()
          case /* @LOCAL-ENUM-VAL.ENUM-VALUE-NAME()@ */ @LOCAL-ENUM-VAL.MAPPING-ENUM-VALUE-VALUE()@: o.writePackedUnsignedVarInt(@LOCAL-ENUM-VAL.ENCODING-ENUM-VALUE-VALUE()@ ); break;
  @@FOR-EACH END
            default: o.writePackedUnsignedVarInt( 0 ); assert( false );
        }
@@END-TEMPLATE NAME="SERIALIZE-PACKED-ENUM"





@@--------   DESERIALIZATION   --------


@@BEGIN-TEMPLATE NAME="DESERIALIZATION-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="DESERIALIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="DESERIALIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
@@END-TEMPLATE NAME="DESERIALIZATION-GENERATE-DECLARATIONS"

@@BEGIN-TEMPLATE NAME="DESERIALIZE-DECLARE-FN-ONLY"
bool deserialize@PARAM-NAME@( @PARAM-MAPPING-NAME@& s, IProtobufStream& i );
@@END-TEMPLATE NAME="DESERIALIZE-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="DESERIALIZATION-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)

  @@INCLUDE TEMPLATE="DISCARD-UNEXPECTED-FIELD"

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="DESERIALIZE-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
    @@IF LOCAL-PS-IT.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
      @@INCLUDE TEMPLATE="DESERIALIZE-DU-OWNING-PTR" PARAM-DU=LOCAL-PS-IT
    @@ELSE
      @@INCLUDE TEMPLATE="DESERIALIZE-DU" PARAM-DU=LOCAL-PS-IT
    @@ENDIF
  @@FOR-EACH END
  
@@END-TEMPLATE NAME="DESERIALIZATION-GENERATE-IMPLEMENTATIONS"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
bool deserialize@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.MAPPING-STRUCT-NAME()@& s, IProtobufStream& i ) {

  @@LET LOCAL-MEMBERS-MAP=FUNCTION-CREATE-DU-MEMBERS-MAP(PARAM-DU)

  @@INCLUDE TEMPLATE="DESERIALIZE-DU-OR-STRUCT-COMMON" PARAM-DU-OR-STRUCT=PARAM-DU

  if( !initFlags[@LOCAL-MEMBERS-MAP.FIND-IN-MAP( PARAM-DU.MAPPING-DISCRIMINATOR-NAME() )@ - 1] )
    return false;

  switch (s.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@) {
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    case @LOCAL-DU-OPTION.ENCODING-DISCRIMINATED-UNION-OPTION-VALUE()@:
      @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
        readOk = readOk && initFlags[@LOCAL-MEMBERS-MAP.FIND-IN-MAP( LOCAL-MEMBER.MAPPING-MEMBER-NAME() )@ - 1];
      @@FOR-EACH END
      break;
  @@FOR-EACH END
    default:
      return false;
  }  

  return readOk;
}
@@END-TEMPLATE NAME="DESERIALIZE-DU"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU-OWNING-PTR"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@ASSERT PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
bool deserialize@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.MAPPING-STRUCT-NAME()@& s, IProtobufStream& i ) {

    s.reset();

    if( i.isEndOfStream() )
      return true;

    int fieldType;
    int fieldNumber;
    bool readOk = i.readFieldTypeAndID( fieldType, fieldNumber );
    
    if ( !readOk )
      return false;

    if( fieldType != LENGTH_DELIMITED )
      return false;

    uint64_t sz;
    readOk = i.readVariantUInt64( sz );
    if ( !readOk )
      return false;
    IProtobufStream is = i.makeSubStream( readOk, sz );
    if ( !readOk )
      return false;

  @@LET LOCAL-MEMBERS-MAP=FUNCTION-CREATE-DU-MEMBERS-MAP(PARAM-DU)

    switch ( fieldNumber )
    {
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@ASSERT LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" ).HAS-VALUE()
      @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.MEMBER-TYPE().ENCODING-MEMBER-TYPE()
      case @LOCAL-MEMBERS-MAP.FIND-IN-MAP( LOCAL-MEMBER.MAPPING-MEMBER-NAME() )@:
      {
        std::unique_ptr<@LOCAL-POLY-PTR@> ptr( new @LOCAL-POLY-PTR@ );
        readOk = deserialize@LOCAL-POLY-PTR@( *ptr, is );
        s = std::move( ptr );
      }
      break;

    @@FOR-EACH END
  @@FOR-EACH END
      default:
      {
        string temp;
        readOk = is.readString( temp );
      }
    }

    return readOk && i.isEndOfStream();
}
@@END-TEMPLATE NAME="DESERIALIZE-DU-OWNING-PTR"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
bool deserialize@PARAM-STRUCT.STRUCT-NAME()@( @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s, IProtobufStream& i ) {

  @@INCLUDE TEMPLATE="DESERIALIZE-DU-OR-STRUCT-COMMON" PARAM-DU-OR-STRUCT=PARAM-STRUCT

  bool OK = true;
  for ( int i=0; i<memcnt; i++ )
    OK = OK && initFlags[i];

  return OK;
}
@@END-TEMPLATE NAME="DESERIALIZE-STRUCT"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU-OR-STRUCT-COMMON"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU-OR-STRUCT) || IS-SERIALIZABLE-STRUCT(PARAM-DU-OR-STRUCT)
@@LET LOCAL-MEMCTR=0
@@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OR-STRUCT.MEMBERS()
  @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
@@FOR-EACH END
   const int memcnt = @LOCAL-MEMCTR@;
   bool initFlags[memcnt] = { false };
@@LET LOCAL-MEMCTR=0
@@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OR-STRUCT.MEMBERS()
  @@INCLUDE TEMPLATE="DESERIALIZE-TYPE-INIT" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-FLAG="initFlags[@LOCAL-MEMCTR@]"
@@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
@@FOR-EACH END

  while(!i.isEndOfStream())
  {
    int fieldType;
    int fieldNumber;

    bool readOk = i.readFieldTypeAndID( fieldType, fieldNumber );
    if ( !readOk )
      return false;
    switch ( fieldNumber )
    {
  @@LET LOCAL-MEMCTR=1
  @@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OR-STRUCT.MEMBERS()
    case @LOCAL-MEMCTR@:
    {
      @@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE()
    }
    initFlags[@LOCAL-MEMCTR@ - 1] = true;
    break;

   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
    default:
      readOk = discardUnexpectedField( fieldType, i );
    }
    if( !readOk )
      return false;
  }
@@END-TEMPLATE NAME="DESERIALIZE-DU-OR-STRUCT-COMMON"



@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE-INIT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.IS-SEQUENCE()) || (PARAM-TYPE.IS-DICTIONARY())
  @PARAM-FLAG@ = true;
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE-INIT"



@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  if( fieldType != VARINT ) return false;
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
    @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(1)
      uint64_t temp = 0;
      readOk = i.readVariantUInt64( temp );
      @PARAM-NAME@ = static_cast<bool>( temp );
    @@ELIF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(64)
      uint64_t temp = 0;
      readOk = i.readVariantUInt64( temp );
      @PARAM-NAME@ = temp;
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ELSE
    @@IF PARAM-TYPE.IS-SIGNED-INTEGER-FITTING-INT(64)
      int64_t temp = 0;
      readOk = i.readVariantInt64( temp );
      @PARAM-NAME@ = temp;
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
   @@ASSERT "0" MSG="Cannot process member for deserialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  @@IF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(24,8)
      if( fieldType != FIXED_32_BIT ) return false;
      readOk = i.readFixed32Bit( @PARAM-NAME@ );
  @@ELIF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(53,11)
      if( fieldType != FIXED_64_BIT ) return false;
      readOk = i.readFixed64Bit( @PARAM-NAME@ );
  @@ELSE
    @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
  @@ENDIF
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
      if( fieldType != LENGTH_DELIMITED ) return false;
      readOk = i.readString( @PARAM-NAME@ );
@@ELIF PARAM-TYPE.IS-STRUCTURE()
      if( fieldType != LENGTH_DELIMITED ) return false;
      uint64_t sz;
      readOk = i.readVariantUInt64( sz );
      if ( !readOk )
        return false;
      IProtobufStream is = i.makeSubStream( readOk, sz );
      if ( !readOk )
        return false;
      readOk = deserialize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@, is);
@@ELIF PARAM-TYPE.IS-ENUM()
      if( fieldType != VARINT ) return false;
      uint64_t temp = 0;
      readOk = i.readVariantUInt64( temp );
      switch ( temp )
      {
      @@INCLUDE TEMPLATE="DESERIALIZE-ENUM" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE
        default: return false;
      }
@@ELIF PARAM-TYPE.IS-SEQUENCE()
  @@IF PARAM-TYPE.COLLECTION-TYPE().IS-SEQUENCE()
    @@ASSERT "0" MSG="Cannot process member for size: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
  @@ELIF FUNCTION-IS-FIXED-SIZE-TYPE(PARAM-TYPE.COLLECTION-TYPE())
    if( fieldType == LENGTH_DELIMITED ) {
      uint64_t sz;
      readOk = i.readVariantUInt64(sz);
      if ( !readOk )
        return false;
      IProtobufStream is = i.makeSubStream( readOk, sz );
      if ( !readOk )
        return false;
      IProtobufStream& i = is;

      while(!i.isEndOfStream()) {

      @@INCLUDE TEMPLATE="DESERIALIZE-PACKED-TYPE" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
      
      if ( !readOk )
        return false;
      }
    } 
    else
    // fall back to non packed
    {
      @@IF (PARAM-TYPE.COLLECTION-TYPE().IS-INTEGER()) || (PARAM-TYPE.COLLECTION-TYPE().IS-ENUM())
          if( fieldType != VARINT ) return false;
      @@ELIF PARAM-TYPE.COLLECTION-TYPE().IS-FLOATING-POINT()
        @@IF PARAM-TYPE.COLLECTION-TYPE().IS-FLOATING-POINT-FITTING-FLOAT(24,8)
          if( fieldType != FIXED_32_BIT ) return false;
        @@ELIF PARAM-TYPE.COLLECTION-TYPE().IS-FLOATING-POINT-FITTING-FLOAT(53,11)
          if( fieldType != FIXED_64_BIT ) return false;
        @@ELSE
          @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
        @@ENDIF
      @@ELSE
        @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
      @@ENDIF
      @@INCLUDE TEMPLATE="DESERIALIZE-PACKED-TYPE" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
  @@ELSE
    @PARAM-TYPE.COLLECTION-TYPE().MAPPING-MEMBER-TYPE()@ temp2;
    @@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="temp2" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    @PARAM-NAME@.push_back( std::move( temp2 ) );
  @@ENDIF
@@ELIF PARAM-TYPE.IS-DICTIONARY()
  @@INCLUDE TEMPLATE="DESERIALIZE-DICTIONARY" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for deserialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-PACKED-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
    @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(1)
      uint64_t temp = 0;
      readOk = i.readVariantUInt64( temp );
      @PARAM-NAME@.push_back( static_cast<bool>( temp ) );
    @@ELIF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(64)
      uint64_t temp = 0;
      readOk = i.readVariantUInt64( temp );
      @PARAM-NAME@.push_back( temp );
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ELSE
    @@IF PARAM-TYPE.IS-SIGNED-INTEGER-FITTING-INT(64)
      int64_t temp = 0;
      readOk = i.readVariantInt64( temp );
      @PARAM-NAME@.push_back( temp );
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
   @@ASSERT "0" MSG="Cannot process member for deserialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  @@IF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(24,8)
      float temp = 0;
      readOk = i.readFixed32Bit( temp );
      @PARAM-NAME@.push_back( temp );
  @@ELIF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(53,11)
      double temp = 0;
      readOk = i.readFixed64Bit( temp );
      @PARAM-NAME@.push_back( temp );
  @@ELSE
    @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
  @@ENDIF
@@ELIF PARAM-TYPE.IS-ENUM()
      uint64_t temp = 0;
      readOk = i.readVariantUInt64( temp );
      switch ( temp )
      {
      @@INCLUDE TEMPLATE="DESERIALIZE-PACKED-ENUM" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE
        default: return false;
      }
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for deserialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-PACKED-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DICTIONARY"
@@ASSERT PARAM-TYPE.IS-DICTIONARY()
  if( fieldType != LENGTH_DELIMITED )
    return false;
  uint64_t sz;
  readOk = i.readVariantUInt64( sz );
  if ( !readOk )
    return false;
  IProtobufStream is = i.makeSubStream( readOk, sz );
  if ( !readOk )
    return false;
  IProtobufStream& i = is;
  @PARAM-TYPE.COLLECTION-TYPE2().ENCODING-MEMBER-TYPE()@ key;
  @PARAM-TYPE.COLLECTION-TYPE().ENCODING-MEMBER-TYPE()@ value;
  bool initFlags[2] = { false };

  while(!i.isEndOfStream())
  {
    int fieldType;
    int fieldNumber;

    bool readOk = i.readFieldTypeAndID( fieldType, fieldNumber );
    if ( !readOk )
      return false;
  
    switch ( fieldNumber )
    {
        case 1:
    {
@@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="key" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
    }
     initFlags[0] = true;
     break;

    case 2:
    {
@@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="value" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
     initFlags[1] = true;
      break;

    default:
      readOk = discardUnexpectedField( fieldType, i );
    }

    if ( !readOk )
      return false;
   }
   
   readOk = initFlags[0] && initFlags[1];
   if(readOk)
     @PARAM-NAME@[key] = value;

@@END-TEMPLATE NAME="DESERIALIZE-DICTIONARY"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-ENUM"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
   @@FOR-EACH LOCAL-ENUM-VALUE IN PARAM-TYPE.ENUM-VALUES()
	      case @LOCAL-ENUM-VALUE.ENCODING-ENUM-VALUE-VALUE()@: @PARAM-NAME@ = s.@LOCAL-ENUM-VALUE.ENUM-VALUE-NAME()@; break;
  @@FOR-EACH END
 @@END-TEMPLATE NAME="DESERIALIZE-ENUM"

@@BEGIN-TEMPLATE NAME="DESERIALIZE-PACKED-ENUM"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
   @@FOR-EACH LOCAL-ENUM-VALUE IN PARAM-TYPE.ENUM-VALUES()
        case @LOCAL-ENUM-VALUE.ENCODING-ENUM-VALUE-VALUE()@: @PARAM-NAME@.push_back( s.@LOCAL-ENUM-VALUE.ENUM-VALUE-NAME()@ ); break;
  @@FOR-EACH END
 @@END-TEMPLATE NAME="DESERIALIZE-PACKED-ENUM"

@@BEGIN-TEMPLATE NAME="DISCARD-UNEXPECTED-FIELD"
inline
bool discardUnexpectedField( int fieldType, IProtobufStream& i ) {

  // Unexpected field, just read and discard
  switch(fieldType)
  {
  case VARINT:
    {
      uint64_t temp;
      return i.readVariantUInt64( temp );
    }
    break;
  case FIXED_64_BIT:
    {
      double temp;
      return i.readFixed64Bit( temp );
    }
    break;
  case LENGTH_DELIMITED:
    {
      uint64_t sz;
      bool readOk = i.readVariantUInt64( sz );
      if( !readOk )
        return false;
      IProtobufStream is = i.makeSubStream( readOk, sz );
      if ( !readOk )
        return false;

      string temp;
      return is.readString( temp );
    }
    break;
  case FIXED_32_BIT:
    {
      float temp;
      return i.readFixed32Bit( temp );
    }
    break;
  default:
    return false;
  }
}
@@END-TEMPLATE NAME="DISCARD-UNEXPECTED-FIELD"



@@--------   GET-SIZE   --------


@@BEGIN-TEMPLATE NAME="GET-SIZE-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="GET-SIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="GET-SIZE-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
@@END-TEMPLATE NAME="GET-SIZE-GENERATE-DECLARATIONS"

@@BEGIN-TEMPLATE NAME="GET-SIZE-DECLARE-FN-ONLY"
size_t protobufGetSize@PARAM-NAME@( const @PARAM-MAPPING-NAME@& s );
@@END-TEMPLATE NAME="GET-SIZE-DECLARE-FN-ONLY"

@@BEGIN-TEMPLATE NAME="GET-SIZE-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="GET-SIZE-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
    @@IF LOCAL-PS-IT.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
      @@INCLUDE TEMPLATE="GET-SIZE-DU-OWNING-PTR" PARAM-DU=LOCAL-PS-IT
    @@ELSE
      @@INCLUDE TEMPLATE="GET-SIZE-DU" PARAM-DU=LOCAL-PS-IT
    @@ENDIF
  @@FOR-EACH END
@@END-TEMPLATE NAME="GET-SIZE-GENERATE-IMPLEMENTATIONS"



@@BEGIN-TEMPLATE NAME="GET-SIZE-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
size_t protobufGetSize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s ) {

  @@LET LOCAL-MEMBERS-MAP=FUNCTION-CREATE-DU-MEMBERS-MAP(PARAM-DU)

  uint8_t disc = s.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@;

  size_t sz = 0;
  sz += getTagSize( @LOCAL-MEMBERS-MAP.FIND-IN-MAP( PARAM-DU.MAPPING-DISCRIMINATOR-NAME() )@ );
  sz += getUnsignedVarIntSize( disc );

  switch ( disc )
  {
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    case @LOCAL-DU-OPTION.ENCODING-DISCRIMINATED-UNION-OPTION-VALUE()@:
    {
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMBERS-MAP.FIND-IN-MAP( LOCAL-MEMBER.MAPPING-MEMBER-NAME() )
    @@FOR-EACH END
    }
    break;
  @@FOR-EACH END
    default:
      assert( false );
  }

  return sz;
}
@@END-TEMPLATE NAME="GET-SIZE-DU"

@@BEGIN-TEMPLATE NAME="GET-SIZE-DU-OWNING-PTR"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@ASSERT PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
size_t protobufGetSize@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s ) {

  @@LET LOCAL-MEMBERS-MAP=FUNCTION-CREATE-DU-MEMBERS-MAP(PARAM-DU)

  if( s == nullptr )
    return 0;
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@ASSERT LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" ).HAS-VALUE()
      @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.MEMBER-TYPE().ENCODING-MEMBER-TYPE()
      else if ( typeid( *s ) == typeid( @LOCAL-POLY-PTR@ ) ) {
        auto ptr = dynamic_cast<@LOCAL-POLY-PTR@*>( s.get() );
        auto sz = protobufGetSize@LOCAL-POLY-PTR@( *ptr );
        sz += getUnsignedVarIntSize( sz );
        sz += getTagSize( @LOCAL-MEMBERS-MAP.FIND-IN-MAP( LOCAL-MEMBER.MAPPING-MEMBER-NAME() )@ );
        return sz;
      }
    @@FOR-EACH END
  @@FOR-EACH END
  else {
    assert( false );
    return 0; // silence
  }
}
@@END-TEMPLATE NAME="GET-SIZE-DU-OWNING-PTR"

@@BEGIN-TEMPLATE NAME="GET-SIZE-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
size_t protobufGetSize@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& s ) {
  size_t sz = 0;
  @@LET LOCAL-MEMCTR=1
  @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-MEMCTR=LOCAL-MEMCTR

  @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
  @@FOR-EACH END
   
  return sz;
}

@@END-TEMPLATE NAME="GET-SIZE-STRUCT"


@@BEGIN-TEMPLATE NAME="GET-SIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  sz += getTagSize(@PARAM-MEMCTR@);
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
  sz += getUnsignedVarIntSize(@PARAM-NAME@);
  @@ELSE
  sz += getSignedVarIntSize(@PARAM-NAME@);
  @@ENDIF
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getFixedSize(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getFixedSize(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getUnsignedVarIntSize(@PARAM-NAME@.size());
  sz += @PARAM-NAME@.size();
@@ELIF PARAM-TYPE.IS-STRUCTURE()
  sz += getTagSize(@PARAM-MEMCTR@);
  auto sz_@PARAM-MEMCTR@ = protobufGetSize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
  sz += getUnsignedVarIntSize(sz_@PARAM-MEMCTR@);
  sz += sz_@PARAM-MEMCTR@;
@@ELIF PARAM-TYPE.IS-ENUM()
  sz += getTagSize(@PARAM-MEMCTR@);
  sz += getUnsignedVarIntSize(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-SEQUENCE()
  @@IF PARAM-TYPE.COLLECTION-TYPE().IS-SEQUENCE()
    @@ASSERT "0" MSG="Cannot process member for size: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
  @@ELIF FUNCTION-IS-FIXED-SIZE-TYPE(PARAM-TYPE.COLLECTION-TYPE())
    sz += getTagSize(@PARAM-MEMCTR@);
    size_t sz_@PARAM-MEMCTR@ = 0;
    @@INCLUDE TEMPLATE="GET-PACKED-SEQUENCE-SIZE" PARAM-SIZE="sz_@PARAM-MEMCTR@" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    sz += getUnsignedVarIntSize(sz_@PARAM-MEMCTR@);
    sz += sz_@PARAM-MEMCTR@;
  @@ELSE
    for(const auto& item:@PARAM-NAME@) {
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-MEMCTR=PARAM-MEMCTR PARAM-NAME="item" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
      }
  @@ENDIF
@@ELIF PARAM-TYPE.IS-DICTIONARY()
    for(const auto& item:@PARAM-NAME@) {
      sz += getTagSize(@PARAM-MEMCTR@);
      size_t sz_begin_@PARAM-MEMCTR@ = sz;
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2() PARAM-MEMCTR="1"
      @@INCLUDE TEMPLATE="GET-SIZE-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE() PARAM-MEMCTR="2"
      sz += getUnsignedVarIntSize(sz - sz_begin_@PARAM-MEMCTR@);
    }
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for size: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="GET-SIZE-TYPE"


@@BEGIN-TEMPLATE NAME="GET-PACKED-SEQUENCE-SIZE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@ASSERT FUNCTION-IS-FIXED-SIZE-TYPE(PARAM-TYPE)
    for(const auto& item:@PARAM-NAME@) {
      @@IF PARAM-TYPE.IS-INTEGER()
        @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
          @PARAM-SIZE@ += getUnsignedVarIntSize(item);
        @@ELSE
          @PARAM-SIZE@ += getSignedVarIntSize(item);
        @@ENDIF
      @@ELIF PARAM-TYPE.IS-ENUM()
        @PARAM-SIZE@ += getUnsignedVarIntSize(item);
      @@ELIF PARAM-TYPE.IS-FIXED-POINT()
        @PARAM-SIZE@ += getFixedSize(item);
      @@ELIF PARAM-TYPE.IS-FLOATING-POINT()
        @PARAM-SIZE@ += getFixedSize(item);
      @@ENDIF
    }
@@END-TEMPLATE NAME="GET-PACKED-SEQUENCE-SIZE"







