@@--------   PRINT   --------


@@BEGIN-TEMPLATE NAME="PRINT-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="PRINT-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="PRINT-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
@@END-TEMPLATE NAME="PRINT-GENERATE-DECLARATIONS"

@@BEGIN-TEMPLATE NAME="PRINT-DECLARE-FN-ONLY"
void dbgPrint@PARAM-NAME@( const @PARAM-MAPPING-NAME@& s, std::ostream& o, size_t offset );
@@END-TEMPLATE NAME="PRINT-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="PRINT-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="PRINT-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END

  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
    @@IF LOCAL-PS-IT.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
      @@INCLUDE TEMPLATE="PRINT-DU-OWNING-PTR" PARAM-DU=LOCAL-PS-IT
    @@ELSE
      @@INCLUDE TEMPLATE="PRINT-DU" PARAM-DU=LOCAL-PS-IT
    @@ENDIF
  @@FOR-EACH END
@@END-TEMPLATE NAME="PRINT-GENERATE-IMPLEMENTATIONS"


@@BEGIN-TEMPLATE NAME="PRINT-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
void dbgPrint@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s, std::ostream& o, size_t offset ) {

  std::string sp( 2 * offset, ' ' );
  std::string sp1( 2 * offset + 2, ' ');

 o << "DISCRIMINATED-UNION @PARAM-DU.STRUCT-NAME()@:\n";

   //@FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE(PARAM-DU, "s", "disc")@

  uint8_t disc = s.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@;
  
  o << sp << "@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@ = " << disc << "\n";

  switch ( disc )
  {
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    case @LOCAL-DU-OPTION.ENCODING-DISCRIMINATED-UNION-OPTION-VALUE()@:
    {
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
    o << sp << "@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@ = ";
      @@INCLUDE TEMPLATE="PRINT-TYPE" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE()
   @@FOR-EACH END
    }
    break;
  @@FOR-EACH END
    default:
      assert( false );
  }
}
@@END-TEMPLATE NAME="PRINT-DU"


@@BEGIN-TEMPLATE NAME="PRINT-DU-OWNING-PTR"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@ASSERT PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
void dbgPrint@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& s, std::ostream& o, size_t offset ) {

  std::string sp( 2 * offset, ' ' );
  std::string sp1( 2 * offset + 2, ' ');

//  o << "DISCRIMINATED-UNION @PARAM-DU.STRUCT-NAME()@:\n";

  if( s == nullptr )
    o << sp << "<nullptr>\n";
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@ASSERT LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" ).HAS-VALUE()
      @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.MEMBER-TYPE().ENCODING-MEMBER-TYPE()
      else if ( typeid( *s ) == typeid( @LOCAL-POLY-PTR@ ) ) {
        auto ptr = dynamic_cast<@LOCAL-POLY-PTR@*>( s.get() );
        dbgPrint@LOCAL-POLY-PTR@( *ptr, o, offset + 1 );
      }
   @@FOR-EACH END
  @@FOR-EACH END
  else
    assert( false );
}
@@END-TEMPLATE NAME="PRINT-DU-OWNING-PTR"

@@BEGIN-TEMPLATE NAME="PRINT-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
void dbgPrint@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.STRUCT-NAME()@& s, std::ostream& o, size_t offset ) {

  std::string sp( 2 * offset, ' ' );
  std::string sp1( 2 * offset + 2, ' ');

  o << "PUBLISHABLE-STRUCT @PARAM-STRUCT.STRUCT-NAME()@:\n";

  @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
    o << sp << "@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@ = ";
    @@INCLUDE TEMPLATE="PRINT-TYPE" PARAM-NAME=FUNCTION-GET-REF-TO-MEMBER("s", LOCAL-MEMBER) PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE()
   @@FOR-EACH END
}
@@END-TEMPLATE NAME="PRINT-STRUCT"


@@BEGIN-TEMPLATE NAME="PRINT-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  o << @PARAM-NAME@ << "\n";
@@ELIF PARAM-TYPE.IS-ENUM()
  o << @PARAM-NAME@ << "\n";
@@ELIF PARAM-TYPE.IS-FIXED-POINT()
  o << @PARAM-NAME@ << "\n";
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  o << @PARAM-NAME@ << "\n";
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
  o << "\\"" << @PARAM-NAME@ << "\\"\n";
@@ELIF PARAM-TYPE.IS-STRUCTURE()
    dbgPrint@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@, o, offset + 1);
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
  @@INCLUDE TEMPLATE="PRINT-TYPE" PARAM-NAME="*(@PARAM-NAME@)" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
@@ELIF PARAM-TYPE.IS-SEQUENCE()
  o << "SEQUENCE\n";
    for(const auto& item:@PARAM-NAME@) {
      o << sp1;
      @@INCLUDE TEMPLATE="PRINT-TYPE" PARAM-NAME="item" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
  o << "DICTIONARY\n";
    for(const auto& item:@PARAM-NAME@) {
      o << sp << "{\n"; 
      o << sp1;
      @@INCLUDE TEMPLATE="PRINT-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
      o << sp1;
      @@INCLUDE TEMPLATE="PRINT-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
      o << sp << "}\n";
    }
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="PRINT-TYPE"


