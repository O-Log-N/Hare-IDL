

@@-----------  FORWARD DECLARATIONS  -----------------


@@BEGIN-TEMPLATE NAME="FORWARD-DECLARING"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-OBJ IN PARAM-ROOT.SERIALIZABLE-OBJECTS()
    @@IF IS-SERIALIZABLE-STRUCT( LOCAL-OBJ )
struct @LOCAL-OBJ.STRUCT-NAME()@;
    @@ELIF IS-SERIALIZABLE-DISCRIMINATED-UNION( LOCAL-OBJ )
      @@IF LOCAL-OBJ.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
      @@ELSE
struct @LOCAL-OBJ.STRUCT-NAME()@;
      @@ENDIF
    @@ELIF
      @@ASSERT 0
    @@ENDIF
  @@FOR-EACH END
@@END-TEMPLATE NAME="FORWARD-DECLARING"




@@-----------  TESTING FOR READINESS FOR DECLARATIONS  -----------------


@@BEGIN-TEMPLATE NAME="SMART-DECLARING-ENTRY"
@@ASSERT IS-ROOT(PARAM-ROOT)
@@LET LOCAL-ALL=PARAM-ROOT.SERIALIZABLE-OBJECTS()
@@INCLUDE TEMPLATE="SMART-DECLARING-RECURSIVE" PARAM-PROCESSED=FUNCTION-GET-MAP-OF-OWNING-PTR( LOCAL-ALL ) PARAM-OBJECTS=LOCAL-ALL PARAM-ALL-NAMES=FUNCTION-GET-LIST-OF-NAMES-OF-ALL-SERIALIZABLE-OBJECTS( LOCAL-ALL )
@@END-TEMPLATE NAME="SMART-DECLARING-ENTRY"


@@BEGIN-FUNCTION NAME="FUNCTION-GET-LIST-OF-NAMES-OF-ALL-SERIALIZABLE-OBJECTS" PARAM-ALL-OBJECTS
@@LET LOCAL-ALL-NAMES=CREATE-MAP()
  @@FOR-EACH LOCAL-OBJ IN PARAM-ALL-OBJECTS
    @@IF IS-SERIALIZABLE-STRUCT( LOCAL-OBJ )
      @@LET LOCAL-ALL-NAMES=LOCAL-ALL-NAMES.ASSIGN( LOCAL-OBJ.STRUCT-NAME(), "" )
    @@ELIF IS-SERIALIZABLE-DISCRIMINATED-UNION( LOCAL-OBJ )
      @@LET LOCAL-ALL-NAMES=LOCAL-ALL-NAMES.ASSIGN( LOCAL-OBJ.STRUCT-NAME(), "" )
    @@ELIF
      @@ASSERT 0
    @@ENDIF
  @@FOR-EACH END
  @@RETURN LOCAL-ALL-NAMES
@@END-FUNCTION NAME="FUNCTION-GET-LIST-OF-NAMES-OF-ALL-SERIALIZABLE-OBJECTS"

@@BEGIN-FUNCTION NAME="FUNCTION-GET-MAP-OF-OWNING-PTR" PARAM-ALL-OBJECTS
@@LET LOCAL-ALL-NAMES=CREATE-MAP()
@@FOR-EACH LOCAL-OBJ IN PARAM-ALL-OBJECTS
  @@IF IS-SERIALIZABLE-DISCRIMINATED-UNION( LOCAL-OBJ )
    @@IF LOCAL-OBJ.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
      @@LET LOCAL-ALL-NAMES=LOCAL-ALL-NAMES.ASSIGN( LOCAL-OBJ.STRUCT-NAME(), "" )
    @@ENDIF
  @@ENDIF
@@FOR-EACH END
@@RETURN LOCAL-ALL-NAMES
@@END-FUNCTION NAME="FUNCTION-GET-MAP-OF-OWNING-PTR"


@@BEGIN-TEMPLATE NAME="SMART-DECLARING-RECURSIVE"
@@LET LOCAL-PROCESSED-OBJECTS=PARAM-PROCESSED
@@LET LOCAL-REMAINING-OBJECTS=CREATE-LIST()
@@LET LOCAL-PROC-CNT=0
@@LET LOCAL-ALL-CNT=0
@@FOR-EACH LOCAL-OBJ IN PARAM-OBJECTS
  @@LET LOCAL-ALL-CNT=LOCAL-ALL-CNT+1
  @@IF LOCAL-PROCESSED-OBJECTS.FIND-IN-MAP( LOCAL-OBJ.STRUCT-NAME() ).HAS-VALUE()
  @@ELSE
    @@IF IS-SERIALIZABLE-STRUCT( LOCAL-OBJ )
      @@LET LOCAL-OK=FUNCTION-TEST-READINESS-DU-OR-STRUCT( LOCAL-OBJ, PARAM-PROCESSED, PARAM-ALL-NAMES )
      @@IF LOCAL-OK
        @@DBG-PRINT "    =====   @LOCAL-OBJ.STRUCT-NAME()@"
        @@LET LOCAL-PROC-CNT=LOCAL-PROC-CNT+1
        @@INCLUDE TEMPLATE="MAP-STRUCT" PARAM-STRUCT=LOCAL-OBJ
        @@LET LOCAL-PROCESSED-OBJECTS=LOCAL-PROCESSED-OBJECTS.ASSIGN( LOCAL-OBJ.STRUCT-NAME(), "" )
      @@ELSE
        @@LET LOCAL-REMAINING-OBJECTS=LOCAL-REMAINING-OBJECTS.APPEND-TO-LIST( LOCAL-OBJ )
      @@ENDIF
    @@ELIF IS-SERIALIZABLE-DISCRIMINATED-UNION( LOCAL-OBJ )
      @@LET LOCAL-OK=FUNCTION-TEST-READINESS-DU-OR-STRUCT( LOCAL-OBJ, PARAM-PROCESSED, PARAM-ALL-NAMES )
      @@IF LOCAL-OK
        @@DBG-PRINT "    =====   @LOCAL-OBJ.STRUCT-NAME()@"
        @@LET LOCAL-PROC-CNT=LOCAL-PROC-CNT+1
        @@INCLUDE TEMPLATE="MAP-DU" PARAM-DU=LOCAL-OBJ
        @@LET LOCAL-PROCESSED-OBJECTS=LOCAL-PROCESSED-OBJECTS.ASSIGN( LOCAL-OBJ.STRUCT-NAME(), "" )
      @@ELSE
       @@LET LOCAL-REMAINING-OBJECTS=LOCAL-REMAINING-OBJECTS.APPEND-TO-LIST( LOCAL-OBJ )
      @@ENDIF
    @@ELIF
      @@ASSERT 0
    @@ENDIF
  @@ENDIF
@@FOR-EACH END
@@IF LOCAL-ALL-CNT == 0
  @@DBG-PRINT "    =================================================="
  @@DBG-PRINT "    =====   SMART-DECLARING-RECURSIVE : OK     ======="
@@ELSE
  @@IF LOCAL-PROC-CNT == 0
    @@DBG-PRINT "    =================================================="
    @@DBG-PRINT "    =====   SMART-DECLARING-RECURSIVE : FAILED ======="
    @@ASSERT 0
  @@ELSE
    @@INCLUDE TEMPLATE="SMART-DECLARING-RECURSIVE" PARAM-PROCESSED=LOCAL-PROCESSED-OBJECTS PARAM-OBJECTS=LOCAL-REMAINING-OBJECTS PARAM-ALL-NAMES=PARAM-ALL-NAMES
  @@ENDIF
@@ENDIF
@@END-TEMPLATE NAME="SMART-DECLARING-RECURSIVE"


@@BEGIN-FUNCTION NAME="FUNCTION-TEST-READINESS-DU-OR-STRUCT" PARAM-DU-OR-STRUCT PARAM-PROCESSED PARAM-ALL-NAMES
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU-OR-STRUCT) || IS-SERIALIZABLE-STRUCT(PARAM-DU-OR-STRUCT)
@@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OR-STRUCT.MEMBERS()
  @@LET LOCAL-RETVAL=FUNCTION-TEST-READINESS-TYPE( LOCAL-MEMBER.MEMBER-TYPE(), PARAM-PROCESSED, PARAM-ALL-NAMES )
  @@IF LOCAL-RETVAL == 0
    @@-DBG-PRINT "@PARAM-DU-OR-STRUCT.STRUCT-NAME()@.@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@ of type @LOCAL-MEMBER.MEMBER-TYPE().MAPPING-MEMBER-TYPE()@ : FAILED"
    @@RETURN 0
  @@ENDIF
@@FOR-EACH END
@@RETURN 1
@@END-FUNCTION NAME="FUNCTION-TEST-READINESS-DU-OR-STRUCT"


@@BEGIN-FUNCTION NAME="FUNCTION-TEST-READINESS-TYPE" PARAM-TYPE PARAM-PROCESSED PARAM-ALL-NAMES
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT()) || (PARAM-TYPE.IS-CHARACTER-STRING())
  @@RETURN 1
@@ELIF (PARAM-TYPE.IS-STRUCTURE()) || (PARAM-TYPE.IS-DISCRIMINATED-UNION())
  @@IF PARAM-PROCESSED.FIND-IN-MAP( PARAM-TYPE.ENCODING-MEMBER-TYPE() ).HAS-VALUE()
    @@RETURN 1
  @@ELSE
    @@RETURN 0
  @@ENDIF
@@ELIF PARAM-TYPE.IS-SEQUENCE()
  @@IF PARAM-PROCESSED.FIND-IN-MAP( PARAM-TYPE.COLLECTION-TYPE().ENCODING-MEMBER-TYPE() ).HAS-VALUE()
    @@RETURN 1
  @@ELSE
    @@RETURN FUNCTION-TEST-READINESS-TYPE( PARAM-TYPE.COLLECTION-TYPE(), PARAM-PROCESSED, PARAM-ALL-NAMES )
  @@ENDIF
@@ELIF PARAM-TYPE.IS-DICTIONARY()
  @@IF PARAM-PROCESSED.FIND-IN-MAP( PARAM-TYPE.COLLECTION-TYPE().MAPPING-MEMBER-TYPE() ).HAS-VALUE()
    @@IF PARAM-PROCESSED.FIND-IN-MAP( PARAM-TYPE.COLLECTION-TYPE2().MAPPING-MEMBER-TYPE() ).HAS-VALUE()
      @@RETURN 1
    @@ELSE
      @@RETURN FUNCTION-TEST-READINESS-TYPE( PARAM-TYPE.COLLECTION-TYPE2(), PARAM-PROCESSED, PARAM-ALL-NAMES )
    @@ENDIF
  @@ELSE
    @@IF FUNCTION-TEST-READINESS-TYPE( PARAM-TYPE.COLLECTION-TYPE(), PARAM-PROCESSED, PARAM-ALL-NAMES ) == 1
      @@IF PARAM-PROCESSED.FIND-IN-MAP( PARAM-TYPE.COLLECTION-TYPE2().MAPPING-MEMBER-TYPE() ).HAS-VALUE()
        @@RETURN 1
      @@ELSE
        @@RETURN FUNCTION-TEST-READINESS-TYPE( PARAM-TYPE.COLLECTION-TYPE2(), PARAM-PROCESSED, PARAM-ALL-NAMES )
      @@ENDIF
    @@ELSE
	    @@RETURN 0
	  @@ENDIF
  @@ENDIF
@@ELIF PARAM-TYPE.IS-ENUM()
  @@RETURN 1
@@ELSE
  @@ASSERT 0
@@ENDIF
@@RETURN 0
@@END-FUNCTION NAME="FUNCTION-TEST-READINESS-TYPE"



@@BEGIN-FUNCTION NAME="FUNCTION-GET-PARENT" PARAM-OBJECT
@@ASSERT IS-SERIALIZABLE-OBJECT(PARAM-OBJECT)
@@FOR-EACH LOCAL-MEMBER IN PARAM-OBJECT.MEMBERS()
  @@LET LOCAL-IS-PARENT = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "PARENT" ).HAS-VALUE()
  @@IF LOCAL-IS-PARENT
    @@RETURN " : public @LOCAL-MEMBER.MEMBER-TYPE().MAPPING-MEMBER-TYPE()@"
  @@ENDIF
@@FOR-EACH END
RETURN ""
@@END-FUNCTION NAME="FUNCTION-GET-PARENT"

@@BEGIN-FUNCTION NAME="FUNCTION-GET-FULL-MAPPING-NAME" PARAM-TYPE
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-SEQUENCE()
  @@RETURN "@PARAM-TYPE.MAPPING-MEMBER-TYPE()@ < @FUNCTION-GET-FULL-MAPPING-NAME( PARAM-TYPE.COLLECTION-TYPE() )@ >"
@@ELIF PARAM-TYPE.IS-DICTIONARY()
  @@RETURN "@PARAM-TYPE.MAPPING-MEMBER-TYPE()@ < @FUNCTION-GET-FULL-MAPPING-NAME( PARAM-TYPE.COLLECTION-TYPE() )@ , @FUNCTION-GET-FULL-MAPPING-NAME( PARAM-TYPE.COLLECTION-TYPE2() )@ >"
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
  @@RETURN "/* DU */ @PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
@@ELSE
  @@RETURN "@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
@@ENDIF
@@END-FUNCTION NAME="FUNCTION-GET-FULL-MAPPING-NAME"




@@-----------  GENERATION OF DECLARATIONS  -----------------


@@BEGIN-TEMPLATE NAME="MAP-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
struct @PARAM-DU.STRUCT-NAME()@ @FUNCTION-GET-PARENT(PARAM-DU)@ {
@@FOR-EACH LOCAL-MEMBER IN PARAM-DU.MEMBERS()
  @@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-NAME=LOCAL-MEMBER.MAPPING-MEMBER-NAME()
@@FOR-EACH END
};

@@END-TEMPLATE NAME="MAP-DU"


@@BEGIN-TEMPLATE NAME="MAP-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
struct @PARAM-STRUCT.STRUCT-NAME()@ @FUNCTION-GET-PARENT(PARAM-STRUCT)@ {
@@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
  @@LET LOCAL-IS-PARENT = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "PARENT" ).HAS-VALUE()
  @@IF LOCAL-IS-PARENT
  @@ELSE
    @@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-NAME=LOCAL-MEMBER.MAPPING-MEMBER-NAME()
  @@ENDIF
@@FOR-EACH END
};

@@END-TEMPLATE NAME="MAP-STRUCT"


@@BEGIN-TEMPLATE NAME="MAP-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-ENUM()
  @@INCLUDE TEMPLATE="MAP-ENUM" PARAM-TYPE=PARAM-TYPE PARAM-NAME=PARAM-NAME
@@ELSE
  @FUNCTION-GET-FULL-MAPPING-NAME( PARAM-TYPE )@ @PARAM-NAME@;
@@ENDIF
@@END-TEMPLATE NAME="MAP-TYPE"

@@BEGIN-TEMPLATE NAME="MAP-ENUM"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@ASSERT PARAM-TYPE.IS-ENUM()
  enum @PARAM-TYPE.MAPPING-MEMBER-TYPE()@ {
   @@FOR-EACH LOCAL-ENUM-VAL IN PARAM-TYPE.ENUM-VALUES()
      @LOCAL-ENUM-VAL.ENUM-VALUE-NAME()@=@LOCAL-ENUM-VAL.MAPPING-ENUM-VALUE-VALUE()@,
   @@FOR-EACH END
  } @PARAM-NAME@;
@@END-TEMPLATE NAME="MAP-ENUM"






@@-----------  processing SEQUENCEs (detailed list )  -----------------


@@BEGIN-TEMPLATE NAME="SEQUENCE-SIZE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        @PARAM-NAME@.size() 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        (@PARAM-NAME@ != nullptr ? 1 : 0) 
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SEQUENCE-SIZE"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_BEGIN"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        auto& @PARAM-ITERATOR@ = @PARAM-NAME@.begin() 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        auto @PARAM-ITERATOR@ = @PARAM-NAME@ != nullptr ? &@PARAM-NAME@ : nullptr
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_BEGIN"


@@BEGIN-TEMPLATE NAME="SERILAIZE_IS_SEQUENCE_END"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        @PARAM-ITERATOR@ == @PARAM-NAME@.end() 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        @PARAM-ITERATOR@ == nullptr
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_IS_SEQUENCE_END"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_NEXT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        ++@PARAM-ITERATOR@ 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        @PARAM-ITERATOR@ = nullptr
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_NEXT"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        auto& @PARAM-OBJECT@ = *@PARAM-ITERATOR@;
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        auto& @PARAM-OBJECT@ = **@PARAM-ITERATOR@;
@@ELSE
//        auto& @PARAM-OBJECT@ = *@PARAM-ITERATOR@; // why am I here?!
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR"


@@BEGIN-TEMPLATE NAME="DESERILAIZE_SEQUENCE_DECLARE_TMP_OBJECT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        @PARAM-TMP-OBJECT@;
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        &@PARAM-TMP-OBJECT@ = *(new 
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        );
@@ELSE
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        @PARAM-TMP-OBJECT@;
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_SEQUENCE_DECLARE_TMP_OBJECT"


@@BEGIN-TEMPLATE NAME="DESERILAIZE_SEQUENCE_ADD_NEXT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        @PARAM-NAME@.push_back(std::move(@PARAM-TMP-OBJECT@)) 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        @PARAM-NAME@.reset(&@PARAM-TMP-OBJECT@) 
@@ELSE
        @PARAM-NAME@._add_item(&@PARAM-TMP-OBJECT@);
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_SEQUENCE_ADD_NEXT"




@@-----------  processing SEQUENCEs (shortcuts )  -----------------


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_BEGIN"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        for( auto& @PARAM-OBJECT@ : @PARAM-NAME@ )
		{ 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        if ( @PARAM-NAME@ != nullptr )
		{
		   auto& @PARAM-OBJECT@ = *@PARAM-NAME@;
@@ELSE
        for( auto& iter_@PARAM-OBJECT@ = @PARAM-NAME@._begin_sequence(); !@PARAM-NAME@._is_sequence_end(iter_@PARAM-OBJECT@); @PARAM-NAME@._sequence_next(iter_@PARAM-OBJECT@))
		{
		   auto& @PARAM-OBJECT@ = *iter_@PARAM-OBJECT@;
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_BEGIN"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_END"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        } 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        } 
@@ELSE
        } 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_END"




@@-----------  processing DICTIONARY's (shortcuts )  -----------------


@@BEGIN-TEMPLATE NAME="DESERILAIZE_DICTIONARY_DECLARE_TMP_OBJECTS"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "map"
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
        @PARAM-TMP-OBJECT@_key;
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        @PARAM-TMP-OBJECT@_value;
@@ELSE
@@ASSERT 0 MSG="Error: processing dictionaries other than @"maps"@ are not implemented"
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_DICTIONARY_DECLARE_TMP_OBJECTS"


@@BEGIN-TEMPLATE NAME="DESERILAIZE_DICTIONARY_ADD_NEXT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "map"
        @PARAM-NAME@.insert( make_pair( @PARAM-TMP-OBJECT@_key, @PARAM-TMP-OBJECT@_value ) )
@@ELSE
@@ASSERT 0 MSG="Error: processing dictionaries other than @"maps"@ are not implemented"
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_DICTIONARY_ADD_NEXT"


@@BEGIN-TEMPLATE NAME="SERILAIZE_DICTIONARY_ITERATION_BEGIN"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "map"
        for( auto& @PARAM-OBJECT@ : @PARAM-NAME@ )
		{ 
@@ELSE
   ASSERT 0
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_DICTIONARY_ITERATION_BEGIN"


@@BEGIN-TEMPLATE NAME="SERILAIZE_DICTIONARY_ITERATION_END"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "map"
        } 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        } 
@@ELSE
        } 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_DICTIONARY_ITERATION_END"






@@-----------  processing DISCRIMINATED-UNIONs  -----------------


@@BEGIN-TEMPLATE NAME="MAPPING-DISCRIMINATOR-NAME"
@@ASSERT IS-SERIALIZABLE-OBJECT(PARAM-DU)
@@-- we may want to have different option for different mapping types (say, unique_ptr, etc)
      @PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@ 
@@END-TEMPLATE NAME="MAPPING-DISCRIMINATOR-NAME"






@@-----------  yet unsorted staff  -----------------


