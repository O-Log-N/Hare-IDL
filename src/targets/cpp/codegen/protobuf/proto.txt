
@@--------   COMMON FUNCTIONS   --------

@@BEGIN-FUNCTION NAME="FUNCTION-GET-ALL-MAPS" PARAM-ROOT
  @@ASSERT IS-ROOT(PARAM-ROOT)
  @@LET LOCAL-ALL-MAPS=CREATE-LIST()
  @@LET LOCAL-NAMES=CREATE-MAP()
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
    @@FOR-EACH LOCAL-PS-MEMBER IN LOCAL-PS-IT.MEMBERS()
      @@IF LOCAL-PS-MEMBER.MEMBER-TYPE().IS-DICTIONARY()
        @@LET LOCAL-NAME=FUNCTION-GET-PROTO-MAP-NAME(LOCAL-PS-MEMBER.MEMBER-TYPE())
        @@IF LOCAL-NAMES.FIND-IN-MAP( LOCAL-NAME ).HAS-VALUE()
        @@ELSE
          @@LET LOCAL-ALL-MAPS=LOCAL-ALL-MAPS.APPEND-TO-LIST( LOCAL-PS-MEMBER.MEMBER-TYPE() )
          @@LET LOCAL-NAMES=LOCAL-NAMES.ASSIGN( LOCAL-NAME, "" )
        @@ENDIF
      @@ENDIF
    @@FOR-EACH END
  @@FOR-EACH END
  @@FOR-EACH LOCAL-DU-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
    @@FOR-EACH LOCAL-DU-OPTION IN LOCAL-DU-IT.DISCRIMINATED-UNION-OPTIONS()
      @@FOR-EACH LOCAL-DU-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
        @@IF LOCAL-DU-MEMBER.MEMBER-TYPE().IS-DICTIONARY()
          @@LET LOCAL-NAME=FUNCTION-GET-PROTO-MAP-NAME(LOCAL-DU-MEMBER.MEMBER-TYPE())
          @@IF LOCAL-NAMES.FIND-IN-MAP( LOCAL-NAME ).HAS-VALUE()
          @@ELSE
            @@LET LOCAL-ALL-MAPS=LOCAL-ALL-MAPS.APPEND-TO-LIST( LOCAL-PS-MEMBER.MEMBER-TYPE() )
            @@LET LOCAL-NAMES=LOCAL-NAMES.ASSIGN( LOCAL-NAME, "" )
          @@ENDIF
          @@ENDIF
      @@FOR-EACH END
    @@FOR-EACH END
  @@FOR-EACH END
  @@RETURN LOCAL-ALL-MAPS
@@END-FUNCTION NAME="FUNCTION-GET-ALL-MAPS"


@@--------   PROTO DEFINITION   --------


@@BEGIN-TEMPLATE NAME="PROTO-GENERATE"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="PROTO-DU-OR-STRUCT" PARAM-DU-OR-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-DU-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
    @@IF LOCAL-DU-IT.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
      @@INCLUDE TEMPLATE="PROTO-DU-OWNING-PTR" PARAM-DU=LOCAL-DU-IT
    @@ELSE
      @@INCLUDE TEMPLATE="PROTO-DU-OR-STRUCT" PARAM-DU-OR-STRUCT=LOCAL-DU-IT
    @@ENDIF
  @@FOR-EACH END
  @@LET LOCAL-MAPS=FUNCTION-GET-ALL-MAPS(PARAM-ROOT)
  @@FOR-EACH LOCAL-MAP-IT IN LOCAL-MAPS
    @@INCLUDE TEMPLATE="PROTO-MESSAGE-MAP" PARAM-TYPE=LOCAL-MAP-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="PROTO-GENERATE"


@@BEGIN-TEMPLATE NAME="PROTO-DU-OWNING-PTR"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
message @PARAM-DU.STRUCT-NAME()@ {
  @@LET LOCAL-DISC=PARAM-DU.MAPPING-DISCRIMINATOR-NAME()
  @@LET LOCAL-MEMCTR=1
  @@FOR-EACH LOCAL-MEMBER IN PARAM-DU.MEMBERS()
    @@IF LOCAL-MEMBER.MAPPING-MEMBER-NAME()!=LOCAL-DISC
      @@INCLUDE TEMPLATE="PROTO-TYPE" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-NAME=LOCAL-MEMBER.MAPPING-MEMBER-NAME().CAMEL-CASE-TO-LOWER-UNDERSCORE() PARAM-MEMCTR=LOCAL-MEMCTR
    @@ENDIF
    @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
  @@FOR-EACH END
}
@@END-TEMPLATE NAME="PROTO-DU-OWNING-PTR"

@@BEGIN-TEMPLATE NAME="PROTO-DU-OR-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-DU-OR-STRUCT) || IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU-OR-STRUCT)
message @PARAM-DU-OR-STRUCT.STRUCT-NAME()@ {
  @@LET LOCAL-MEMCTR=1
  @@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OR-STRUCT.MEMBERS()
    @@INCLUDE TEMPLATE="PROTO-TYPE" PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE() PARAM-NAME=LOCAL-MEMBER.MAPPING-MEMBER-NAME().CAMEL-CASE-TO-LOWER-UNDERSCORE() PARAM-MEMCTR=LOCAL-MEMCTR
    @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
  @@FOR-EACH END
}
@@END-TEMPLATE NAME="PROTO-DU-OR-STRUCT"


@@BEGIN-TEMPLATE NAME="PROTO-MESSAGE-MAP"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@ASSERT PARAM-TYPE.IS-DICTIONARY()
message @FUNCTION-GET-PROTO-MAP-NAME(PARAM-TYPE)@ {
      @@INCLUDE TEMPLATE="PROTO-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2() PARAM-NAME="key" PARAM-MEMCTR="1"
      @@INCLUDE TEMPLATE="PROTO-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE() PARAM-NAME="value" PARAM-MEMCTR="2" 
}
@@END-TEMPLATE NAME="PROTO-MESSAGE-MAP"


@@BEGIN-TEMPLATE NAME="PROTO-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (  PARAM-TYPE.IS-FLOATING-POINT()) || (PARAM-TYPE.IS-CHARACTER-STRING())
  optional @FUNCTION-GET-PROTO-NAME(PARAM-TYPE)@ @PARAM-NAME@ = @PARAM-MEMCTR@;
@@ELIF PARAM-TYPE.IS-STRUCTURE()
  optional @FUNCTION-GET-PROTO-NAME(PARAM-TYPE)@  @PARAM-NAME@ = @PARAM-MEMCTR@;
@@ELIF PARAM-TYPE.IS-ENUM()
   optional @FUNCTION-GET-PROTO-NAME(PARAM-TYPE)@  @PARAM-NAME@ = @PARAM-MEMCTR@;
@@ELIF PARAM-TYPE.IS-SEQUENCE()
  @@IF FUNCTION-IS-FIXED-SIZE-TYPE( PARAM-TYPE.COLLECTION-TYPE() )
  repeated @FUNCTION-GET-PROTO-NAME(PARAM-TYPE.COLLECTION-TYPE())@ @PARAM-NAME@ = @PARAM-MEMCTR@ [packed=true];
  @@ELSE
  repeated @FUNCTION-GET-PROTO-NAME(PARAM-TYPE.COLLECTION-TYPE())@ @PARAM-NAME@ = @PARAM-MEMCTR@;
  @@ENDIF
@@ELIF PARAM-TYPE.IS-DICTIONARY()
  //  map< @FUNCTION-GET-PROTO-NAME(PARAM-TYPE.COLLECTION-TYPE2())@ , @FUNCTION-GET-PROTO-NAME(PARAM-TYPE.COLLECTION-TYPE())@ > @PARAM-NAME@ = @PARAM-MEMCTR@;
  repeated @FUNCTION-GET-PROTO-MAP-NAME(PARAM-TYPE)@ @PARAM-NAME@ = @PARAM-MEMCTR@;
@@ENDIF
@@END-TEMPLATE NAME="PROTO-TYPE"



@@BEGIN-FUNCTION NAME="FUNCTION-GET-PROTO-NAME" PARAM-TYPE
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.IS-INTEGER()
  @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER()
    @@IF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(1)
     @@RETURN "bool"
    @@ELIF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(32)
     @@RETURN "uint32"  
    @@ELIF PARAM-TYPE.IS-UNSIGNED-INTEGER-FITTING-UINT(64)
     @@RETURN "uint64"  
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ELSE
    @@IF PARAM-TYPE.IS-SIGNED-INTEGER-FITTING-INT(32)
     @@RETURN "sint32"  
    @@ELIF PARAM-TYPE.IS-SIGNED-INTEGER-FITTING-INT(64)
     @@RETURN "sint64"
    @@ELSE
      @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
    @@ENDIF
  @@ENDIF
  @@ELIF PARAM-TYPE.IS-FIXED-POINT()
     @@RETURN "double"
@@ELIF PARAM-TYPE.IS-FLOATING-POINT()
  @@IF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(24,8)
     @@RETURN "float"
  @@ELIF PARAM-TYPE.IS-FLOATING-POINT-FITTING-FLOAT(53,11)
     @@RETURN "double"
  @@ELSE
    @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
  @@ENDIF
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
     @@RETURN "string"
@@ELIF PARAM-TYPE.IS-STRUCTURE()
     @@RETURN "@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ELIF PARAM-TYPE.IS-ENUM()
     @@RETURN "uint32"  
@@ELSE
    @@ASSERT "0" MSG="Cannot process sequence for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
@@ENDIF
@@END-FUNCTION NAME="FUNCTION-GET-PROTO-NAME"

@@BEGIN-FUNCTION NAME="FUNCTION-GET-PROTO-MAP-NAME" PARAM-TYPE
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@ASSERT PARAM-TYPE.IS-DICTIONARY()
  @@RETURN "@PARAM-TYPE.MAPPING-MEMBER-TYPE()@_@FUNCTION-GET-PROTO-NAME(PARAM-TYPE.COLLECTION-TYPE2())@_@FUNCTION-GET-PROTO-NAME(PARAM-TYPE.COLLECTION-TYPE())@"
@@END-FUNCTION NAME="FUNCTION-GET-PROTO-MAP-NAME"

@@BEGIN-FUNCTION NAME="FUNCTION-IS-FIXED-SIZE-TYPE" PARAM-TYPE
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@RETURN (PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT()) || (PARAM-TYPE.IS-ENUM())
@@END-FUNCTION NAME="FUNCTION-IS-FIXED-SIZE-TYPE"

