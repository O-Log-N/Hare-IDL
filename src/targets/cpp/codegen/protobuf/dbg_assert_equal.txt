
@@--------   COMPARISON   --------


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-STRUCT-DECLARE-FN-ONLY" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-DECLARATIONS"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-IMPLEMENTATIONS"



@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-STRUCT-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right );
@@END-TEMPLATE NAME="ASSERT-EQUAL-STRUCT-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right ) {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-S-FOR-EACH-OF-MEMBERS" PARAM-NAME-LEFT=FUNCTION-GET-REF-TO-MEMBER("left", LOCAL-MEMBER) PARAM-NAME-RIGHT=FUNCTION-GET-REF-TO-MEMBER("right", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@"
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="ASSERT-EQUAL-STRUCT"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="ASSERT-EQUAL-TYPE" PARAM-NAME-LEFT="@PARAM-NAME-LEFT@" PARAM-NAME-RIGHT="@PARAM-NAME-RIGHT@" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE()
@@END-TEMPLATE NAME="ASSERT-EQUAL-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF ((PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT()) || (PARAM-TYPE.IS-CHARACTER-STRING()) || (PARAM-TYPE.IS-ENUM()))
    assert(@PARAM-NAME-LEFT@ == @PARAM-NAME-RIGHT@);
@@ELIF PARAM-TYPE.IS-STRUCTURE()
    assertEqual@PARAM-STRUCT.STRUCT-NAME()@(@PARAM-NAME-LEFT@ , @PARAM-NAME-RIGHT@);
@@ELIF PARAM-TYPE.IS-SEQUENCE()
    {
      auto it1 = @PARAM-NAME-LEFT@.begin();
      auto it1_end = @PARAM-NAME-LEFT@.end();
      auto it2 = @PARAM-NAME-RIGHT@.begin();
      auto it2_end = @PARAM-NAME-RIGHT@.end();
      for (; it1 != it1_end && it2 != it2_end; ++it1, ++it2)
  @@IF PARAM-TYPE.COLLECTION-TYPE().IS-STRUCTURE()
      assertEqual@PARAM-TYPE.COLLECTION-TYPE().STRUCT-NAME()@(*it1, *it2);
  @@ELSE
      assert(*it1 == *it2);
  @@ENDIF
      assert(it1 == it1_end);
      assert(it2 == it2_end);
    }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
    for(auto item:@PARAM-NAME@) {
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
      @@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
    }
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="ASSERT-EQUAL-TYPE"





@@--------   ARE-EQUAL2   --------


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL2-STRUCT-DECLARE-FN-ONLY" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="ASSERT-EQUAL2-GENERATE-DECLARATIONS"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL2-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
@@END-TEMPLATE NAME="ASSERT-EQUAL2-GENERATE-IMPLEMENTATIONS"



@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-STRUCT-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const pb::@PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right );
@@END-TEMPLATE NAME="ASSERT-EQUAL2-STRUCT-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const pb::@PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right ) {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-S-FOR-EACH-OF-MEMBERS" PARAM-NAME-LEFT=FUNCTION-GET-REF-TO-MEMBER("left", LOCAL-MEMBER) PARAM-NAME-RIGHT="@FUNCTION-GET-REF-TO-MEMBER("right", LOCAL-MEMBER)@()" PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@"
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="ASSERT-EQUAL2-STRUCT"

