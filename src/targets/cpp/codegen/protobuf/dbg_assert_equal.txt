
@@--------   COMPARISON   --------


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END

@@END-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-DECLARATIONS"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-DECLARE-FN-ONLY"
inline void assertEqual@PARAM-NAME@( const @PARAM-MAPPING-NAME@& left, const @PARAM-MAPPING-NAME@& right );
@@END-TEMPLATE NAME="ASSERT-EQUAL-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
    @@IF LOCAL-PS-IT.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-DU-OWNING-PTR" PARAM-DU=LOCAL-PS-IT
    @@ELSE
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-DU" PARAM-DU=LOCAL-PS-IT
    @@ENDIF
  @@FOR-EACH END
@@END-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-IMPLEMENTATIONS"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-DU"
@@ASSERT "0" MSG="ASSERT-EQUAL-DU not implemented yet"
@@END-TEMPLATE NAME="ASSERT-EQUAL-DU"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-DU-OWNING-PTR"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@ASSERT PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
inline void assertEqual@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& left, const @PARAM-DU.MAPPING-STRUCT-NAME()@& right ) {

  if(left.get() == nullptr) {
    assert(right.get() == nullptr);
  }

  @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
   @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
    @@ASSERT LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" ).HAS-VALUE()
    @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.MEMBER-TYPE().ENCODING-MEMBER-TYPE()
  else if ( typeid( *left ) == typeid( @LOCAL-POLY-PTR@ ) ) {
    auto l = dynamic_cast<@LOCAL-POLY-PTR@*>(left.get());

    assert (typeid(*right) == typeid( @LOCAL-POLY-PTR@ ));
    auto r = dynamic_cast<@LOCAL-POLY-PTR@*>(right.get());

    assertEqual@LOCAL-POLY-PTR@(*l , *r);
  }
     @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   @@FOR-EACH END

   else {
     assert(false);
   }
}
@@END-TEMPLATE NAME="ASSERT-EQUAL-DU-OWNING-PTR"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right ) {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-TYPE" PARAM-NAME-LEFT=FUNCTION-GET-REF-TO-MEMBER("left", LOCAL-MEMBER) PARAM-NAME-RIGHT=FUNCTION-GET-REF-TO-MEMBER("right", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE()
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="ASSERT-EQUAL-STRUCT"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF ((PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT()) || (PARAM-TYPE.IS-CHARACTER-STRING()) || (PARAM-TYPE.IS-ENUM()))
    assert(@PARAM-NAME-LEFT@ == @PARAM-NAME-RIGHT@);
@@ELIF PARAM-TYPE.IS-STRUCTURE()
    assertEqual@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME-LEFT@ , @PARAM-NAME-RIGHT@);
@@ELIF PARAM-TYPE.IS-SEQUENCE()
    {
      auto it1 = @PARAM-NAME-LEFT@.begin();
      auto it1_end = @PARAM-NAME-LEFT@.end();
      auto it2 = @PARAM-NAME-RIGHT@.begin();
      auto it2_end = @PARAM-NAME-RIGHT@.end();
      for (; it1 != it1_end && it2 != it2_end; ++it1, ++it2) {
  @@IF PARAM-TYPE.COLLECTION-TYPE().IS-STRUCTURE()
      assertEqual@PARAM-TYPE.COLLECTION-TYPE().ENCODING-MEMBER-TYPE()@(*it1, *it2);
  @@ELSE
      assert(*it1 == *it2);
  @@ENDIF
      }
      assert(it1 == it1_end);
      assert(it2 == it2_end);
    }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
    {
      auto it1 = @PARAM-NAME-LEFT@.begin();
      auto it1_end = @PARAM-NAME-LEFT@.end();
      auto it2 = @PARAM-NAME-RIGHT@.begin();
      auto it2_end = @PARAM-NAME-RIGHT@.end();
      for (; it1 != it1_end && it2 != it2_end; ++it1, ++it2) {
  @@IF PARAM-TYPE.COLLECTION-TYPE2().IS-STRUCTURE()
      assertEqual@PARAM-TYPE.COLLECTION-TYPE2().ENCODING-MEMBER-TYPE()@(it1->first, it2->first);
  @@ELSE
      assert(it1->first == it2->first);
  @@ENDIF
  @@IF PARAM-TYPE.COLLECTION-TYPE().IS-STRUCTURE()
      assertEqual@PARAM-TYPE.COLLECTION-TYPE().ENCODING-MEMBER-TYPE()@(it1->second, it2->second);
  @@ELSE
      assert(it1->second == it2->second);
  @@ENDIF
      }
      assert(it1 == it1_end);
      assert(it2 == it2_end);
    }
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="ASSERT-EQUAL-TYPE"





@@--------   ARE-EQUAL-2-GPB   --------


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-2-GPB-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-2-GPB-DECLARE-FN-ONLY" PARAM-NAME=LOCAL-PS-IT.STRUCT-NAME() PARAM-MAPPING-NAME=LOCAL-PS-IT.MAPPING-STRUCT-NAME()
  @@FOR-EACH END
@@END-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-GENERATE-DECLARATIONS"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-DECLARE-FN-ONLY"
inline void assertEqual@PARAM-NAME@( const @PARAM-MAPPING-NAME@& left, const pb::@PARAM-NAME@& right );
@@END-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-2-GPB-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
    @@IF LOCAL-PS-IT.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-2-GPB-DU-OWNING-PTR" PARAM-DU=LOCAL-PS-IT
    @@ELSE
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-2-GPB-DU" PARAM-DU=LOCAL-PS-IT
    @@ENDIF
  @@FOR-EACH END
@@END-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-GENERATE-IMPLEMENTATIONS"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
inline void assertEqual@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& left, const pb::@PARAM-DU.STRUCT-NAME()@& right ) {

  @FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE(PARAM-DU, "left", "disc")@
  assert(disc == right.discriminator());

  switch ( disc )
  {
  @@LET LOCAL-MEMCTR=2
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    case @LOCAL-DU-OPTION.ENCODING-DISCRIMINATED-UNION-OPTION-VALUE()@:
    {
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
      @@IF LOCAL-POLY-PTR.HAS-VALUE()
        @@LET LOCAL-RIGHT-NAME="du_@LOCAL-MEMBER.MAPPING-MEMBER-NAME().CAMEL-CASE-TO-LOWER-UNDERSCORE()@()"
         auto l = dynamic_cast<@LOCAL-POLY-PTR@*>(left.get());
         assertEqual@LOCAL-MEMBER.MEMBER-TYPE().ENCODING-MEMBER-TYPE()@( *l , right.@LOCAL-RIGHT-NAME@ );
      @@ELSE
        @@IF LOCAL-MEMBER.MEMBER-TYPE().IS-ENUM()
          @@INCLUDE TEMPLATE="ASSERT-EQUAL-2-GPB-ENUM" PARAM-MEMBER=LOCAL-MEMBER
        @@ELIF LOCAL-MEMBER.MEMBER-TYPE().IS-DICTIONARY()
          @@INCLUDE TEMPLATE="ASSERT-EQUAL-2-GPB-MAP" PARAM-MEMBER=LOCAL-MEMBER
        @@ELSE
          @@INCLUDE TEMPLATE="ASSERT-EQUAL-TYPE" PARAM-NAME-LEFT=FUNCTION-GET-REF-TO-MEMBER("left", LOCAL-MEMBER) PARAM-NAME-RIGHT=FUNCTION-GET-REF-TO-MEMBER-PROTO("right", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE()
        @@ENDIF
      @@ENDIF
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
    @@FOR-EACH END
    }
    break;
  @@FOR-EACH END
    //default:
      //assert( false );
  }
}
@@END-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-DU"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-DU-OWNING-PTR"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@ASSERT PARAM-DU.GET-MAPPING-ANNOTATION( "OWNING-PTR" ).HAS-VALUE()
inline void assertEqual@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& left, const pb::@PARAM-DU.STRUCT-NAME()@& right ) {

  //@FUNCTION-DECLEAR-AND-GET-DISCRIMINATOR-VALUE(PARAM-DU, "left", "disc")@

  if(left.get() == nullptr) {
    ;//do nothing
  }

  @@LET LOCAL-MEMCTR=1
  @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
    @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
      @@ASSERT LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" ).HAS-VALUE()
      @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.MEMBER-TYPE().ENCODING-MEMBER-TYPE()
      @@LET LOCAL-RIGHT-NAME="du_@LOCAL-MEMBER.MAPPING-MEMBER-NAME().CAMEL-CASE-TO-LOWER-UNDERSCORE()@()"
  else if ( typeid( *left ) == typeid( @LOCAL-POLY-PTR@ ) ) {
    auto l = dynamic_cast<@LOCAL-POLY-PTR@*>(left.get());

    assertEqual@LOCAL-POLY-PTR@( *l , right.@LOCAL-RIGHT-NAME@ );
  }
      @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
    @@FOR-EACH END
  @@FOR-EACH END

   else {
     assert(false);
   }
}
@@END-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-DU-OWNING-PTR"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const pb::@PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right ) {
  @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
    @@IF LOCAL-MEMBER.MEMBER-TYPE().IS-ENUM()
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-2-GPB-ENUM" PARAM-MEMBER=LOCAL-MEMBER
    @@ELIF LOCAL-MEMBER.MEMBER-TYPE().IS-DICTIONARY()
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-2-GPB-MAP" PARAM-MEMBER=LOCAL-MEMBER
    @@ELSE
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-TYPE" PARAM-NAME-LEFT=FUNCTION-GET-REF-TO-MEMBER("left", LOCAL-MEMBER) PARAM-NAME-RIGHT=FUNCTION-GET-REF-TO-MEMBER-PROTO("right", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE=LOCAL-MEMBER.MEMBER-TYPE()
    @@ENDIF
  @@FOR-EACH END
}
@@END-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-STRUCT"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-ENUM"
@@ASSERT PARAM-MEMBER.MEMBER-TYPE().IS-ENUM()
    switch ( @FUNCTION-GET-REF-TO-MEMBER("left", PARAM-MEMBER)@ )
    {
  @@LET LOCAL-NAME-RIGHT=FUNCTION-GET-REF-TO-MEMBER-PROTO("right", PARAM-MEMBER)
  @@FOR-EACH LOCAL-ENUM-VAL IN PARAM-MEMBER.MEMBER-TYPE().ENUM-VALUES()
        case @LOCAL-ENUM-VAL.ENUM-VALUE-NAME()@ /* @LOCAL-ENUM-VAL.MAPPING-ENUM-VALUE-VALUE()@ */: assert(@LOCAL-NAME-RIGHT@ == @LOCAL-ENUM-VAL.ENCODING-ENUM-VALUE-VALUE()@ ); break;
  @@FOR-EACH END
        default: assert( false );
    }
@@END-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-ENUM"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-MAP"
@@ASSERT PARAM-MEMBER.MEMBER-TYPE().IS-DICTIONARY()
    @@LET LOCAL-NAME-LEFT=FUNCTION-GET-REF-TO-MEMBER("left", PARAM-MEMBER)
    @@LET LOCAL-NAME-RIGHT=FUNCTION-GET-REF-TO-MEMBER-PROTO("right", PARAM-MEMBER)
    {
      auto it1 = @LOCAL-NAME-LEFT@.begin();
      auto it1_end = @LOCAL-NAME-LEFT@.end();
      auto it2 = @LOCAL-NAME-RIGHT@.begin();
      auto it2_end = @LOCAL-NAME-RIGHT@.end();
      for (; it1 != it1_end && it2 != it2_end; ++it1, ++it2) {
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-TYPE" PARAM-NAME-LEFT="it1->first" PARAM-NAME-RIGHT="it2->key()" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE().COLLECTION-TYPE2()
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-TYPE" PARAM-NAME-LEFT="it1->second" PARAM-NAME-RIGHT="it2->value()" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE().COLLECTION-TYPE()
      }
      assert(it1 == it1_end);
      assert(it2 == it2_end);
    }
@@END-TEMPLATE NAME="ASSERT-EQUAL-2-GPB-MAP"
