
@@--------   COMPARISON   --------


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-STRUCT-DECLARE-FN-ONLY" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-DU-DECLARE-FN-ONLY" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END

@@END-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-DECLARATIONS"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL-DU" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END

@@END-TEMPLATE NAME="ASSERT-EQUAL-GENERATE-IMPLEMENTATIONS"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-DU-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
inline void assertEqual@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& left, const @PARAM-DU.MAPPING-STRUCT-NAME()@& right );
@@END-TEMPLATE NAME="ASSERT-EQUAL-DU-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
inline void assertEqual@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& left, const @PARAM-DU.MAPPING-STRUCT-NAME()@& right ) {

  if(left.get() == nullptr) {
    assert(right.get() == nullptr);
  }

  @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
   @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
     @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
     @@IF LOCAL-POLY-PTR.HAS-VALUE()
       else if ( typeid( *left ) == typeid( @LOCAL-POLY-PTR@ ) ) {
         assert (typeid(*right) == typeid( @LOCAL-POLY-PTR@ ));
         auto l = dynamic_cast<@LOCAL-POLY-PTR@*>(left.get());
         auto r = dynamic_cast<@LOCAL-POLY-PTR@*>(right.get());

         assertEqual@LOCAL-MEMBER.MEMBER-TYPE().ENCODING-MEMBER-TYPE()@(*l , *r);
       }
    @@ENDIF
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   @@FOR-EACH END

   else {
     assert(false);
   }
}
@@END-TEMPLATE NAME="ASSERT-EQUAL-DU"

@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-STRUCT-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right );
@@END-TEMPLATE NAME="ASSERT-EQUAL-STRUCT-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right ) {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-S-FOR-EACH-OF-MEMBERS" PARAM-NAME-LEFT=FUNCTION-GET-REF-TO-MEMBER("left", LOCAL-MEMBER) PARAM-NAME-RIGHT=FUNCTION-GET-REF-TO-MEMBER("right", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@"
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="ASSERT-EQUAL-STRUCT"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="ASSERT-EQUAL-TYPE" PARAM-NAME-LEFT="@PARAM-NAME-LEFT@" PARAM-NAME-RIGHT="@PARAM-NAME-RIGHT@" PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE()
@@END-TEMPLATE NAME="ASSERT-EQUAL-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF ((PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT()) || (PARAM-TYPE.IS-CHARACTER-STRING()) || (PARAM-TYPE.IS-ENUM()))
    assert(@PARAM-NAME-LEFT@ == @PARAM-NAME-RIGHT@);
@@ELIF PARAM-TYPE.IS-STRUCTURE()
    assertEqual@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME-LEFT@ , @PARAM-NAME-RIGHT@);
@@ELIF PARAM-TYPE.IS-SEQUENCE()
    {
      auto it1 = @PARAM-NAME-LEFT@.begin();
      auto it1_end = @PARAM-NAME-LEFT@.end();
      auto it2 = @PARAM-NAME-RIGHT@.begin();
      auto it2_end = @PARAM-NAME-RIGHT@.end();
      for (; it1 != it1_end && it2 != it2_end; ++it1, ++it2)
  @@IF PARAM-TYPE.COLLECTION-TYPE().IS-STRUCTURE()
      assertEqual@PARAM-TYPE.COLLECTION-TYPE().ENCODING-MEMBER-TYPE()@(*it1, *it2);
  @@ELSE
      assert(*it1 == *it2);
  @@ENDIF
      assert(it1 == it1_end);
      assert(it2 == it2_end);
    }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
  //TODO
@@ELSE
  @@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="ASSERT-EQUAL-TYPE"





@@--------   ARE-EQUAL2   --------


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-GENERATE-DECLARATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL2-STRUCT-DECLARE-FN-ONLY" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL2-DU-DECLARE-FN-ONLY" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END

@@END-TEMPLATE NAME="ASSERT-EQUAL2-GENERATE-DECLARATIONS"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-GENERATE-IMPLEMENTATIONS"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-STRUCTS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL2-STRUCT" PARAM-STRUCT=LOCAL-PS-IT
  @@FOR-EACH END
  @@FOR-EACH LOCAL-PS-IT IN PARAM-ROOT.PUBLISHABLE-DISCRIMINATED-UNIONS()
     @@INCLUDE TEMPLATE="ASSERT-EQUAL2-DU" PARAM-DU=LOCAL-PS-IT
  @@FOR-EACH END

@@END-TEMPLATE NAME="ASSERT-EQUAL2-GENERATE-IMPLEMENTATIONS"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-DU-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
inline void assertEqual@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& left, const pb::@PARAM-DU.STRUCT-NAME()@& right );
@@END-TEMPLATE NAME="ASSERT-EQUAL2-DU-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
inline void assertEqual@PARAM-DU.STRUCT-NAME()@( const @PARAM-DU.MAPPING-STRUCT-NAME()@& left, const pb::@PARAM-DU.STRUCT-NAME()@& right ) {


  size_t du = 0;
  if(left.get() == nullptr) {
    ; // nothing
  }

  @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
   @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
     @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
     @@IF LOCAL-POLY-PTR.HAS-VALUE()
       else if ( typeid( *left ) == typeid( @LOCAL-POLY-PTR@ ) ) {
         auto l = dynamic_cast<@LOCAL-POLY-PTR@*>(left.get());

         assertEqual@LOCAL-MEMBER.MEMBER-TYPE().ENCODING-MEMBER-TYPE()@(*l , right.du_@LOCAL-MEMCTR@());
         du = @LOCAL-MEMCTR@;
       }
    @@ENDIF
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   @@FOR-EACH END

   else {
     assert(false);
   }

  @@LET LOCAL-MEMCTR=1
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
   @@FOR-EACH LOCAL-MEMBER IN LOCAL-DU-OPTION.MEMBERS()
     @@LET LOCAL-POLY-PTR = LOCAL-MEMBER.GET-MAPPING-ANNOTATION( "POLY-POINTER-TYPE" )
     @@IF LOCAL-POLY-PTR.HAS-VALUE()
       if(du != @LOCAL-MEMCTR@) assert(!right.has_du_@LOCAL-MEMCTR@());
    @@ENDIF
   @@LET LOCAL-MEMCTR=1+LOCAL-MEMCTR
   @@FOR-EACH END
   @@FOR-EACH END

}
@@END-TEMPLATE NAME="ASSERT-EQUAL2-DU"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-STRUCT-DECLARE-FN-ONLY"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const pb::@PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right );
@@END-TEMPLATE NAME="ASSERT-EQUAL2-STRUCT-DECLARE-FN-ONLY"


@@BEGIN-TEMPLATE NAME="ASSERT-EQUAL2-STRUCT"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
inline void assertEqual@PARAM-STRUCT.STRUCT-NAME()@( const @PARAM-STRUCT.MAPPING-STRUCT-NAME()@& left, const pb::@PARAM-STRUCT.MAPPING-STRUCT-NAME()@& right ) {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
     @@IF LOCAL-MEMBER.MEMBER-TYPE().IS-ENUM()
       // can't compare enum @LOCAL-MEMBER.MAPPING-MEMBER-NAME()@
     @@ELSE
      @@INCLUDE TEMPLATE="ASSERT-EQUAL-S-FOR-EACH-OF-MEMBERS" PARAM-NAME-LEFT=FUNCTION-GET-REF-TO-MEMBER("left", LOCAL-MEMBER) PARAM-NAME-RIGHT=FUNCTION-GET-REF-TO-MEMBER-PROTO("right", LOCAL-MEMBER) PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@"
     @@ENDIF
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="ASSERT-EQUAL2-STRUCT"

