

@@BEGIN-TEMPLATE NAME="SERIALIZE-DU" TYPE="DISCRIMINATED-UNION"
inline void serialize@STRUCT-NAME@( @STRUCT-NAME@& s, OStream& o ) {
@@INCLUDE-WITH DISCRIMINATED-UNION-DISCRIMINATOR() TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER" PARAM-NAME="s.@MAPPING-DISCRIMINATOR-NAME@"
   switch ( s.@MAPPING-DISCRIMINATOR-NAME@ )
   {
   @@FOR-EACH-OF DISCRIMINATED-UNION-OPTIONS() BEGIN
      @@INCLUDE TEMPLATE="SERIALIZE-DU-OPTION"
   @@FOR-EACH-OF END
   }
}

@@END-TEMPLATE NAME="SERIALIZE-DU"


@@BEGIN-TEMPLATE NAME="SERIALIZE-DU-OPTION" TYPE="DISCRIMINATED-UNION-OPTION"
      case @MAPPING-DISCRIMINATED-UNION-OPTION-VALUE@:
	  {
   @@FOR-EACH-OF MEMBERS() BEGIN
      @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MAPPING-MEMBER-NAME@" PARAM-TYPE="@ENCODING-MEMBER-TYPE@"
   @@FOR-EACH-OF END
         break;
      }
@@END-TEMPLATE NAME="SERIALIZE-DU-OPTION"




@@BEGIN-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT" TYPE="STRUCT"
inline void serialize@STRUCT-NAME@( @STRUCT-NAME@& s, OStream& o ) {
   @@FOR-EACH-OF MEMBERS() BEGIN
      @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MAPPING-MEMBER-NAME@" PARAM-TYPE="@ENCODING-MEMBER-TYPE@"
   @@FOR-EACH-OF END
}

@@END-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="SERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@" PARAM-DISTINUISHER=1
@@END-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="SERIALIZE-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT()
   o.write_@ENCODING-MEMBER-TYPE@(@PARAM-NAME@);
@@ELIF IS-CHARACTER-STRING()
   o.write_string(@PARAM-NAME@);
@@ELIF IS-STRUCTURE()
   serialize@ENCODING-MEMBER-TYPE@(@PARAM-NAME@, o);
@@ELIF IS-DISCRIMINATED-UNION()
	{
		bool is_ptr = @PARAM-NAME@ != nullptr;
		o.write_bool( is_ptr );
		if ( is_ptr )
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="SERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME="*(@PARAM-NAME@)" PARAM-DISTINUISHER=PARAM-DISTINUISHER+1
	}
@@ELIF IS-ENUM()
      switch ( @PARAM-NAME@ )
	  {
   @@LET LOCAL-ENCODING-MEMBER-TYPE="@ENCODING-MEMBER-TYPE@"
   @@FOR-EACH-OF ENUM-VALUES() BEGIN
      @@INCLUDE TEMPLATE="SERIALIZE-ENUM-VALUE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=LOCAL-ENCODING-MEMBER-TYPE
   @@FOR-EACH-OF END
        default: assert( 0 );
	  }
@@ELIF IS-SEQUENCE()
   {
   o.write_uint32_t( 
@@INCLUDE TEMPLATE="SEQUENCE-SIZE" PARAM-NAME=PARAM-NAME
     );
   for(
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_BEGIN" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@"
         ; !(
@@INCLUDE TEMPLATE="SERILAIZE_IS_SEQUENCE_END" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@"
         );
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_NEXT" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@"
         )
   {
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR" TYPE="DATATYPE" PARAM-ITERATOR=("it_@PARAM-DISTINUISHER@") PARAM-OBJECT=("obj_@PARAM-DISTINUISHER@")
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="SERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME=("obj_@PARAM-DISTINUISHER@") PARAM-DISTINUISHER=PARAM-DISTINUISHER+1
   }
   }
@@ELIF IS-DICTIONARY()
   o.write_uint32_t(@PARAM-NAME@.size());
   for(auto item:@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE2() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.first" TYPE="DATATYPE"
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.second" TYPE="DATATYPE"
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@ENCODING-MEMBER-TYPE@"
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="SERIALIZE-ENUM-VALUE" TYPE="ENUMVALUE"
        case s.@ENUM-VALUE-NAME@: o.write_@PARAM-TYPE@( @ENCODING-ENUM-VALUE-VALUE@ ); break;
@@END-TEMPLATE NAME="SERIALIZE-ENUM-VALUE"








@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU" TYPE="DISCRIMINATED-UNION"
inline bool deserialize@STRUCT-NAME@( @STRUCT-NAME@& s, IStream& i ) {
@@INCLUDE-WITH DISCRIMINATED-UNION-DISCRIMINATOR() TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER" PARAM-NAME="s.@MAPPING-DISCRIMINATOR-NAME@"
   switch ( s.
//   @MAPPING-DISCRIMINATOR-NAME@ 
@@INCLUDE TEMPLATE="MAPPING-DISCRIMINATOR-NAME"
   )
   {
   @@FOR-EACH-OF DISCRIMINATED-UNION-OPTIONS() BEGIN
      @@INCLUDE TEMPLATE="DESERIALIZE-DU-OPTION"
   @@FOR-EACH-OF END
   }
   return true;
}

@@END-TEMPLATE NAME="DESERIALIZE-DU"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU-OPTION" TYPE="DISCRIMINATED-UNION-OPTION"
      case @MAPPING-DISCRIMINATED-UNION-OPTION-VALUE@:
	  {
   @@FOR-EACH-OF MEMBERS() BEGIN
      @@INCLUDE TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MAPPING-MEMBER-NAME@" PARAM-TYPE="@ENCODING-MEMBER-TYPE@"
   @@FOR-EACH-OF END
         break;
      }
@@END-TEMPLATE NAME="DESERIALIZE-DU-OPTION"



@@BEGIN-TEMPLATE NAME="DESERIALIZE-S-CALLING-ALT" TYPE="STRUCT"
inline bool deserialize@STRUCT-NAME@( @STRUCT-NAME@& s, IStream& i ) {
   @@FOR-EACH-OF MEMBERS() BEGIN
      @@INCLUDE TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MAPPING-MEMBER-NAME@" PARAM-TYPE="@ENCODING-MEMBER-TYPE@"
   @@FOR-EACH-OF END

   return true;
}

@@END-TEMPLATE NAME="DESERIALIZE-S-CALLING-ALT"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="DESERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@" PARAM-DISTINUISHER=1
@@END-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="DECLARE-PTR-TO-OBJECT-OF-TYPE" TYPE="DATATYPE"
	   @ENCODING-MEMBER-TYPE@* @PARAM-NAME@ = new @ENCODING-MEMBER-TYPE@;
@@END-TEMPLATE NAME="DECLARE-PTR-TO-OBJECT-OF-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT()
   i.read_@ENCODING-MEMBER-TYPE@(@PARAM-NAME@);
@@ELIF IS-CHARACTER-STRING()
   i.read_string(@PARAM-NAME@);
@@ELIF IS-STRUCTURE()
   deserialize@ENCODING-MEMBER-TYPE@(@PARAM-NAME@, i);
@@ELIF IS-DISCRIMINATED-UNION()
   {
	   bool is_data;
	   i.read_bool( is_data );
	   if ( is_data )
	   {
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="DECLARE-PTR-TO-OBJECT-OF-TYPE" TYPE="DATATYPE" PARAM-NAME="s_1"
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="DESERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME="*s_1" PARAM-DISTINUISHER=PARAM-DISTINUISHER+1
	   @PARAM-NAME@.reset( s_1 );
	   }
	   else
	   {
		   @PARAM-NAME@ = nullptr;
	   }
   }
@@ELIF IS-ENUM()
   {
       uint8_t tmp;
       i.read_uint8_t(tmp);
       switch ( tmp )
       {
   @@FOR-EACH-OF ENUM-VALUES() BEGIN
      @@INCLUDE TEMPLATE="DESERIALIZE-ENUM-VALUE" PARAM-NAME="@PARAM-NAME@"
   @@FOR-EACH-OF END
          default: assert(0);
       }
   }
 
@@ELIF IS-SEQUENCE()
   {
     uint32_t size_@PARAM-DISTINUISHER@;
	 i.read_uint32_t(size_@PARAM-DISTINUISHER@);
     for(uint32_t k_@PARAM-DISTINUISHER@=0; k_@PARAM-DISTINUISHER@<size_@PARAM-DISTINUISHER@; ++k_@PARAM-DISTINUISHER@) {
@@INCLUDE TEMPLATE="DESERILAIZE_SEQUENCE_DECLARE_TMP_OBJECT" PARAM-NAME=PARAM-NAME PARAM-TMP-OBJECT="obj_@PARAM-DISTINUISHER@"
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME=("obj_"+"@PARAM-DISTINUISHER@") TYPE="DATATYPE" PARAM-DISTINUISHER=PARAM-DISTINUISHER+1
@@INCLUDE TEMPLATE="DESERILAIZE_SEQUENCE_ADD_NEXT" PARAM-NAME=PARAM-NAME PARAM-TMP-OBJECT="obj_@PARAM-DISTINUISHER@"
        ;
     }
   }
@@ELIF IS-DICTIONARY()
   for(auto item:@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE2() TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="item.first" TYPE="DATATYPE"
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="item.second" TYPE="DATATYPE"
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@ENCODING-MEMBER-TYPE@"
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE" TYPE="ENUMVALUE"
	      case @ENCODING-ENUM-VALUE-VALUE@: @PARAM-NAME@ = s.@ENUM-VALUE-NAME@; break;
@@END-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE"






@@BEGIN-TEMPLATE NAME="PRINT-DU" TYPE="DISCRIMINATED-UNION"
inline void print@STRUCT-NAME@( @STRUCT-NAME@& s ) {
   switch ( s.@MAPPING-DISCRIMINATOR-NAME@ )
   {
   @@FOR-EACH-OF DISCRIMINATED-UNION-OPTIONS() BEGIN
      @@INCLUDE TEMPLATE="PRINT-DU-OPTION"
   @@FOR-EACH-OF END
   }
}

@@END-TEMPLATE NAME="PRINT-DU"


@@BEGIN-TEMPLATE NAME="PRINT-DU-OPTION" TYPE="DISCRIMINATED-UNION-OPTION"
      case @MAPPING-DISCRIMINATED-UNION-OPTION-VALUE@:
	  {
   @@FOR-EACH-OF MEMBERS() BEGIN
      @@INCLUDE TEMPLATE="PRINT-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MAPPING-MEMBER-NAME@" PARAM-TYPE="@ENCODING-MEMBER-TYPE@"
   @@FOR-EACH-OF END
         break;
      }
@@END-TEMPLATE NAME="PRINT-DU-OPTION"


@@BEGIN-TEMPLATE NAME="DISCRIMINATED-UNION-GET-DISCRIMINATOR" TYPE="DATATYPE"
	      @PARAM-NAME@ != nullptr
@@END-TEMPLATE NAME="DISCRIMINATED-UNION-GET-DISCRIMINATOR"



@@BEGIN-TEMPLATE NAME="PRINT-S" TYPE="STRUCT"
inline void print@STRUCT-NAME@( @STRUCT-NAME@& s ) {
   @@FOR-EACH-OF MEMBERS() BEGIN
    cout << "@MAPPING-MEMBER-NAME@: ";
      @@INCLUDE TEMPLATE="PRINT-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MAPPING-MEMBER-NAME@" PARAM-TYPE="@ENCODING-MEMBER-TYPE@"
    cout << endl;
   @@FOR-EACH-OF END
}

@@END-TEMPLATE NAME="PRINT-S"


@@BEGIN-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="PRINT-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@" PARAM-DISTINUISHER=1
@@END-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="PRINT-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT() || IS-CHARACTER-STRING()
   cout << @PARAM-NAME@ << endl;
@@ELIF IS-STRUCTURE()
   print@ENCODING-MEMBER-TYPE@( @PARAM-NAME@ );
@@ELIF IS-DISCRIMINATED-UNION()
    switch ( 
@@INCLUDE TEMPLATE="DISCRIMINATED-UNION-GET-DISCRIMINATOR" TYPE="DATATYPE" PARAM-NAME=PARAM-NAME
		   )
       {
//   @@FOR-EACH-OF DISCRIMINATED-UNION-ALLOWED-PAIRS() BEGIN
//      @@INCLUDE TEMPLATE="PRINT-BY-DISCRIMINATOR" PARAM-NAME="@PARAM-NAME@"
//   @@FOR-EACH-OF END
          default: assert(0);
       }
//@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="PRINT-TYPE" TYPE="DATATYPE" PARAM-NAME="*(@PARAM-NAME@)" PARAM-DISTINUISHER=PARAM-DISTINUISHER+1
//	else
//    cout << "<null>";
@@ELIF IS-ENUM()
   cout << @PARAM-NAME@;
@@ELIF IS-SEQUENCE()
   for(
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_BEGIN" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@"
         ; !(
@@INCLUDE TEMPLATE="SERILAIZE_IS_SEQUENCE_END" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@"
         );
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_NEXT" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@"
         )
   {
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR" TYPE="DATATYPE" PARAM-ITERATOR=("it_@PARAM-DISTINUISHER@") PARAM-OBJECT=("obj_@PARAM-DISTINUISHER@")
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="PRINT-TYPE" TYPE="DATATYPE" PARAM-NAME=("obj_"+"@PARAM-DISTINUISHER@") PARAM-DISTINUISHER=PARAM-DISTINUISHER+1
   }
@@ELIF IS-DICTIONARY()
   for(auto item:@PARAM-NAME@) {
//@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@", kind: DICTIONARY
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@"
@@ENDIF
@@END-TEMPLATE NAME="PRINT-TYPE"









