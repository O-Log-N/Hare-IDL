




@@-----------  CAN DECLARE NOW?  -----------------


@@BEGIN-TEMPLATE NAME="CAN-DECLARE-DU" TYPE="DISCRIMINATED-UNION"
@@LET LOCAL-RET-VAL=1
@@FOR-EACH-OF MEMBERS() BEGIN
@@LET LOCAL-RET-VAL=LOCAL-RET-VAL+1
   @@FOR-SINGLE MEMBER-TYPE() BEGIN
      @@LET LOCAL-X=FROM-TEMPLATE TEMPLATE="IS-KNOWN-TYPE" TYPE="DATATYPE"
	  @@LET LOCAL-RET-VAL=LOCAL-RET-VAL+LOCAL-X
   @@FOR-SINGLE END
@@FOR-EACH-OF END
@@RETURN LOCAL-RET-VAL
@@END-TEMPLATE NAME="CAN-DECLARE-DU"


@@BEGIN-TEMPLATE NAME="CAN-DECLARE-STRUCT" TYPE="STRUCT"
@@FOR-EACH-OF MEMBERS() BEGIN
   @@FOR-SINGLE MEMBER-TYPE() TEMPLATE="IS-KNOWN-TYPE" TYPE="DATATYPE"
@@FOR-EACH-OF END
@@END-TEMPLATE NAME="CAN-DECLARE-STRUCT"


@@BEGIN-TEMPLATE NAME="IS-KNOWN-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT() || IS-STRUCTURE() || IS-CHARACTER-STRING()
   @@RETURN 10
@@ELIF IS-DISCRIMINATED-UNION()
   @@RETURN 100
@@ELSE
   @@RETURN 1000
@@ENDIF
@@END-TEMPLATE NAME="IS-KNOWN-TYPE"







@@-----------  GENERATION OF DECLARATIONS  -----------------


@@BEGIN-TEMPLATE NAME="MAP-DU" TYPE="DISCRIMINATED-UNION"
struct @STRUCT-NAME@ {
@@FOR-EACH-OF MEMBERS() BEGIN
   @@FOR-SINGLE MEMBER-TYPE() TEMPLATE="MAP-TYPE" TYPE="DATATYPE"
   @MAPPING-MEMBER-NAME@;
@@FOR-EACH-OF END
};

@@END-TEMPLATE NAME="MAP-DU"


@@BEGIN-TEMPLATE NAME="MAP-S-CALLING" TYPE="STRUCT"
struct @STRUCT-NAME@ {
@@FOR-EACH-OF MEMBERS() BEGIN
   @@FOR-SINGLE MEMBER-TYPE() TEMPLATE="MAP-TYPE" TYPE="DATATYPE"
   @MAPPING-MEMBER-NAME@;
@@FOR-EACH-OF END
};

@@END-TEMPLATE NAME="MAP-S-CALLING"


@@BEGIN-TEMPLATE NAME="MAP-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT() || IS-STRUCTURE()
   @MAPPING-MEMBER-TYPE@
@@ELIF IS-CHARACTER-STRING()
   std::string 
@@ELIF IS-DISCRIMINATED-UNION()
@@IF "@MAPPING-MEMBER-TYPE@" == "unique_ptr"
   @MAPPING-MEMBER-TYPE@<
@@FOR-SINGLE COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
   >
@@ELSE
   @@ASSERT "0" MSG="Cannot process member for declaring: type=@MEMBER-TYPE@"
@@ENDIF
@@ELIF IS-SEQUENCE()
   @MAPPING-MEMBER-TYPE@<
@@FOR-SINGLE COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
   >
@@ELIF IS-DICTIONARY()
   @MAPPING-MEMBER-TYPE@<
@@FOR-SINGLE COLLECTION-TYPE2() TEMPLATE="MAP-TYPE"
   ,
@@FOR-SINGLE COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
   >
@@ELIF IS-ENUM()
enum @MAPPING-MEMBER-TYPE@ {
   @@FOR-EACH-OF ENUM-VALUES() BEGIN
      @@INCLUDE TEMPLATE="MAP-ENUM-VALUE-ALT"
   @@FOR-EACH-OF END
} 
@@ELSE
   @@ASSERT "0" MSG="Cannot process member for declaring: type=@MEMBER-TYPE@"
@@ENDIF
@@END-TEMPLATE NAME="MAP-TYPE"


@@BEGIN-TEMPLATE NAME="MAP-ENUM-VALUE" TYPE="ENUMVALUE"
@ENUM-VALUE-NAME@=@ENUM-VALUE-VALUE@,
@@END-TEMPLATE NAME="MAP-ENUM-VALUE"


@@BEGIN-TEMPLATE NAME="MAP-ENUM-VALUE-ALT" TYPE="ENUMVALUE"
@@LET LOCAL-NAME="@ENUM-VALUE-NAME@"
@LOCAL-NAME@=@MAPPING-ENUM-VALUE-VALUE@, 
@@END-TEMPLATE NAME="MAP-ENUM-VALUE-ALT"






@@-----------  processing SEQUENCEs (detailed list )  -----------------


@@BEGIN-TEMPLATE NAME="SEQUENCE-SIZE" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
        @PARAM-NAME@.size() 
@@ELIF MAPPING-MEMBER-TYPE == "unique_ptr"
        (@PARAM-NAME@ != nullptr ? 1 : 0) 
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SEQUENCE-SIZE"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_BEGIN" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
        auto& @PARAM-ITERATOR@ = @PARAM-NAME@.begin() 
@@ELIF MAPPING-MEMBER-TYPE == "unique_ptr"
        auto& @PARAM-ITERATOR@ = *@PARAM-NAME@, int k=0 
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_BEGIN"


@@BEGIN-TEMPLATE NAME="SERILAIZE_IS_SEQUENCE_END" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
        @PARAM-ITERATOR@ == @PARAM-NAME@.end() 
@@ELIF MAPPING-MEMBER-TYPE == "unique_ptr"
        k 
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_IS_SEQUENCE_END"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_NEXT" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
        ++@PARAM-ITERATOR@ 
@@ELIF MAPPING-MEMBER-TYPE == "unique_ptr"
        ++k
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_NEXT"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
        auto& @PARAM-OBJECT@ = *@PARAM-ITERATOR@;
@@ELIF MAPPING-MEMBER-TYPE == "unique_ptr"
        auto& @PARAM-OBJECT@ = *@PARAM-ITERATOR@;
@@ELSE
//        auto& @PARAM-OBJECT@ = *@PARAM-ITERATOR@; // why am I here?!
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR"


@@BEGIN-TEMPLATE NAME="DESERILAIZE_SEQUENCE_DECLARE_TMP_OBJECT" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
@@FOR-SINGLE COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
        @PARAM-TMP-OBJECT@;
@@ELIF MAPPING-MEMBER-TYPE == "unique_ptr"
@@FOR-SINGLE COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
        &@PARAM-TMP-OBJECT@ = *(new 
@@FOR-SINGLE COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
        );
@@ELSE
@@FOR-SINGLE COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
        @PARAM-TMP-OBJECT@;
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_SEQUENCE_DECLARE_TMP_OBJECT"


@@BEGIN-TEMPLATE NAME="DESERILAIZE_SEQUENCE_ADD_NEXT" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
        @PARAM-NAME@.push_back(@PARAM-TMP-OBJECT@) 
@@ELIF MAPPING-MEMBER-TYPE == "unique_ptr"
        @PARAM-NAME@.reset(&@PARAM-TMP-OBJECT@) 
@@ELSE
        @PARAM-NAME@._add_item(&@PARAM-TMP-OBJECT@);
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_SEQUENCE_ADD_NEXT"




@@-----------  processing SEQUENCEs (shortcuts )  -----------------


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_BEGIN" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
        for( auto& @PARAM-OBJECT@ : @PARAM-NAME@ )
		{ 
@@ELIF MAPPING-MEMBER-TYPE == "unique_ptr"
        if ( @PARAM-NAME@ != nullptr )
		{
		   auto& @PARAM-OBJECT@ = *@PARAM-NAME@;
@@ELSE
        for( auto& iter_@PARAM-OBJECT@ = @PARAM-NAME@._begin_sequence(); !@PARAM-NAME@._is_sequence_end(iter_@PARAM-OBJECT@); @PARAM-NAME@._sequence_next(iter_@PARAM-OBJECT@))
		{
		   auto& @PARAM-OBJECT@ = *iter_@PARAM-OBJECT@;
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_BEGIN"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_END" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
        } 
@@ELIF MAPPING-MEMBER-TYPE == "unique_ptr"
        } 
@@ELSE
        } 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_END"




@@-----------  processing DISCRIMINATED-UNIONs  -----------------


@@BEGIN-TEMPLATE NAME="MAPPING-DISCRIMINATOR-NAME" TYPE="DISCRIMINATED-UNION"
@@-- we may want to have different option for different mapping types (say, unique_ptr, etc)
      @MAPPING-DISCRIMINATOR-NAME@ 
@@END-TEMPLATE NAME="MAPPING-DISCRIMINATOR-NAME"



