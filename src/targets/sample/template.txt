

@@BEGIN-TEMPLATE MAIN TYPE=ROOT
@@IF 1
@@INCLUDE TEMPLATE ROOT_1
@@ELSE
@@INCLUDE TEMPLATE ROOT_2
@@ENDIF
@@END-TEMPLATE MAIN



@@BEGIN-TEMPLATE ROOT_1 TYPE=ROOT
@@FOR-EACH-PUBLISHABLE-STRUCT BEGIN
@@OPEN-OUTPUT-FILE "IDL_@STRUCT-NAME@.java"
@@INCLUDE TEMPLATE SERIALIZE-S
@@CLOSE-OUTPUT-FILE
@@FOR-EACH-PUBLISHABLE-STRUCT END
@@END-TEMPLATE ROOT_1

@@BEGIN-TEMPLATE ROOT_2 TYPE=ROOT
@@OPEN-OUTPUT-FILE "output.h"
@@FOR-EACH-PUBLISHABLE-STRUCT TEMPLATE SERIALIZE-S
@@CLOSE-OUTPUT-FILE
@@END-TEMPLATE ROOT_2

@@BEGIN-TEMPLATE SERIALIZE-S TYPE=STRUCT
void serialize@STRUCT-NAME@( @STRUCT-NAME@& s, OStream& o ) {
@@FOR-EACH-OF-MEMBERS BEGIN
@@IF @MEMBER-TYPE@ == bool
   o.writeByte(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == float
   o.writeFloat(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == double
   o.writeDouble(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == UINT8
   o.writeByte(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == UINT16
   o.writeINT16(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == Animation
   o.writeAnimation(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == MyInventory
   o.writeMyInventory(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == NUMERIC
   o.writeNUMERIC(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == int
   o.writeINT(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == SEQUENCE
   o.writeSEQUENCE(s.@MEMBER-NAME@);
@@ELIF @MEMBER-TYPE@ == class
   o.writeClass(s.@MEMBER-NAME@);
@@ELSE
   @@ASSERT 0
@@ENDIF
@@FOR-EACH-OF-MEMBERS END
}
@@END-TEMPLATE SERIALIZE-S

@@BEGIN-TEMPLATE MAP-S TYPE=STRUCT
typedef _@STRUCT-NAME@ {
@@FOR-EACH-OF-MEMBERS BEGIN
   @MEMBER-TYPE@ @MEMBER-NAME@;
@@FOR-EACH-OF-MEMBERS END
} @STRUCTNAME@;
@@END-TEMPLATE MAP-S
