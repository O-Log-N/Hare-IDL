

@@BEGIN-TEMPLATE NAME="MAIN" TYPE="ROOT"
@@OPEN-OUTPUT-FILE FILENAME="output.h"
  @@INCLUDE TEMPLATE="V1"
@@CLOSE-OUTPUT-FILE
@@END-TEMPLATE NAME="MAIN"


@@BEGIN-TEMPLATE NAME="V1" TYPE="ROOT"
#include "simple_lib.h"

// structures

  @@INCLUDE TEMPLATE="MAP_3"
  
// serialization

  @@INCLUDE TEMPLATE="ROOT_3"
  
// deserialization

  @@INCLUDE TEMPLATE="ROOT_4"
  
// printing

  @@INCLUDE TEMPLATE="ROOT_5"
@@END-TEMPLATE NAME="V1"


@@BEGIN-TEMPLATE NAME="MAP_3" TYPE="ROOT"
  @@FOR-EACH-OF PUBLISHABLE-STRUCTS() TYPE="STRUCT" TEMPLATE="MAP-S-CALLING"
@@END-TEMPLATE NAME="MAP_3"


@@BEGIN-TEMPLATE NAME="ROOT_3" TYPE="ROOT"
  @@FOR-EACH-OF PUBLISHABLE-STRUCTS() TYPE="STRUCT" TEMPLATE="SERIALIZE-S-CALLING-ALT"
@@END-TEMPLATE NAME="ROOT_3"


@@BEGIN-TEMPLATE NAME="ROOT_4" TYPE="ROOT"
  @@FOR-EACH-OF PUBLISHABLE-STRUCTS() TYPE="STRUCT" TEMPLATE="DESERIALIZE-S-CALLING-ALT"
@@END-TEMPLATE NAME="ROOT_4"


@@BEGIN-TEMPLATE NAME="ROOT_5" TYPE="ROOT"
  @@FOR-EACH-OF PUBLISHABLE-STRUCTS() TYPE="STRUCT" TEMPLATE="PRINT-S"
@@END-TEMPLATE NAME="ROOT_5"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT" TYPE="STRUCT"
inline void serialize@STRUCT-NAME@( @STRUCT-NAME@& s, OStream& o ) {
   @@FOR-EACH-OF MEMBERS() BEGIN
      @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MEMBER-NAME@" PARAM-TYPE="@MEMBER-TYPE@"
   @@FOR-EACH-OF END
}

@@END-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="SERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@"
@@END-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="SERIALIZE-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER()
   o.writeInt32(@PARAM-NAME@);
@@ELIF IS-FIXED-POINT()
   o.writeDouble(@PARAM-NAME@);
@@ELIF IS-FLOATING-POINT()
   o.writeDouble(@PARAM-NAME@);
@@ELIF IS-CHARACTER-STRING()
   o.writeString(@PARAM-NAME@);
@@ELIF IS-STRUCTURE()
   serialize@MEMBER-TYPE@(@PARAM-NAME@, o);
@@ELIF IS-ENUM()
   o.writeInt32(@PARAM-NAME@);
@@ELIF IS-SEQUENCE()
   for(auto item:@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item" TYPE="DATATYPE"
   }
@@ELIF IS-DICTIONARY()
   for(auto item:@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE2() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.first" TYPE="DATATYPE"
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.second" TYPE="DATATYPE"
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@MEMBER-TYPE@"
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-TYPE"






@@BEGIN-TEMPLATE NAME="DESERIALIZE-S-CALLING-ALT" TYPE="STRUCT"
inline bool deserialize@STRUCT-NAME@( @STRUCT-NAME@& s, IStream& i ) {
   @@FOR-EACH-OF MEMBERS() BEGIN
      @@INCLUDE TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MEMBER-NAME@" PARAM-TYPE="@MEMBER-TYPE@"
   @@FOR-EACH-OF END

   return true;
}

@@END-TEMPLATE NAME="DESERIALIZE-S-CALLING-ALT"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="DESERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@"
@@END-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER()
   i.readUint32(@PARAM-NAME@);
@@ELIF IS-FIXED-POINT()
   i.readDouble(@PARAM-NAME@);
@@ELIF IS-FLOATING-POINT()
   i.readDouble(@PARAM-NAME@);
@@ELIF IS-CHARACTER-STRING()
   i.readString(@PARAM-NAME@);
@@ELIF IS-STRUCTURE()
   deserialize@MEMBER-TYPE@(@PARAM-NAME@, i);
@@ELIF IS-ENUM()
   i.readUint32(@PARAM-NAME@);
@@ELIF IS-SEQUENCE()
   for(auto item:@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item" TYPE="DATATYPE"
   }
@@ELIF IS-DICTIONARY()
   for(auto item:@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE2() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.first" TYPE="DATATYPE"
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.second" TYPE="DATATYPE"
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@MEMBER-TYPE@"
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE"







@@BEGIN-TEMPLATE NAME="PRINT-S" TYPE="STRUCT"
inline void print@STRUCT-NAME@( @STRUCT-NAME@& s ) {
   @@FOR-EACH-OF MEMBERS() BEGIN
    cout << "@MEMBER-NAME@: ";
      @@INCLUDE TEMPLATE="PRINT-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="@MEMBER-NAME@" PARAM-TYPE="@MAPPING-MEMBER-TYPE@"
    cout << endl;
   @@FOR-EACH-OF END
}

@@END-TEMPLATE NAME="PRINT-S"


@@BEGIN-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="PRINT-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@"
@@END-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="PRINT-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT() || IS-CHARACTER-STRING()
   cout << s.@PARAM-NAME@;
@@ELIF IS-STRUCTURE()
//@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@"
@@ELIF IS-ENUM()
   cout << s.@PARAM-NAME@;
@@ELIF IS-SEQUENCE()
   for(auto item:s.@PARAM-NAME@) {
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="PRINT-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@"
   }
@@ELIF IS-DICTIONARY()
   for(auto item:@PARAM-NAME@) {
//@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@"
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@"
@@ENDIF
@@END-TEMPLATE NAME="PRINT-TYPE"






@@BEGIN-TEMPLATE NAME="MAP-S-CALLING" TYPE="STRUCT"
typedef struct _@STRUCT-NAME@ {
@@FOR-EACH-OF MEMBERS() BEGIN
   @@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="MAP-TYPE" TYPE="DATATYPE"
   @MEMBER-NAME@;
@@FOR-EACH-OF END
} @STRUCT-NAME@;

@@END-TEMPLATE NAME="MAP-S-CALLING"


@@BEGIN-TEMPLATE NAME="MAP-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT() || IS-STRUCTURE()
   @MAPPING-MEMBER-TYPE@
@@ELIF IS-CHARACTER-STRING()
   std::string 
@@ELIF IS-SEQUENCE()
   vector<
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
   >
@@ELIF IS-DICTIONARY()
   map<
@@INCLUDE-WITH COLLECTION-TYPE2() TEMPLATE="MAP-TYPE"
   ,
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
   >
@@ELIF IS-ENUM()
enum @MAPPING-MEMBER-TYPE@ {
   @@FOR-EACH-OF ENUM-VALUES() BEGIN
      @@INCLUDE TEMPLATE="MAP-ENUM-VALUE-ALT"
   @@FOR-EACH-OF END
} 
@@ELSE
   @@ASSERT "0" MSG="Cannot process member for declaring: type=@MEMBER-TYPE@"
@@ENDIF
@@END-TEMPLATE NAME="MAP-TYPE"


@@BEGIN-TEMPLATE NAME="MAP-ENUM-VALUE" TYPE="ENUMVALUE"
@ENUM-VALUE-NAME@=@ENUM-VALUE-VALUE@,
@@END-TEMPLATE NAME="MAP-ENUM-VALUE"


@@BEGIN-TEMPLATE NAME="MAP-ENUM-VALUE-ALT" TYPE="ENUMVALUE"
@@LET LOCAL-NAME="@ENUM-VALUE-NAME@"
@LOCAL-NAME@=@ENUM-VALUE-VALUE@, 
@@END-TEMPLATE NAME="MAP-ENUM-VALUE-ALT"







