

@@BEGIN-TEMPLATE NAME="SERIALIZE-DU"
@@ASSERT IS-SERIALIZABLE-OBJECT(PARAM-DU)
inline void serialize@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.STRUCT-NAME()@& s, OStream& o ) {
@@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@" PARAM-MEMBER=PARAM-DU.DISCRIMINATED-UNION-DISCRIMINATOR()
   switch ( s.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@ )
   {
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
      @@INCLUDE TEMPLATE="SERIALIZE-DU-OPTION" PARAM-DU-OPTION=LOCAL-DU-OPTION
   @@FOR-EACH END
   }
}

@@END-TEMPLATE NAME="SERIALIZE-DU"


@@BEGIN-TEMPLATE NAME="SERIALIZE-DU-OPTION"
@@ASSERT IS-DU-OPTION(PARAM-DU-OPTION)
      case @PARAM-DU-OPTION.MAPPING-DISCRIMINATED-UNION-OPTION-VALUE()@:
	  {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OPTION.MEMBERS()
      @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@" PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@" PARAM-MEMBER=LOCAL-MEMBER
   @@FOR-EACH END
         break;
      }
@@END-TEMPLATE NAME="SERIALIZE-DU-OPTION"




@@BEGIN-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT"
@@ASSERT IS-SERIALIZABLE-OBJECT(PARAM-STRUCT)
inline void serialize@PARAM-STRUCT.STRUCT-NAME()@( @PARAM-STRUCT.STRUCT-NAME()@& s, OStream& o ) {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@" PARAM-MEMBER=LOCAL-MEMBER PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@"
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="@PARAM-NAME@" PARAM-DISTINUISHER=1 PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE()
@@END-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="SERIALIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT())
   o.write_@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
   o.write_string(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-STRUCTURE()
   serialize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@, o);
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
	{
		bool is_ptr = @PARAM-NAME@ != nullptr;
		o.write_bool( is_ptr );
		if ( is_ptr )
@@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="*(@PARAM-NAME@)" PARAM-DISTINUISHER=PARAM-DISTINUISHER+1 PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
	}
@@ELIF PARAM-TYPE.IS-ENUM()
      switch ( @PARAM-NAME@ )
	  {
   @@LET LOCAL-ENCODING-MEMBER-TYPE="@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
   @@FOR-EACH LOCAL-ENUM-VAL IN PARAM-TYPE.ENUM-VALUES()
      @@INCLUDE TEMPLATE="SERIALIZE-ENUM-VALUE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=LOCAL-ENCODING-MEMBER-TYPE PARAM-ENUM-VALUE=LOCAL-ENUM-VAL
   @@FOR-EACH END
        default: assert( 0 );
	  }
@@ELIF PARAM-TYPE.IS-SEQUENCE()
   {
   o.write_uint32_t( 
@@INCLUDE TEMPLATE="SEQUENCE-SIZE" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE
     );
   for(
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_BEGIN" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@" PARAM-TYPE=PARAM-TYPE
         ; !(
@@INCLUDE TEMPLATE="SERILAIZE_IS_SEQUENCE_END" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@" PARAM-TYPE=PARAM-TYPE
         );
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_NEXT" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@" PARAM-TYPE=PARAM-TYPE
         )
   {
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR" PARAM-ITERATOR=("it_@PARAM-DISTINUISHER@") PARAM-OBJECT=("obj_@PARAM-DISTINUISHER@") PARAM-TYPE=PARAM-TYPE
@@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME=("obj_@PARAM-DISTINUISHER@") PARAM-DISTINUISHER=PARAM-DISTINUISHER+1 PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
   }
   }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
   o.write_uint32_t(@PARAM-NAME@.size());
   for(auto item:@PARAM-NAME@) {
@@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
@@INCLUDE TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="SERIALIZE-ENUM-VALUE"
@@ASSERT IS-ENUM-VALUE(PARAM-ENUM-VALUE)
        case s.@PARAM-ENUM-VALUE.ENUM-VALUE-NAME()@: o.write_@PARAM-TYPE@( @PARAM-ENUM-VALUE.ENCODING-ENUM-VALUE-VALUE()@ ); break;
@@END-TEMPLATE NAME="SERIALIZE-ENUM-VALUE"








@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU"
@@ASSERT IS-SERIALIZABLE-OBJECT(PARAM-DU)
inline bool deserialize@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.STRUCT-NAME()@& s, IStream& i ) {
@@INCLUDE TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@" PARAM-MEMBER=PARAM-DU.DISCRIMINATED-UNION-DISCRIMINATOR()
   switch ( s.
@@INCLUDE TEMPLATE="MAPPING-DISCRIMINATOR-NAME" PARAM-DU=PARAM-DU
   )
   {
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
      @@INCLUDE TEMPLATE="DESERIALIZE-DU-OPTION" PARAM-DU-OPTION=LOCAL-DU-OPTION
   @@FOR-EACH END
   }
   return true;
}

@@END-TEMPLATE NAME="DESERIALIZE-DU"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-DU-OPTION"
@@ASSERT IS-DU-OPTION(PARAM-DU-OPTION)
      case @PARAM-DU-OPTION.MAPPING-DISCRIMINATED-UNION-OPTION-VALUE()@:
	  {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OPTION.MEMBERS()
      @@INCLUDE TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@" PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@" PARAM-MEMBER=LOCAL-MEMBER
   @@FOR-EACH END
         break;
      }
@@END-TEMPLATE NAME="DESERIALIZE-DU-OPTION"



@@BEGIN-TEMPLATE NAME="DESERIALIZE-S-CALLING-ALT"
@@ASSERT IS-SERIALIZABLE-OBJECT(PARAM-STRUCT)
inline bool deserialize@PARAM-STRUCT.STRUCT-NAME()@( @PARAM-STRUCT.STRUCT-NAME()@& s, IStream& i ) {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
      @@INCLUDE TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@" PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@" PARAM-MEMBER=LOCAL-MEMBER
   @@FOR-EACH END

   return true;
}

@@END-TEMPLATE NAME="DESERIALIZE-S-CALLING-ALT"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="@PARAM-NAME@" PARAM-DISTINUISHER=1 PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE()
@@END-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="DECLARE-PTR-TO-OBJECT-OF-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
	   @PARAM-TYPE.ENCODING-MEMBER-TYPE()@* @PARAM-NAME@ = new @PARAM-TYPE.ENCODING-MEMBER-TYPE()@;
@@END-TEMPLATE NAME="DECLARE-PTR-TO-OBJECT-OF-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT())
   i.read_@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
   i.read_string(@PARAM-NAME@);
@@ELIF PARAM-TYPE.IS-STRUCTURE()
   deserialize@PARAM-TYPE.ENCODING-MEMBER-TYPE()@(@PARAM-NAME@, i);
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
   {
	   bool is_data;
	   i.read_bool( is_data );
	   if ( is_data )
	   {
@@FOR-SINGLE  TEMPLATE="DECLARE-PTR-TO-OBJECT-OF-TYPE" PARAM-NAME="s_1" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
@@FOR-SINGLE  TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="*s_1" PARAM-DISTINUISHER=PARAM-DISTINUISHER+1 PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
	   @PARAM-NAME@.reset( s_1 );
	   }
	   else
	   {
		   @PARAM-NAME@ = nullptr;
	   }
   }
@@ELIF PARAM-TYPE.IS-ENUM()
   {
       uint8_t tmp;
       i.read_uint8_t(tmp);
       switch ( tmp )
       {
   @@FOR-EACH LOCAL-ENUM-VALUE IN PARAM-TYPE.ENUM-VALUES()
      @@INCLUDE TEMPLATE="DESERIALIZE-ENUM-VALUE" PARAM-NAME="@PARAM-NAME@" PARAM-ENUM-VALUE=LOCAL-ENUM-VALUE
   @@FOR-EACH END
          default: assert(0);
       }
   }
 
@@ELIF PARAM-TYPE.IS-SEQUENCE()
   {
     uint32_t size_@PARAM-DISTINUISHER@;
	 i.read_uint32_t(size_@PARAM-DISTINUISHER@);
     for(uint32_t k_@PARAM-DISTINUISHER@=0; k_@PARAM-DISTINUISHER@<size_@PARAM-DISTINUISHER@; ++k_@PARAM-DISTINUISHER@) {
@@INCLUDE TEMPLATE="DESERILAIZE_SEQUENCE_DECLARE_TMP_OBJECT" PARAM-NAME=PARAM-NAME PARAM-TMP-OBJECT="obj_@PARAM-DISTINUISHER@" PARAM-TYPE=PARAM-TYPE
@@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME=("obj_"+"@PARAM-DISTINUISHER@") PARAM-DISTINUISHER=PARAM-DISTINUISHER+1 PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
@@INCLUDE TEMPLATE="DESERILAIZE_SEQUENCE_ADD_NEXT" PARAM-NAME=PARAM-NAME PARAM-TMP-OBJECT="obj_@PARAM-DISTINUISHER@" PARAM-TYPE=PARAM-TYPE
        ;
     }
   }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
   for(auto item:@PARAM-NAME@) {
@@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="item.first" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
@@INCLUDE TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="item.second" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@PARAM-TYPE.ENCODING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE"
@@ASSERT IS-ENUM-VALUE(PARAM-ENUM-VALUE)
	      case @PARAM-ENUM-VALUE.ENCODING-ENUM-VALUE-VALUE()@: @PARAM-NAME@ = s.@PARAM-ENUM-VALUE.ENUM-VALUE-NAME()@; break;
@@END-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE"






@@BEGIN-TEMPLATE NAME="PRINT-DU"
@@ASSERT IS-SERIALIZABLE-OBJECT(PARAM-DU)
inline void print@PARAM-DU.STRUCT-NAME()@( @PARAM-DU.STRUCT-NAME()@& s ) {
   switch ( s.@PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@ )
   {
   @@FOR-EACH LOCAL-DU-OPTION IN PARAM-DU.DISCRIMINATED-UNION-OPTIONS()
      @@INCLUDE TEMPLATE="PRINT-DU-OPTION" PARAM-DU-OPTION=LOCAL-DU-OPTION
   @@FOR-EACH END
   }
}

@@END-TEMPLATE NAME="PRINT-DU"


@@BEGIN-TEMPLATE NAME="PRINT-DU-OPTION"
@@ASSERT IS-DU-OPTION(PARAM-DU-OPTION)
      case @PARAM-DU-OPTION.MAPPING-DISCRIMINATED-UNION-OPTION-VALUE()@:
	  {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-DU-OPTION.MEMBERS()
      @@INCLUDE TEMPLATE="PRINT-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@" PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@" PARAM-MEMBER=LOCAL-MEMBER
   @@FOR-EACH END
         break;
      }
@@END-TEMPLATE NAME="PRINT-DU-OPTION"


@@BEGIN-TEMPLATE NAME="DISCRIMINATED-UNION-GET-DISCRIMINATOR"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
	      @PARAM-NAME@ != nullptr
@@END-TEMPLATE NAME="DISCRIMINATED-UNION-GET-DISCRIMINATOR"



@@BEGIN-TEMPLATE NAME="PRINT-S"
@@ASSERT IS-SERIALIZABLE-OBJECT(PARAM-STRUCT)
inline void print@PARAM-STRUCT.STRUCT-NAME()@( @PARAM-STRUCT.STRUCT-NAME()@& s ) {
   @@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
    cout << "@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@: ";
      @@INCLUDE TEMPLATE="PRINT-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@LOCAL-MEMBER.MAPPING-MEMBER-NAME()@" PARAM-TYPE="@LOCAL-MEMBER.ENCODING-MEMBER-TYPE()@" PARAM-MEMBER=LOCAL-MEMBER
    cout << endl;
   @@FOR-EACH END
}

@@END-TEMPLATE NAME="PRINT-S"


@@BEGIN-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS"
@@ASSERT IS-MEMBER(PARAM-MEMBER)
@@INCLUDE TEMPLATE="PRINT-TYPE" PARAM-NAME="@PARAM-NAME@" PARAM-DISTINUISHER=1 PARAM-TYPE=PARAM-MEMBER.MEMBER-TYPE()
@@END-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="PRINT-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT()) || (PARAM-TYPE.IS-CHARACTER-STRING())
   cout << @PARAM-NAME@ << endl;
@@ELIF PARAM-TYPE.IS-STRUCTURE()
   print@PARAM-TYPE.ENCODING-MEMBER-TYPE()@( @PARAM-NAME@ );
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
    switch ( 
@@INCLUDE TEMPLATE="DISCRIMINATED-UNION-GET-DISCRIMINATOR" PARAM-NAME=PARAM-NAME PARAM-TYPE=PARAM-TYPE
		   )
       {
//   @@FOR-EACH-OF DISCRIMINATED-UNION-ALLOWED-PAIRS() BEGIN
//      @@INCLUDE TEMPLATE="PRINT-BY-DISCRIMINATOR" PARAM-NAME="@PARAM-NAME@"
//   @@FOR-EACH END
          default: assert(0);
       }
//@@FOR-SINGLE COLLECTION-TYPE() TEMPLATE="PRINT-TYPE" PARAM-NAME="*(@PARAM-NAME@)" PARAM-DISTINUISHER=PARAM-DISTINUISHER+1
//	else
//    cout << "<null>";
@@ELIF PARAM-TYPE.IS-ENUM()
   cout << @PARAM-NAME@;
@@ELIF PARAM-TYPE.IS-SEQUENCE()
   for(
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_BEGIN" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@" PARAM-TYPE=PARAM-TYPE
         ; !(
@@INCLUDE TEMPLATE="SERILAIZE_IS_SEQUENCE_END" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@" PARAM-TYPE=PARAM-TYPE
         );
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_NEXT" PARAM-NAME=PARAM-NAME PARAM-ITERATOR="it_@PARAM-DISTINUISHER@" PARAM-TYPE=PARAM-TYPE
         )
   {
@@INCLUDE TEMPLATE="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR" PARAM-ITERATOR=("it_@PARAM-DISTINUISHER@") PARAM-OBJECT=("obj_@PARAM-DISTINUISHER@") PARAM-TYPE=PARAM-TYPE
@@INCLUDE TEMPLATE="PRINT-TYPE" PARAM-NAME=("obj_"+"@PARAM-DISTINUISHER@") PARAM-DISTINUISHER=PARAM-DISTINUISHER+1 PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
   }
@@ELIF PARAM-TYPE.IS-DICTIONARY()
   for(auto item:@PARAM-NAME@) {
//@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@", kind: DICTIONARY
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@"
@@ENDIF
@@END-TEMPLATE NAME="PRINT-TYPE"









