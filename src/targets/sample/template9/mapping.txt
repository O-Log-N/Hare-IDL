

@@-----------  FORWARD DECLARATIONS  -----------------


@@BEGIN-TEMPLATE NAME="FORWARD-DECLARING"
@@ASSERT IS-ROOT(PARAM-ROOT)
  @@FOR-EACH LOCAL-OBJ IN PARAM-ROOT.SERIALIZABLE-OBJECTS()
        @@IF IS-SERIALIZABLE-STRUCT( LOCAL-OBJ )
struct @LOCAL-OBJ.STRUCT-NAME()@;
        @@ELIF IS-SERIALIZABLE-DISCRIMINATED-UNION( LOCAL-OBJ )
struct @LOCAL-OBJ.STRUCT-NAME()@;
        @@ELIF
	       @@ASSERT 0
        @@ENDIF
  @@FOR-EACH END
@@END-TEMPLATE NAME="FORWARD-DECLARING"




@@-----------  TESTING FOR READINESS FOR DECLARATIONS  -----------------


@@BEGIN-TEMPLATE NAME="SMART-DECLARING-ENTRY"
@@ASSERT IS-ROOT(PARAM-ROOT)
@@INCLUDE TEMPLATE="SMART-DECLARING-RECURSIVE" PARAM-PROCESSED=CREATE-MAP() PARAM-OBJECTS=PARAM-ROOT.SERIALIZABLE-OBJECTS() PARAM-ALL-NAMES=FUNCTION-GET-LIST-OF-NAMES-OF-ALL-SERIALIZABLE-OBJECTS( PARAM-ROOT.SERIALIZABLE-OBJECTS() )
@@END-TEMPLATE NAME="SMART-DECLARING-ENTRY"


@@BEGIN-FUNCTION NAME="FUNCTION-GET-LIST-OF-NAMES-OF-ALL-SERIALIZABLE-OBJECTS" PARAM-ALL-OBJECTS
@@LET LOCAL-ALL-NAMES=CREATE-MAP()
  @@FOR-EACH LOCAL-OBJ IN PARAM-ALL-OBJECTS
    @@IF IS-SERIALIZABLE-STRUCT( LOCAL-OBJ )
      @@LET LOCAL-ALL-NAMES=LOCAL-ALL-NAMES.ASSIGN( LOCAL-OBJ.STRUCT-NAME(), "" )
    @@ELIF IS-SERIALIZABLE-DISCRIMINATED-UNION( LOCAL-OBJ )
      @@LET LOCAL-ALL-NAMES=LOCAL-ALL-NAMES.ASSIGN( LOCAL-OBJ.STRUCT-NAME(), "" )
    @@ELIF
      @@ASSERT 0
    @@ENDIF
  @@FOR-EACH END
  @@RETURN LOCAL-ALL-NAMES
@@END-FUNCTION NAME="FUNCTION-GET-LIST-OF-NAMES-OF-ALL-SERIALIZABLE-OBJECTS"


@@BEGIN-TEMPLATE NAME="SMART-DECLARING-RECURSIVE"
@@LET LOCAL-PROCESSED-OBJECTS=PARAM-PROCESSED
@@LET LOCAL-REMAINING-OBJECTS=CREATE-LIST()
@@LET LOCAL-PROC-CNT=0
@@LET LOCAL-ALL-CNT=0
  @@FOR-EACH LOCAL-OBJ IN PARAM-OBJECTS
     @@LET LOCAL-ALL-CNT=LOCAL-ALL-CNT+1
     @@IF LOCAL-PROCESSED-OBJECTS.FIND-IN-MAP( LOCAL-OBJ.STRUCT-NAME() ).HAS-VALUE()
	 @@ELSE
        @@IF IS-SERIALIZABLE-STRUCT( LOCAL-OBJ )
           @@LET LOCAL-OK=FUNCTION-TEST-READINESS-STRUCT( LOCAL-OBJ, PARAM-PROCESSED, PARAM-ALL-NAMES )
	       @@IF LOCAL-OK
   @@DBG-PRINT "    =====   @LOCAL-OBJ.STRUCT-NAME()@ : OK    ======="
              @@LET LOCAL-PROC-CNT=LOCAL-PROC-CNT+1
              @@INCLUDE TEMPLATE="MAP-S-CALLING" PARAM-STRUCT=LOCAL-OBJ
		      @@LET LOCAL-PROCESSED-OBJECTS=LOCAL-PROCESSED-OBJECTS.ASSIGN( LOCAL-OBJ.STRUCT-NAME(), "" )
           @@ELSE
   @@DBG-PRINT "    =====   @LOCAL-OBJ.STRUCT-NAME()@ : FAILED    ======="
		      @@LET LOCAL-REMAINING-OBJECTS=LOCAL-REMAINING-OBJECTS.APPEND-TO-LIST( LOCAL-OBJ )
		   @@ENDIF
        @@ELIF IS-SERIALIZABLE-DISCRIMINATED-UNION( LOCAL-OBJ )
           @@LET LOCAL-OK=FUNCTION-TEST-READINESS-DU( LOCAL-OBJ, PARAM-PROCESSED, PARAM-ALL-NAMES )
	       @@IF LOCAL-OK
              @@LET LOCAL-PROC-CNT=LOCAL-PROC-CNT+1
              @@INCLUDE TEMPLATE="MAP-DU" PARAM-DU=LOCAL-OBJ
		      @@LET LOCAL-PROCESSED-OBJECTS=LOCAL-PROCESSED-OBJECTS.ASSIGN( LOCAL-OBJ.STRUCT-NAME(), "" )
           @@ELSE
		      @@LET LOCAL-REMAINING-OBJECTS=LOCAL-REMAINING-OBJECTS.APPEND-TO-LIST( LOCAL-OBJ )
		   @@ENDIF
        @@ELIF
	       @@ASSERT 0
        @@ENDIF
     @@ENDIF
  @@FOR-EACH END
  @@IF LOCAL-ALL-CNT == 0
  @@ELSE
     @@IF LOCAL-PROC-CNT == 0
	 @@ELSE
	    @@INCLUDE TEMPLATE="SMART-DECLARING-RECURSIVE" PARAM-PROCESSED=LOCAL-PROCESSED-OBJECTS PARAM-OBJECTS=LOCAL-REMAINING-OBJECTS PARAM-ALL-NAMES=PARAM-ALL-NAMES
	 @@ENDIF
  @@ENDIF
@@END-TEMPLATE NAME="SMART-DECLARING-RECURSIVE"


@@BEGIN-FUNCTION NAME="FUNCTION-TEST-READINESS-DU" PARAM-DU PARAM-PROCESSED PARAM-ALL-NAMES
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
@@FOR-EACH LOCAL-MEMBER IN PARAM-DU.MEMBERS()
   @@LET LOCAL-RETVAL=FUNCTION-TEST-READINESS-TYPE( LOCAL-MEMBER.MEMBER-TYPE(), PARAM-PROCESSED, PARAM-ALL-NAMES )
   @@ASSERT LOCAL-RETVAL
   @@IF LOCAL-RETVAL == 0
      @@RETURN 0
   @@ENDIF
@@FOR-EACH END
@@RETURN 1
@@END-FUNCTION NAME="FUNCTION-TEST-READINESS-DU"


@@BEGIN-FUNCTION NAME="FUNCTION-TEST-READINESS-STRUCT" PARAM-STRUCT PARAM-PROCESSED PARAM-ALL-NAMES
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
@@FOR-EACH LOCAL-MEMBER IN PARAM-STRUCT.MEMBERS()
   @@LET LOCAL-RETVAL=FUNCTION-TEST-READINESS-TYPE( LOCAL-MEMBER.MEMBER-TYPE(), PARAM-PROCESSED, PARAM-ALL-NAMES )
   @@IF LOCAL-RETVAL == 0
      @@DBG-PRINT "@PARAM-STRUCT.STRUCT-NAME()@.@LOCAL-MEMBER.MEMBER-TYPE().MAPPING-MEMBER-TYPE()@ : FAILED"
      @@RETURN 0
   @@ENDIF
   @@DBG-PRINT "@PARAM-STRUCT.STRUCT-NAME()@.@LOCAL-MEMBER.MEMBER-TYPE().MAPPING-MEMBER-TYPE()@ : OK"
@@FOR-EACH END
@@RETURN 1
@@END-FUNCTION NAME="FUNCTION-TEST-READINESS-STRUCT"


@@BEGIN-FUNCTION NAME="FUNCTION-TEST-READINESS-TYPE" PARAM-TYPE PARAM-PROCESSED PARAM-ALL-NAMES
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@DBG-PRINT "about to process @PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
@@IF (PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT()) || (PARAM-TYPE.IS-CHARACTER-STRING())
     @@DBG-PRINT "      [0]"
   @@RETURN 1
@@ELIF PARAM-TYPE.IS-STRUCTURE()
   @@IF PARAM-PROCESSED.FIND-IN-MAP( PARAM-TYPE.MAPPING-MEMBER-TYPE() ).HAS-VALUE()
     @@DBG-PRINT "      [3], type = @PARAM-TYPE.MAPPING-MEMBER-TYPE()@: FOUND"
     @@RETURN 1
   @@ELSE
     @@DBG-PRINT "      [3], type = @PARAM-TYPE.MAPPING-MEMBER-TYPE()@: NOT FOUND"
     @@RETURN 0
   @@ENDIF
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
     @@DBG-PRINT "      [4]"
   @@IF PARAM-ALL-NAMES.FIND-IN-MAP( PARAM-TYPE.COLLECTION-TYPE() ).HAS-VALUE()
     @@RETURN 1
   @@ELSE
     @@RETURN 0
   @@ENDIF
@@ELIF PARAM-TYPE.IS-SEQUENCE()
   @@DBG-PRINT "      [1], type = @PARAM-TYPE.COLLECTION-TYPE().MAPPING-MEMBER-TYPE()@"
   @@IF PARAM-ALL-NAMES.FIND-IN-MAP( PARAM-TYPE.COLLECTION-TYPE().MAPPING-MEMBER-TYPE() ).HAS-VALUE()
     @@RETURN 1
   @@ELSE
     @@RETURN FUNCTION-TEST-READINESS-TYPE( PARAM-TYPE.COLLECTION-TYPE(), PARAM-PROCESSED, PARAM-ALL-NAMES )
   @@ENDIF
@@ELIF PARAM-TYPE.IS-DICTIONARY()
   @@DBG-PRINT "      [2], key type = @PARAM-TYPE.COLLECTION-TYPE2().MAPPING-MEMBER-TYPE()@, value type = @PARAM-TYPE.COLLECTION-TYPE().MAPPING-MEMBER-TYPE()@"
   @@IF PARAM-ALL-NAMES.FIND-IN-MAP( PARAM-TYPE.COLLECTION-TYPE().MAPPING-MEMBER-TYPE() ).HAS-VALUE()
     @@IF PARAM-ALL-NAMES.FIND-IN-MAP( PARAM-TYPE.COLLECTION-TYPE2().MAPPING-MEMBER-TYPE() ).HAS-VALUE()
       @@RETURN 1
     @@ELSE
       @@RETURN FUNCTION-TEST-READINESS-TYPE( PARAM-TYPE.COLLECTION-TYPE2(), PARAM-PROCESSED, PARAM-ALL-NAMES )
     @@ENDIF
   @@ELSE
     @@IF FUNCTION-TEST-READINESS-TYPE( PARAM-TYPE.COLLECTION-TYPE(), PARAM-PROCESSED, PARAM-ALL-NAMES ) == 1
       @@IF PARAM-ALL-NAMES.FIND-IN-MAP( PARAM-TYPE.COLLECTION-TYPE2().MAPPING-MEMBER-TYPE() ).HAS-VALUE()
         @@RETURN 1
       @@ELSE
         @@RETURN FUNCTION-TEST-READINESS-TYPE( PARAM-TYPE.COLLECTION-TYPE2(), PARAM-PROCESSED, PARAM-ALL-NAMES )
       @@ENDIF
	 @@ELSE
	   @@RETURN 0
	 @@ENDIF
   @@ENDIF
@@ELIF PARAM-TYPE.IS-ENUM()
     @@DBG-PRINT "      [5]"
   @@RETURN 1
@@ELSE
     @@DBG-PRINT "      [6], type = @PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
   @@IF PARAM-PROCESSED.FIND-IN-MAP( PARAM-TYPE.MAPPING-MEMBER-TYPE() ).HAS-VALUE()
      @@RETURN 1
   @@ELSE
      @@RETURN 0
   @@ENDIF
   @@-RETURN 0
@@ENDIF
     @@DBG-PRINT "      [7]"
@@RETURN 0
@@END-FUNCTION NAME="FUNCTION-TEST-READINESS-TYPE"




@@-----------  GENERATION OF DECLARATIONS  -----------------


@@BEGIN-TEMPLATE NAME="MAP-DU"
@@ASSERT IS-SERIALIZABLE-DISCRIMINATED-UNION(PARAM-DU)
struct @PARAM-DU.STRUCT-NAME()@ {
@@FOR-EACH LOCAL-MEMBERS IN PARAM-DU.MEMBERS()
   @@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=LOCAL-MEMBERS.MEMBER-TYPE()
   @LOCAL-MEMBERS.MAPPING-MEMBER-NAME()@;
@@FOR-EACH END
};

@@END-TEMPLATE NAME="MAP-DU"


@@BEGIN-TEMPLATE NAME="MAP-S-CALLING"
@@ASSERT IS-SERIALIZABLE-STRUCT(PARAM-STRUCT)
struct @PARAM-STRUCT.STRUCT-NAME()@ {
@@FOR-EACH LOCAL-MEMBERS IN PARAM-STRUCT.MEMBERS()
   @@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=LOCAL-MEMBERS.MEMBER-TYPE()
   @LOCAL-MEMBERS.MAPPING-MEMBER-NAME()@;
@@FOR-EACH END
};

@@END-TEMPLATE NAME="MAP-S-CALLING"


@@BEGIN-TEMPLATE NAME="MAP-TYPE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.IS-INTEGER()) || (PARAM-TYPE.IS-FIXED-POINT()) || (PARAM-TYPE.IS-FLOATING-POINT()) || (PARAM-TYPE.IS-STRUCTURE())
   @PARAM-TYPE.MAPPING-MEMBER-TYPE()@
@@ELIF PARAM-TYPE.IS-CHARACTER-STRING()
   std::string 
@@ELIF PARAM-TYPE.IS-DISCRIMINATED-UNION()
@@IF "@PARAM-TYPE.MAPPING-MEMBER-TYPE()@" == "unique_ptr"
   @PARAM-TYPE.MAPPING-MEMBER-TYPE()@<
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
   >
@@ELSE
   @@ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MEMBER-TYPE()@"
@@ENDIF
@@ELIF PARAM-TYPE.IS-SEQUENCE()
   @PARAM-TYPE.MAPPING-MEMBER-TYPE()@<
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
   >
@@ELIF PARAM-TYPE.IS-DICTIONARY()
   @PARAM-TYPE.MAPPING-MEMBER-TYPE()@<
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2() 
   ,
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
   >
@@ELIF PARAM-TYPE.IS-ENUM()
enum @PARAM-TYPE.MAPPING-MEMBER-TYPE()@ {
   @@FOR-EACH LOCAL-ENUM-VAL IN PARAM-TYPE.ENUM-VALUES()
      @@INCLUDE TEMPLATE="MAP-ENUM-VALUE" PARAM-ENUM-VALUE=LOCAL-ENUM-VAL
   @@FOR-EACH END
} 
@@ELSE
   @PARAM-TYPE.MAPPING-MEMBER-TYPE()@
   @@-ASSERT "0" MSG="Cannot process member for declaring: type=@PARAM-TYPE.MAPPING-MEMBER-TYPE()@"
@@ENDIF
@@END-TEMPLATE NAME="MAP-TYPE"


@@BEGIN-TEMPLATE NAME="MAP-ENUM-VALUE"
@@ASSERT IS-ENUM-VALUE(PARAM-ENUM-VALUE)
@PARAM-ENUM-VALUE.ENUM-VALUE-NAME()@=@PARAM-ENUM-VALUE.MAPPING-ENUM-VALUE-VALUE()@,
@@END-TEMPLATE NAME="MAP-ENUM-VALUE"






@@-----------  processing SEQUENCEs (detailed list )  -----------------


@@BEGIN-TEMPLATE NAME="SEQUENCE-SIZE"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        @PARAM-NAME@.size() 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        (@PARAM-NAME@ != nullptr ? 1 : 0) 
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SEQUENCE-SIZE"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_BEGIN"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        auto& @PARAM-ITERATOR@ = @PARAM-NAME@.begin() 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        auto @PARAM-ITERATOR@ = @PARAM-NAME@ != nullptr ? &@PARAM-NAME@ : nullptr
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_BEGIN"


@@BEGIN-TEMPLATE NAME="SERILAIZE_IS_SEQUENCE_END"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        @PARAM-ITERATOR@ == @PARAM-NAME@.end() 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        @PARAM-ITERATOR@ == nullptr
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_IS_SEQUENCE_END"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_NEXT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        ++@PARAM-ITERATOR@ 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        @PARAM-ITERATOR@ = nullptr
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_NEXT"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        auto& @PARAM-OBJECT@ = *@PARAM-ITERATOR@;
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        auto& @PARAM-OBJECT@ = **@PARAM-ITERATOR@;
@@ELSE
//        auto& @PARAM-OBJECT@ = *@PARAM-ITERATOR@; // why am I here?!
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_DECLARE_OBJECT_AND_INIT_BY_ITERATOR"


@@BEGIN-TEMPLATE NAME="DESERILAIZE_SEQUENCE_DECLARE_TMP_OBJECT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        @PARAM-TMP-OBJECT@;
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        &@PARAM-TMP-OBJECT@ = *(new 
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        );
@@ELSE
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        @PARAM-TMP-OBJECT@;
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_SEQUENCE_DECLARE_TMP_OBJECT"


@@BEGIN-TEMPLATE NAME="DESERILAIZE_SEQUENCE_ADD_NEXT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        @PARAM-NAME@.push_back(std::move(@PARAM-TMP-OBJECT@)) 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        @PARAM-NAME@.reset(&@PARAM-TMP-OBJECT@) 
@@ELSE
        @PARAM-NAME@._add_item(&@PARAM-TMP-OBJECT@);
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_SEQUENCE_ADD_NEXT"




@@-----------  processing SEQUENCEs (shortcuts )  -----------------


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_BEGIN"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        for( auto& @PARAM-OBJECT@ : @PARAM-NAME@ )
		{ 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        if ( @PARAM-NAME@ != nullptr )
		{
		   auto& @PARAM-OBJECT@ = *@PARAM-NAME@;
@@ELSE
        for( auto& iter_@PARAM-OBJECT@ = @PARAM-NAME@._begin_sequence(); !@PARAM-NAME@._is_sequence_end(iter_@PARAM-OBJECT@); @PARAM-NAME@._sequence_next(iter_@PARAM-OBJECT@))
		{
		   auto& @PARAM-OBJECT@ = *iter_@PARAM-OBJECT@;
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_BEGIN"


@@BEGIN-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_END"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "vector") || (PARAM-TYPE.MAPPING-MEMBER-TYPE() == "list")
        } 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        } 
@@ELSE
        } 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_SEQUENCE_ITERATION_END"




@@-----------  processing DICTIONARY's (shortcuts )  -----------------


@@BEGIN-TEMPLATE NAME="DESERILAIZE_DICTIONARY_DECLARE_TMP_OBJECTS"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "map"
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE2()
        @PARAM-TMP-OBJECT@_key;
@@INCLUDE TEMPLATE="MAP-TYPE" PARAM-TYPE=PARAM-TYPE.COLLECTION-TYPE()
        @PARAM-TMP-OBJECT@_value;
@@ELSE
@@ASSERT 0 MSG="Error: processing dictionaries other than @"maps"@ are not implemented"
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_DICTIONARY_DECLARE_TMP_OBJECTS"


@@BEGIN-TEMPLATE NAME="DESERILAIZE_DICTIONARY_ADD_NEXT"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "map"
        @PARAM-NAME@.insert( make_pair( @PARAM-TMP-OBJECT@_key, @PARAM-TMP-OBJECT@_value ) )
@@ELSE
@@ASSERT 0 MSG="Error: processing dictionaries other than @"maps"@ are not implemented"
@@ENDIF
@@END-TEMPLATE NAME="DESERILAIZE_DICTIONARY_ADD_NEXT"


@@BEGIN-TEMPLATE NAME="SERILAIZE_DICTIONARY_ITERATION_BEGIN"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "map"
        for( auto& @PARAM-OBJECT@ : @PARAM-NAME@ )
		{ 
@@ELSE
   ASSERT 0
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_DICTIONARY_ITERATION_BEGIN"


@@BEGIN-TEMPLATE NAME="SERILAIZE_DICTIONARY_ITERATION_END"
@@ASSERT IS-MEMBER-TYPE(PARAM-TYPE)
@@IF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "map"
        } 
@@ELIF PARAM-TYPE.MAPPING-MEMBER-TYPE() == "unique_ptr"
        } 
@@ELSE
        } 
@@ENDIF
@@END-TEMPLATE NAME="SERILAIZE_DICTIONARY_ITERATION_END"






@@-----------  processing DISCRIMINATED-UNIONs  -----------------


@@BEGIN-TEMPLATE NAME="MAPPING-DISCRIMINATOR-NAME"
@@ASSERT IS-SERIALIZABLE-OBJECT(PARAM-DU)
@@-- we may want to have different option for different mapping types (say, unique_ptr, etc)
      @PARAM-DU.MAPPING-DISCRIMINATOR-NAME()@ 
@@END-TEMPLATE NAME="MAPPING-DISCRIMINATOR-NAME"



