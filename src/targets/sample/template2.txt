

@@BEGIN-TEMPLATE NAME="MAIN" TYPE="ROOT"
  @@IF ("0")
    @@INCLUDE TEMPLATE="ROOT_1"
  @@ELIF ("0")
    @@INCLUDE TEMPLATE="ROOT_2"
  @@ELSE
    @@INCLUDE TEMPLATE="ROOT_3"
  @@ENDIF
@@END-TEMPLATE NAME="MAIN"


@@BEGIN-TEMPLATE NAME="ROOT_1" TYPE="ROOT"
@@FOR-EACH-OF PUBLISHABLE-STRUCTS() BEGIN
@@OPEN-OUTPUT-FILE FILENAME="IDL_@STRUCT-NAME@.java"
@@INCLUDE TEMPLATE="SERIALIZE-S"
@@CLOSE-OUTPUT-FILE
@@FOR-EACH-OF END
@@END-TEMPLATE NAME="ROOT_1"


@@BEGIN-TEMPLATE NAME="ROOT_2" TYPE="ROOT"
@@OPEN-OUTPUT-FILE FILENAME="output.h"
  @@FOR-EACH-OF PUBLISHABLE-STRUCTS() TEMPLATE="SERIALIZE-S-CALLING"
@@CLOSE-OUTPUT-FILE
@@END-TEMPLATE NAME="ROOT_2"


@@BEGIN-TEMPLATE NAME="ROOT_3" TYPE="ROOT"
@@OPEN-OUTPUT-FILE FILENAME="output.h"
  @@FOR-EACH-OF PUBLISHABLE-STRUCTS() TYPE="STRUCT" TEMPLATE="SERIALIZE-S-CALLING-ALT"
@@CLOSE-OUTPUT-FILE
@@END-TEMPLATE NAME="ROOT_3"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S" TYPE="STRUCT"
void serialize@STRUCT-NAME@( @STRUCT-NAME@& s, OStream& o ) {
@@FOR-EACH-OF MEMBERS() BEGIN
@@IF ("@MEMBER-TYPE@" == "bool")
   o.writeByte(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "float")
   o.writeFloat(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "double")
   o.writeDouble(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "UINT8")
   o.writeByte(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "UINT16")
   o.writeINT16(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "Animation")
   o.writeAnimation(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "MyInventory")
   o.writeMyInventory(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "NUMERIC")
   o.writeNUMERIC(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "int")
   o.writeINT(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "SEQUENCE")
   o.writeSEQUENCE(s.@MEMBER-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "class")
   o.writeClass(s.@MEMBER-NAME@);
@@ELSE
  @@ASSERT ("0")
@@ENDIF
@@FOR-EACH-OF END
}
@@END-TEMPLATE NAME="SERIALIZE-S"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-CALLING" TYPE="STRUCT"
void serialize@STRUCT-NAME@( @STRUCT-NAME@& s, OStream& o ) {
@@FOR-EACH-OF MEMBERS() BEGIN
@@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="@MEMBER-NAME@" PARAM-TYPE="@MEMBER-TYPE@"
@@FOR-EACH-OF END
}
@@END-TEMPLATE NAME="SERIALIZE-S-CALLING"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT" TYPE="STRUCT"
void serialize@STRUCT-NAME@( @STRUCT-NAME@& s, OStream& o ) {
@@FOR-EACH-OF MEMBERS() TYPE="MEMBER" BEGIN
@@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="@MEMBER-NAME@" PARAM-TYPE="@MEMBER-TYPE@"
@@FOR-EACH-OF END
}
@@END-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@IF "TRUE"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="SERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@"
@@ELSE
@@IF ("@PARAM-TYPE@" == "bool")
   o.writeByte(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "float")
   o.writeFloat(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "double")
   o.writeDouble(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "UINT8")
   o.writeByte(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "UINT16")
   o.writeINT16(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "Animation")
   o.writeAnimation(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "MyInventory")
   o.writeMyInventory(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "NUMERIC")
   o.writeNUMERIC(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "int")
   o.writeINT(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "SEQUENCE")
   o.writeSEQUENCE(s.@PARAM-NAME@);
@@ELIF ("@PARAM-TYPE@" == "class")
   o.writeClass(s.@PARAM-NAME@);
@@ELSE
@@ASSERT ("0")
@@ENDIF
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="SERIALIZE-TYPE" TYPE="DATATYPE"
@@IF ("@MEMBER-TYPE@" == "bool")
   o.writeByte(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "float")
   o.writeFloat(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "double")
   o.writeDouble(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "UINT8")
   o.writeByte(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "UINT16")
   o.writeINT16(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "Animation")
   o.writeAnimation(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "MyInventory")
   o.writeMyInventory(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "NUMERIC")
   o.writeNUMERIC(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "int")
   o.writeINT(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "SEQUENCE")
   o.writeSEQUENCE(s.@PARAM-NAME@);
@@ELIF ("@MEMBER-TYPE@" == "class")
   o.writeClass(s.@PARAM-NAME@);
@@ELSE
@@ASSERT ("0")
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="MAP-S" TYPE="STRUCT"
typedef _@STRUCT-NAME@ {
@@FOR-EACH-OF MEMBERS() BEGIN
   @MEMBER-TYPE@ @MEMBER-NAME@;
@@FOR-EACH-OF END
} @STRUCT-NAME@;
@@END-TEMPLATE NAME="MAP-S"


@@BEGIN-TEMPLATE NAME="MAP-S-CALLING" TYPE="STRUCT"
typedef _@STRUCT-NAME@ {
@@FOR-EACH-OF MEMBERS() BEGIN
@@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="@MEMBER-NAME@" PARAM-TYPE="@MEMBER-TYPE@"
@@FOR-EACH-OF END
} @STRUCT-NAME@;
@@END-TEMPLATE NAME="MAP-S-CALLING"


@@BEGIN-TEMPLATE NAME="MAP-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT"
   @PARAM-TYPE@ @PARAM-NAME@;
@@END-TEMPLATE NAME="MAP-S-FOR-EACH-OF-MEMBERS"
