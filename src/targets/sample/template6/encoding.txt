

@@BEGIN-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT" TYPE="STRUCT"
inline void serialize@STRUCT-NAME@( @STRUCT-NAME@& s, OStream& o ) {
   @@FOR-EACH-OF MEMBERS() BEGIN
      @@INCLUDE TEMPLATE="SERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MEMBER-NAME@" PARAM-TYPE="@ENCODING-MEMBER-TYPE@"
   @@FOR-EACH-OF END
}

@@END-TEMPLATE NAME="SERIALIZE-S-CALLING-ALT"


@@BEGIN-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="SERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@"
@@END-TEMPLATE NAME="SERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="SERIALIZE-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT()
   o.write_@ENCODING-MEMBER-TYPE@(@PARAM-NAME@);
@@ELIF IS-CHARACTER-STRING()
   o.write_string(@PARAM-NAME@);
@@ELIF IS-STRUCTURE()
   serialize@ENCODING-MEMBER-TYPE@(@PARAM-NAME@, o);
@@ELIF IS-ENUM()
      switch ( s.anim )
	  {
   @@LET LOCAL-ENCODING-MEMBER-TYPE="@ENCODING-MEMBER-TYPE@"
   @@FOR-EACH-OF ENUM-VALUES() BEGIN
      @@INCLUDE TEMPLATE="SERIALIZE-ENUM-VALUE" PARAM-NAME="@PARAM-NAME@" PARAM-TYPE=LOCAL-ENCODING-MEMBER-TYPE
   @@FOR-EACH-OF END
        default: assert( 0 );
	  }
@@ELIF IS-SEQUENCE()
   o.write_uint32_t( 
@@INCLUDE TEMPLATE="SEQUENCE-SIZE" PARAM-NAME=PARAM-NAME
     );
   for(auto item:@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item" TYPE="DATATYPE"
   }
@@ELIF IS-DICTIONARY()
   o.write_uint32_t(@PARAM-NAME@.size());
   for(auto item:@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE2() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.first" TYPE="DATATYPE"
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="SERIALIZE-TYPE" PARAM-NAME="item.second" TYPE="DATATYPE"
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@ENCODING-MEMBER-TYPE@"
@@ENDIF
@@END-TEMPLATE NAME="SERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="SERIALIZE-ENUM-VALUE" TYPE="ENUMVALUE"
        case s.@ENUM-VALUE-NAME@: o.write_@PARAM-TYPE@( @ENCODING-ENUM-VALUE-VALUE@ ); break;
@@END-TEMPLATE NAME="SERIALIZE-ENUM-VALUE"






@@BEGIN-TEMPLATE NAME="DESERIALIZE-S-CALLING-ALT" TYPE="STRUCT"
inline bool deserialize@STRUCT-NAME@( @STRUCT-NAME@& s, IStream& i ) {
   @@FOR-EACH-OF MEMBERS() BEGIN
      @@INCLUDE TEMPLATE="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="s.@MEMBER-NAME@" PARAM-TYPE="@ENCODING-MEMBER-TYPE@"
   @@FOR-EACH-OF END

   return true;
}

@@END-TEMPLATE NAME="DESERIALIZE-S-CALLING-ALT"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="DESERIALIZE-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@"
@@END-TEMPLATE NAME="DESERIALIZE-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT()
   i.read_@ENCODING-MEMBER-TYPE@(@PARAM-NAME@);
@@ELIF IS-CHARACTER-STRING()
   i.read_string(@PARAM-NAME@);
@@ELIF IS-STRUCTURE()
   deserialize@ENCODING-MEMBER-TYPE@(@PARAM-NAME@, i);
@@ELIF IS-ENUM()
   {
       uint8_t tmp;
       i.read_uint8_t(tmp);
       switch ( tmp )
       {
   @@FOR-EACH-OF ENUM-VALUES() BEGIN
      @@INCLUDE TEMPLATE="DESERIALIZE-ENUM-VALUE" PARAM-NAME="@PARAM-NAME@"
   @@FOR-EACH-OF END
          default: assert(0);
       }
   }
 
@@ELIF IS-SEQUENCE()
   {
     uint32_t size;
	 i.read_uint32_t(size);
     for(uint32_t k=0; k<size; ++k) {
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
      item;
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="item" TYPE="DATATYPE"
	   @PARAM-NAME@.push_back( item );
     }
   }
@@ELIF IS-DICTIONARY()
   for(auto item:@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE2() TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="item.first" TYPE="DATATYPE"
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="DESERIALIZE-TYPE" PARAM-NAME="item.second" TYPE="DATATYPE"
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@, type=@ENCODING-MEMBER-TYPE@"
@@ENDIF
@@END-TEMPLATE NAME="DESERIALIZE-TYPE"


@@BEGIN-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE" TYPE="ENUMVALUE"
	      case @ENCODING-ENUM-VALUE-VALUE@: @PARAM-NAME@ = s.@ENUM-VALUE-NAME@; break;
@@END-TEMPLATE NAME="DESERIALIZE-ENUM-VALUE"







@@BEGIN-TEMPLATE NAME="PRINT-S" TYPE="STRUCT"
inline void print@STRUCT-NAME@( @STRUCT-NAME@& s ) {
   @@FOR-EACH-OF MEMBERS() BEGIN
    cout << "@MEMBER-NAME@: ";
      @@INCLUDE TEMPLATE="PRINT-S-FOR-EACH-OF-MEMBERS" PARAM-NAME="@MEMBER-NAME@" PARAM-TYPE="@ENCODING-MEMBER-TYPE@"
    cout << endl;
   @@FOR-EACH-OF END
}

@@END-TEMPLATE NAME="PRINT-S"


@@BEGIN-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS" TYPE="STRUCT-MEMBER"
@@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="PRINT-TYPE" TYPE="DATATYPE" PARAM-NAME="@PARAM-NAME@"
@@END-TEMPLATE NAME="PRINT-S-FOR-EACH-OF-MEMBERS"


@@BEGIN-TEMPLATE NAME="PRINT-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT() || IS-CHARACTER-STRING()
   cout << s.@PARAM-NAME@;
@@ELIF IS-STRUCTURE()
   print@ENCODING-MEMBER-TYPE@( @PARAM-NAME@ );
@@ELIF IS-ENUM()
   cout << s.@PARAM-NAME@;
@@ELIF IS-SEQUENCE()
   for(auto item:s.@PARAM-NAME@) {
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="PRINT-TYPE" TYPE="DATATYPE" PARAM-NAME="item"
   }
@@ELIF IS-DICTIONARY()
   for(auto item:@PARAM-NAME@) {
//@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@", kind: DICTIONARY
   }
@@ELSE
@@ASSERT "0" MSG="Cannot process member for serialization: name=@PARAM-NAME@"
@@ENDIF
@@END-TEMPLATE NAME="PRINT-TYPE"









