

@@BEGIN-TEMPLATE NAME="MAP-S-CALLING" TYPE="STRUCT"
struct @STRUCT-NAME@ {
@@FOR-EACH-OF MEMBERS() BEGIN
   @@INCLUDE-WITH MEMBER-TYPE() TEMPLATE="MAP-TYPE" TYPE="DATATYPE"
   @MAPPING-MEMBER-NAME@;
@@FOR-EACH-OF END
};

@@END-TEMPLATE NAME="MAP-S-CALLING"


@@BEGIN-TEMPLATE NAME="MAP-TYPE" TYPE="DATATYPE"
@@IF IS-INTEGER() || IS-FIXED-POINT() || IS-FLOATING-POINT() || IS-STRUCTURE()
   @MAPPING-MEMBER-TYPE@
@@ELIF IS-CHARACTER-STRING()
   std::string 
@@ELIF IS-DISCRIMINATED-UNION()
@@IF "@MAPPING-MEMBER-TYPE@" == "unique_ptr"
   @MAPPING-MEMBER-TYPE@<
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
   >
@@ELSE
   @@ASSERT "0" MSG="Cannot process member for declaring: type=@MEMBER-TYPE@"
@@ENDIF
@@ELIF IS-SEQUENCE()
   @MAPPING-MEMBER-TYPE@<
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
   >
@@ELIF IS-DICTIONARY()
   @MAPPING-MEMBER-TYPE@<
@@INCLUDE-WITH COLLECTION-TYPE2() TEMPLATE="MAP-TYPE"
   ,
@@INCLUDE-WITH COLLECTION-TYPE() TEMPLATE="MAP-TYPE"
   >
@@ELIF IS-ENUM()
enum @MAPPING-MEMBER-TYPE@ {
   @@FOR-EACH-OF ENUM-VALUES() BEGIN
      @@INCLUDE TEMPLATE="MAP-ENUM-VALUE-ALT"
   @@FOR-EACH-OF END
} 
@@ELSE
   @@ASSERT "0" MSG="Cannot process member for declaring: type=@MEMBER-TYPE@"
@@ENDIF
@@END-TEMPLATE NAME="MAP-TYPE"


@@BEGIN-TEMPLATE NAME="MAP-ENUM-VALUE" TYPE="ENUMVALUE"
@ENUM-VALUE-NAME@=@ENUM-VALUE-VALUE@,
@@END-TEMPLATE NAME="MAP-ENUM-VALUE"


@@BEGIN-TEMPLATE NAME="MAP-ENUM-VALUE-ALT" TYPE="ENUMVALUE"
@@LET LOCAL-NAME="@ENUM-VALUE-NAME@"
@LOCAL-NAME@=@MAPPING-ENUM-VALUE-VALUE@, 
@@END-TEMPLATE NAME="MAP-ENUM-VALUE-ALT"








@@BEGIN-TEMPLATE NAME="SEQUENCE-SIZE" TYPE="DATATYPE"
@@IF (MAPPING-MEMBER-TYPE == "vector") || (MAPPING-MEMBER-TYPE == "list")
        @PARAM-NAME@.size() 
@@ELSE
        @PARAM-NAME@._size() 
@@ENDIF
@@END-TEMPLATE NAME="SEQUENCE-SIZE"
